%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R]  
  /Count 5
>>
endobj
3 0 obj
<<
  /Length 740
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (unit) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Understanding Unit Type) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Unit Value Creation) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Working with Side-Effect Functions) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (String Representation and Debugging) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Generic Programming with Unit) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Built-in Trait Implementations) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Practical Use Cases) Tj -40 0 Td 12 TL (1.7.1)' 0 TL 40 0 Td (Result Accumulation) Tj -40 0 Td 12 TL (1.7.2)' 0 TL 40 0 Td (Builder Pattern Termination) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 4096
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (unit) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (unit) Tj /F0 12 Tf ( package provides functionality for working with the singleton type ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf () Tj T* (, which represents computations that produce side effects but return no meaningf) Tj T* (ul value. This is a fundamental type in functional programming for operations li) Tj T* (ke I/O, logging, and state modifications.) Tj T* 12 TL T* /F0 20 Tf (Understanding Unit Type) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( type has exactly one value: ) Tj /F0 12 Tf (\(\)) Tj /F0 12 Tf (. This might seem trivial, but it serve) Tj T* (s important purposes in type systems:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Side Effect Indication) Tj /F0 12 Tf (: Functions returning ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( signal they're called for side ) Tj T* (effects) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Placeholder Type) Tj /F0 12 Tf (: Used when a type parameter is needed but no meaningful value e) Tj T* (xists) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Functional Programming) Tj /F0 12 Tf (: Represents "no useful return value" without using ) Tj /F0 12 Tf (null) Tj /F0 12 Tf ( o) Tj T* (r exceptions) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Interface Consistency) Tj /F0 12 Tf (: Maintains uniform function signatures in generic contexts) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Unit Value Creation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The unit value can be created in multiple ways:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unit construction") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @unit) Tj 0 0 0 rg (.default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (    println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Hello, world!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Side-Effect Functions) Tj 20 TL T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 4770
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (Functions that return ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( are typically called for their side effects:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "side effect patterns") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( processing_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg (.fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (      println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (processing_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  numbers) Tj 0 0 0 rg (.each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Representation and Debugging) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Unit values have a standard string representation for debugging:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unit string conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( perform_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( perform_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( debug_msg) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Operation completed: \\{result}") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (debug_msg) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Operation completed: \(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Generic Programming with Unit) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Unit is particularly useful in generic contexts where you need to represent "no ) Tj T* (meaningful value":) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 5161
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "generic unit usage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                              ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( items) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  items) Tj 0 0 0 rg (.each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( processed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (processed) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                                                          ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( completion_status) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (completion_status) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                                                  ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( operation_result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Unit) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (operation_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Ok\(\(\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Built-in Trait Implementations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Unit implements essential traits for seamless integration with MoonBit's type sy) Tj T* (stem:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unit trait implementations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u1) Tj 0 0 0 rg (.compare) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( h1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg (.hash) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( h2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg (.hash) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (h1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( h2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg (::) Tj 0 0 0 rg (default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u3) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Use Cases) Tj 20 TL T* 12 TL T* /F0 16 Tf (Result Accumulation) Tj 16 TL T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 4064
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "result accumulation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                               ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( operations) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (,) Tj 0 0 0 rg (               ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (,) Tj 0 0 0 rg (               ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  ]) Tj 0 0 0 rg (               ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( final_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( operations) Tj 0 0 0 rg (.fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( operation) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (    acc) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (final_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Builder Pattern Termination) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "builder pattern") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                            ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( settings) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("debug=true") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "timeout=30") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                              ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( apply_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config_list) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( _has_settings) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( config_list) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( apply_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (settings) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( type provides essential functionality for representing "no meaningful r) Tj T* (eturn value" in a type-safe way, enabling clean functional programming patterns ) Tj T* (and consistent interfaces across MoonBit code.) Tj T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 13
0000000000 65535 f 
0000000055 00000 n
0000000093 00000 n
0000000793 00000 n
0000000521 00000 n
0000004150 00000 n
0000000521 00000 n
0000004824 00000 n
0000000521 00000 n
0000005215 00000 n
0000000522 00000 n
0000004119 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
22192
%%EOF
