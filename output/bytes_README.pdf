%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R]  
  /Count 4
>>
endobj
3 0 obj
<<
  /Length 450
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (bytes) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Creating Bytes) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Converting Between Formats) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Working with Views) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Binary Data Interpretation) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Concatenation and Comparison) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 4252
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (bytes) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utilities for working with sequences of bytes, offering bo) Tj T* (th mutable \() Tj /F0 12 Tf (Bytes) Tj /F0 12 Tf (\) and immutable \() Tj /F0 12 Tf (View) Tj /F0 12 Tf (\) representations.) Tj T* 12 TL T* /F0 20 Tf (Creating Bytes) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create ) Tj /F0 12 Tf (Bytes) Tj /F0 12 Tf ( from various sources including arrays, fixed arrays, and it) Tj T* (erators:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes creation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (b'h') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'e') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'l') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'l') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'o') Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    bytes1) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 1 0 0 rg (      #|b"\\x68\\x65\\x6c\\x6c\\x6f") Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( FixedArray) Tj 0 0 0 rg (::) Tj 0 0 0 rg (make) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'a') Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg (fixed) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    bytes2) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|b"\\x61\\x61\\x61") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    empty) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 1 0 0 rg (      #|b"") Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( iter_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 0 rg (    iter_bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 1 0 0 rg (      #|b"\\x68\\x65\\x6c\\x6c\\x6f") Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (39  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (40  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Converting Between Formats) Tj 20 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 5200
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Bytes) Tj /F0 12 Tf ( can be converted to and from different formats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( original) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (b'x') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'y') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'z') Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (original) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[b'\\\\x78', b'\\\\x79', b'\\\\x7A']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( to_fixedarray) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (fixed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[b'\\\\x78', b'\\\\x79', b'\\\\x7A']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( collected) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (collected) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[b'\\\\x78', b'\\\\x79', b'\\\\x7A']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Views) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Views provide a way to work with portions of bytes and interpret them as various) Tj T* ( numeric types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes view operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (0x12) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x34) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x56) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x78) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num_bytes) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("b'\\\\x12'") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg ( to_int_be) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("305419896") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg ( to_int_le) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2018915346") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sub_view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (:) Tj 1 0 1 rg (3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sub_view) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Binary Data Interpretation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Views provide methods to interpret byte sequences as various numeric types in bo) Tj T* (th little-endian and big-endian formats:) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 4404
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "numeric interpretation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( int64_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 1 0 1 rg (    0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x42) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  ]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( int64_view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( int64_bytes) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (int64_view) Tj 0 0 0 rg ( to_int64_be) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("66") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (int64_view) Tj 0 0 0 rg ( to_uint64_le) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4755801206503243776") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Concatenation and Comparison) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Bytes can be concatenated and compared:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'a') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'b') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'c') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'd') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( combined) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( b1) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b2) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    combined) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      #|b"\\x61\\x62\\x63\\x64") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( same) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'a') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'b') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( different) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'x') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'y') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( same) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( different) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b1) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( b2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 11
0000000000 65535 f 
0000000055 00000 n
0000000086 00000 n
0000000503 00000 n
0000000521 00000 n
0000004306 00000 n
0000000521 00000 n
0000005254 00000 n
0000000521 00000 n
0000004458 00000 n
0000000522 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
17042
%%EOF
