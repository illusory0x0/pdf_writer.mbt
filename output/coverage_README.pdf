%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R 14 0 R 16 0 R 18 0 R 20 0 R]  
  /Count 9
>>
endobj
3 0 obj
<<
  /Length 977
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (Coverage Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Coverage Counter) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Tracking Code Execution) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Loop Coverage Tracking) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Function Coverage) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Coverage Analysis) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Integration with Testing) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Coverage Reporting) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (1.8.1)' 0 TL 40 0 Td (1. Automatic Coverage Generation) Tj -40 0 Td 12 TL (1.8.2)' 0 TL 40 0 Td (2. Coverage-Driven Testing) Tj -40 0 Td 12 TL (1.9)' 0 TL 40 0 Td (Integration with Build System) Tj -40 0 Td 12 TL (1.10)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL (1.11)' 0 TL 40 0 Td (Common Use Cases) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 2492
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Coverage Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides code coverage tracking utilities for MoonBit programs. It ) Tj T* (includes tools for measuring which parts of your code are executed during testin) Tj T* (g and generating coverage reports.) Tj T* 12 TL T* /F0 20 Tf (Coverage Counter) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The core component for tracking code execution:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage counter basics") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[0, 0, 0, 0, 0]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 0, 1, 0, 0]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Tracking Code Execution) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use coverage counters to track which code paths are executed:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 3745
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "tracking execution paths") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (7   ) Tj 1 0 0 rg (      "positive") Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (10  ) Tj 1 0 0 rg (      "negative") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (             ) Tj T* 12 TL (13  ) Tj 1 0 0 rg (      "zero") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("positive") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("negative") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 1, 1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Loop Coverage Tracking) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Track coverage in loops and iterations:) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 3810
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "loop coverage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( process_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                          ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (        sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (        sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    sum) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (                       ) Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( process_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (test_data) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                                                    ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("24") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( coverage_str) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (coverage_str) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Function Coverage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Track coverage across different functions:) Tj T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 5027
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "function coverage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    op) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( op) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      "add") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (        a) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (      "sub") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (        a) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      "mul") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (        a) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (      _) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 1 0 1 rg (        0) Tj 0 0 0 rg (                     ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (31  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( add_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "add") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (add_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("15") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sub_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "sub") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sub_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( unknown_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "unknown") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (unknown_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (                                                    ) Tj T* 12 TL (39  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( final_coverage) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (40  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (final_coverage) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 1, 0, 1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (41  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Coverage Analysis) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Analyze coverage data to understand code execution:) Tj T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
13 0 obj
<<
  /Length 4862
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage analysis") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (input) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( input) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (      return) Tj 1 0 0 rg ( "negative") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( input) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (               ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (      return) Tj 1 0 0 rg ( "zero") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( input) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                       ) Tj T* 12 TL (18  ) Tj 1 0 0 rg (      "large") Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (      "small") Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("negative") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("small") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (                                                                                                             ) Tj T* 12 TL (35  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (coverage) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Integration with Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Coverage tracking integrates with MoonBit's testing system:) Tj T* 12 TL T* ET
endstream
endobj
14 0 obj
<<
  /Type /Page  
  /Contents 13 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
15 0 obj
<<
  /Length 3269
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "testing integration") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                           ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( test_function_with_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                                ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg ( helper) Tj 0 0 0 rg (\() Tj 0 0 0 rg (condition) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( cov) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( condition) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (        cov) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (        "true_branch") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (      }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (        cov) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (        "false_branch") Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( helper) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( helper) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    result1) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "true_branch") Tj 0 0 0 rg ( &&) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "false_branch") Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_passed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( test_function_with_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (test_passed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Coverage Reporting) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Generate and analyze coverage reports:) Tj T* 12 TL T* ET
endstream
endobj
16 0 obj
<<
  /Type /Page  
  /Contents 15 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
17 0 obj
<<
  /Length 5018
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage reporting") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg (.incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 0, 1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( analyze_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_coverage_str) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                                                     ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                  ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                            ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (covered) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( total) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( analyze_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (covered) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (total) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (1. Automatic Coverage Generation) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (In real applications, coverage tracking is typically generated automatically:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (                                                               ) Tj T* 12 TL (3   ) Tj 0 0 1 rg (fn) Tj 0 0 0 rg ( example_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                       ) Tj T* 12 TL (7   ) Tj 1 0 0 rg (    "positive") Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                       ) Tj T* 12 TL (10  ) Tj 1 0 0 rg (    "non-positive") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "automatic coverage concept") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( example_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("positive") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (2. Coverage-Driven Testing) Tj 16 TL T* 12 TL T* ET
endstream
endobj
18 0 obj
<<
  /Type /Page  
  /Contents 17 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
19 0 obj
<<
  /Length 4783
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (Use coverage information to improve test quality:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage driven testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( multi_branch_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 1 0 0 rg (      "greater") Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 1 0 0 rg (      "less") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      "equal") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (multi_branch_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("greater") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (multi_branch_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("less") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (multi_branch_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("equal") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Integration with Build System) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Coverage tracking integrates with MoonBit's build tools:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon test) Tj /F0 12 Tf ( to run tests with coverage tracking) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon coverage analyze) Tj /F0 12 Tf ( to generate coverage reports) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Coverage data helps identify untested code paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Supports both line coverage and branch coverage analysis) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Coverage tracking adds minimal runtime overhead) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Counters use efficient fixed arrays for storage) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Coverage instrumentation is typically removed in release builds) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use coverage data to optimize test suite performance) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Common Use Cases) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Test Quality Assessment) Tj /F0 12 Tf (: Ensure comprehensive test coverage) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Dead Code Detection) Tj /F0 12 Tf (: Find unused code paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Regression Testing) Tj /F0 12 Tf (: Verify that tests exercise the same code paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Performance Analysis) Tj /F0 12 Tf (: Identify frequently executed code for optimization) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Code Review) Tj /F0 12 Tf (: Understand which parts of code are well-tested) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The coverage package provides essential tools for maintaining high-quality, well) Tj T* (-tested MoonBit code through comprehensive coverage analysis.) Tj T* 12 TL T* ET
endstream
endobj
20 0 obj
<<
  /Type /Page  
  /Contents 19 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 21
0000000000 65535 f 
0000000055 00000 n
0000000121 00000 n
0000001030 00000 n
0000000521 00000 n
0000002546 00000 n
0000000521 00000 n
0000003799 00000 n
0000000521 00000 n
0000003864 00000 n
0000000522 00000 n
0000005082 00000 n
0000000523 00000 n
0000004917 00000 n
0000000523 00000 n
0000003324 00000 n
0000000523 00000 n
0000005073 00000 n
0000000523 00000 n
0000004838 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
39844
%%EOF
