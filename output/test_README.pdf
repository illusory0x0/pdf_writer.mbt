%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R 14 0 R 16 0 R 18 0 R]  
  /Count 8
>>
endobj
3 0 obj
<<
  /Length 1440
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (Test Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic Test Structure) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Assertion Functions) Tj -40 0 Td 12 TL (1.2.1)' 0 TL 40 0 Td (Object Identity Testing) Tj -40 0 Td 12 TL (1.2.2)' 0 TL 40 0 Td (Failure Testing) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Test Output and Logging) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Snapshot Testing) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Advanced Testing Patterns) Tj -40 0 Td 12 TL (1.5.1)' 0 TL 40 0 Td (Testing with Complex Data) Tj -40 0 Td 12 TL (1.5.2)' 0 TL 40 0 Td (Error Condition Testing) Tj -40 0 Td 12 TL (1.5.3)' 0 TL 40 0 Td (Property-Based Testing) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Test Organization) Tj -40 0 Td 12 TL (1.6.1)' 0 TL 40 0 Td (Grouping Related Tests) Tj -40 0 Td 12 TL (1.6.2)' 0 TL 40 0 Td (Setup and Teardown Patterns) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Testing Best Practices) Tj -40 0 Td 12 TL (1.7.1)' 0 TL 40 0 Td (Clear Test Names) Tj -40 0 Td 12 TL (1.7.2)' 0 TL 40 0 Td (One Concept Per Test) Tj -40 0 Td 12 TL (1.7.3)' 0 TL 40 0 Td (Use Meaningful Test Data) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Integration with MoonBit Build System) Tj -40 0 Td 12 TL (1.9)' 0 TL 40 0 Td (Common Testing Patterns) Tj -40 0 Td 12 TL (1.10)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 3721
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Test Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides testing utilities and assertion functions for MoonBit prog) Tj T* (rams. It includes functions for comparing values, checking object identity, and ) Tj T* (creating structured test outputs with snapshot testing capabilities.) Tj T* 12 TL T* /F0 20 Tf (Basic Test Structure) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit tests are written using the ) Tj /F0 12 Tf (test) Tj /F0 12 Tf ( keyword:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic test example") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Assertion Functions) Tj 20 TL T* 12 TL T* /F0 16 Tf (Object Identity Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test whether two values refer to the same object in memory:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "object identity") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str1) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _str2) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( str1) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  @test) Tj 0 0 0 rg (.same_object) Tj 0 0 0 rg (\() Tj 0 0 0 rg (str1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( str3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                           ) Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                                   ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  @test) Tj 0 0 0 rg (.same_object) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                                                                              ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Failure Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Explicitly fail tests with custom messages:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 4140
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "conditional failure") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  if) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    @test) Tj 0 0 0 rg (.fail) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Value should not be negative: \\{value}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Test Output and Logging) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create structured test outputs using the Test type:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "test output") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( t) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @test) Tj 0 0 0 rg (.new) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Example Test") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.write) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Testing basic functionality: ") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("PASS") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Step 1: Initialize data") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Step 2: Process data") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Step 3: Verify results") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Snapshot Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Compare test outputs against saved snapshots:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "snapshot testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( t) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @test) Tj 0 0 0 rg (.new) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Snapshot Test") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Current timestamp: 2024-01-01") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Processing items: [1, 2, 3, 4, 5]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Result: SUCCESS") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg (.snapshot) Tj 0 0 0 rg (\() Tj 0 0 0 rg (filename) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("test_output") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Advanced Testing Patterns) Tj 20 TL T* 12 TL T* /F0 16 Tf (Testing with Complex Data) Tj 16 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 4275
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test functions that work with complex data structures:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "complex data testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( doubled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg (.map) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (doubled) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 4, 6, 8, 10]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                                                    ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( person_data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("Alice") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (person_data) Tj 0 0 0 rg (.0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Alice") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (person_data) Tj 0 0 0 rg (.1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("30") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Error Condition Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test that functions properly handle error conditions:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(5\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (error_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Property-Based Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test properties that should hold for various inputs:) Tj T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 4901
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "property testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( is_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    n) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( value) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( test_values) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( not) Tj 0 0 0 rg (\() Tj 0 0 0 rg (is_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (      @test) Tj 0 0 0 rg (.fail) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Expected \\{value} to be even") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( odd_values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( value) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( odd_values) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( is_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      @test) Tj 0 0 0 rg (.fail) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Expected \\{value} to be odd") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Test Organization) Tj 20 TL T* 12 TL T* /F0 16 Tf (Grouping Related Tests) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use descriptive test names to group related functionality:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string operations - concatenation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( " ") Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "world") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("hello world") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string operations - length") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "MoonBit") Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (text) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("7") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string operations - substring") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello, World!") Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sub) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sub) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("13") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Setup and Teardown Patterns) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create helper functions for common test setup:) Tj T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
13 0 obj
<<
  /Length 3516
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "with setup helper") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( setup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    [) Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 40) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( cleanup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_data) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( setup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg ([) Tj 1 0 1 rg (4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  cleanup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Testing Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (Clear Test Names) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use descriptive names that explain what is being tested:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "user_can_login_with_valid_credentials") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "login_fails_with_invalid_password") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "shopping_cart_calculates_total_correctly") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (One Concept Per Test) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Keep tests focused on a single concept:) Tj T* 12 TL T* ET
endstream
endobj
14 0 obj
<<
  /Type /Page  
  /Contents 13 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
15 0 obj
<<
  /Length 4833
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array_push_increases_length") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( initial_length) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg (.push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_length) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_length) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\\{initial_length + 1}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array_push_adds_element_at_end") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg (.push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg (.push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (20) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ([) Tj 0 0 0 rg (arr) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("20") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Use Meaningful Test Data) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Choose test data that makes the test's intent clear:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "tax_calculation_for_standard_rate") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( price) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tax_rate) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (                                ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( calculated_tax) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( price) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( tax_rate) Tj 0 0 0 rg ( /) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (calculated_tax) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Integration with MoonBit Build System) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Tests are automatically discovered and run by the MoonBit build system:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon test) Tj /F0 12 Tf ( to run all tests) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon test --update) Tj /F0 12 Tf ( to update snapshots) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Tests in ) Tj /F0 12 Tf (*_test.mbt) Tj /F0 12 Tf ( files are blackbox tests) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Tests in regular ) Tj /F0 12 Tf (.mbt) Tj /F0 12 Tf ( files are whitebox tests) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Common Testing Patterns) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Arrange-Act-Assert) Tj /F0 12 Tf (: Set up data, perform operation, verify result) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Given-When-Then) Tj /F0 12 Tf (: Given some context, when an action occurs, then verify outcome) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Red-Green-Refactor) Tj /F0 12 Tf (: Write failing test, make it pass, improve code) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Test-Driven Development) Tj /F0 12 Tf (: Write tests before implementation) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* ET
endstream
endobj
16 0 obj
<<
  /Type /Page  
  /Contents 15 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
17 0 obj
<<
  /Length 774
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Keep tests fast by avoiding expensive operations when possible) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use setup/teardown functions to share expensive initialization) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Consider using smaller datasets for unit tests) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Save integration tests with large datasets for separate test suites) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The test package provides essential tools for ensuring code quality and correctn) Tj T* (ess in MoonBit applications through comprehensive testing capabilities.) Tj T* 12 TL T* ET
endstream
endobj
18 0 obj
<<
  /Type /Page  
  /Contents 17 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 19
0000000000 65535 f 
0000000055 00000 n
0000000114 00000 n
0000001494 00000 n
0000000521 00000 n
0000003775 00000 n
0000000521 00000 n
0000004194 00000 n
0000000521 00000 n
0000004329 00000 n
0000000522 00000 n
0000004956 00000 n
0000000523 00000 n
0000003571 00000 n
0000000523 00000 n
0000004888 00000 n
0000000523 00000 n
0000000828 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
32836
%%EOF
