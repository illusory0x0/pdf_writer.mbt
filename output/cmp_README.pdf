%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R]  
  /Count 2
>>
endobj
3 0 obj
<<
  /Length 258
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (cmp) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Generic Comparison Functions) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Comparison by Key) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 5672
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (cmp) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utility functions for comparing values.) Tj T* 12 TL T* /F0 20 Tf (Generic Comparison Functions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The library provides generic comparison functions that work with any type implem) Tj T* (enting the ) Tj /F0 12 Tf (Compare) Tj /F0 12 Tf ( trait:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "generic comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg (.maximum) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg (.minimum) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison by Key) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (With ) Tj /F0 12 Tf (@cmp.maximum_by_key\(\)) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (@cmp.minimum_by_key\(\)) Tj /F0 12 Tf (, it is possible to comp) Tj T* (are values based on arbitrary keys derived from the them. This is particularly u) Tj T* (seful when you need to compare complex objects based on some specific aspect or ) Tj T* (field.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "cmp_by_key") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  struct) Tj 0 0 0 rg ( Person) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    name) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    age) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 1 rg ( derive) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Show) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( s1) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( s2) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hi") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( longer) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @cmp) Tj 0 0 0 rg (.maximum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (s1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( s2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (length) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (longer) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( alice) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( name) Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "Alice") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( age) Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 25) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bob) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( name) Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "Bob") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( age) Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( younger) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @cmp) Tj 0 0 0 rg (.minimum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (alice) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( bob) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( p) Tj 0 0 0 rg (.age) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (younger) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("{name: \\"Alice\\", age: 25}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                                                                      ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( p1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("first") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("second") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( snd) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (p) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (_) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( _) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( p) Tj 0 0 0 rg (.1) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg (.minimum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (p1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( snd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg (.maximum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (p1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( snd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 7
0000000000 65535 f 
0000000055 00000 n
0000000073 00000 n
0000000311 00000 n
0000000521 00000 n
0000005726 00000 n
0000000521 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
7421
%%EOF
