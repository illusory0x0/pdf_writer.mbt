%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R 14 0 R 16 0 R 18 0 R 20 0 R 22 0 R 24 0 R 26 0 R 28 0 R 30 0 R 32 0 R 34 0 R 36 0 R 38 0 R 40 0 R 42 0 R 44 0 R 46 0 R 48 0 R 50 0 R 52 0 R 54 0 R 56 0 R 58 0 R 60 0 R 62 0 R 64 0 R 66 0 R 68 0 R 70 0 R 72 0 R 74 0 R 76 0 R 78 0 R 80 0 R 82 0 R 84 0 R 86 0 R 88 0 R 90 0 R 92 0 R 94 0 R 96 0 R 98 0 R 100 0 R 102 0 R 104 0 R 106 0 R 108 0 R 110 0 R 112 0 R 114 0 R 116 0 R 118 0 R 120 0 R 122 0 R 124 0 R 126 0 R 128 0 R 130 0 R 132 0 R 134 0 R 136 0 R 138 0 R 140 0 R 142 0 R 144 0 R 146 0 R 148 0 R 150 0 R 152 0 R 154 0 R 156 0 R 158 0 R 160 0 R 162 0 R 164 0 R 166 0 R 168 0 R 170 0 R 172 0 R 174 0 R 176 0 R 178 0 R 180 0 R 182 0 R 184 0 R 186 0 R 188 0 R 190 0 R 192 0 R 194 0 R 196 0 R 198 0 R 200 0 R 202 0 R 204 0 R 206 0 R 208 0 R 210 0 R 212 0 R 214 0 R 216 0 R 218 0 R 220 0 R 222 0 R 224 0 R 226 0 R 228 0 R 230 0 R 232 0 R 234 0 R 236 0 R 238 0 R 240 0 R 242 0 R 244 0 R 246 0 R 248 0 R 250 0 R 252 0 R 254 0 R 256 0 R 258 0 R 260 0 R 262 0 R 264 0 R 266 0 R 268 0 R 270 0 R 272 0 R 274 0 R 276 0 R 278 0 R 280 0 R 282 0 R 284 0 R]  
  /Count 141
>>
endobj
3 0 obj
<<
  /Length 22622
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (Test Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic Test Structure) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Assertion Functions) Tj -40 0 Td 12 TL (1.2.1)' 0 TL 40 0 Td (Object Identity Testing) Tj -40 0 Td 12 TL (1.2.2)' 0 TL 40 0 Td (Failure Testing) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Test Output and Logging) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Snapshot Testing) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Advanced Testing Patterns) Tj -40 0 Td 12 TL (1.5.1)' 0 TL 40 0 Td (Testing with Complex Data) Tj -40 0 Td 12 TL (1.5.2)' 0 TL 40 0 Td (Error Condition Testing) Tj -40 0 Td 12 TL (1.5.3)' 0 TL 40 0 Td (Property-Based Testing) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Test Organization) Tj -40 0 Td 12 TL (1.6.1)' 0 TL 40 0 Td (Grouping Related Tests) Tj -40 0 Td 12 TL (1.6.2)' 0 TL 40 0 Td (Setup and Teardown Patterns) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Testing Best Practices) Tj -40 0 Td 12 TL (1.7.1)' 0 TL 40 0 Td (Clear Test Names) Tj -40 0 Td 12 TL (1.7.2)' 0 TL 40 0 Td (One Concept Per Test) Tj -40 0 Td 12 TL (1.7.3)' 0 TL 40 0 Td (Use Meaningful Test Data) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Integration with MoonBit Build System) Tj -40 0 Td 12 TL (1.9)' 0 TL 40 0 Td (Common Testing Patterns) Tj -40 0 Td 12 TL (1.10)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL (2)' 0 TL 40 0 Td (byte) Tj -40 0 Td 12 TL (2.1)' 0 TL 40 0 Td (Constants) Tj -40 0 Td 12 TL (2.2)' 0 TL 40 0 Td (Conversion) Tj -40 0 Td 12 TL (2.3)' 0 TL 40 0 Td (Byte Literals) Tj -40 0 Td 12 TL (3)' 0 TL 40 0 Td (Builtin Package Documentation) Tj -40 0 Td 12 TL (3.1)' 0 TL 40 0 Td (Core Types and Functions) Tj -40 0 Td 12 TL (3.1.1)' 0 TL 40 0 Td (Assertions and Testing) Tj -40 0 Td 12 TL (3.1.2)' 0 TL 40 0 Td (Inspect Function) Tj -40 0 Td 12 TL (3.2)' 0 TL 40 0 Td (Result Type) Tj -40 0 Td 12 TL (3.3)' 0 TL 40 0 Td (Option Type) Tj -40 0 Td 12 TL (3.4)' 0 TL 40 0 Td (Iterator Type) Tj -40 0 Td 12 TL (3.5)' 0 TL 40 0 Td (Array and FixedArray) Tj -40 0 Td 12 TL (3.6)' 0 TL 40 0 Td (String Operations) Tj -40 0 Td 12 TL (3.7)' 0 TL 40 0 Td (StringBuilder) Tj -40 0 Td 12 TL (3.8)' 0 TL 40 0 Td (JSON Support) Tj -40 0 Td 12 TL (3.9)' 0 TL 40 0 Td (Comparison Operations) Tj -40 0 Td 12 TL (3.10)' 0 TL 40 0 Td (Utility Functions) Tj -40 0 Td 12 TL (3.11)' 0 TL 40 0 Td (Error Handling) Tj -40 0 Td 12 TL (3.12)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (3.13)' 0 TL 40 0 Td (Performance Notes) Tj -40 0 Td 12 TL (4)' 0 TL 40 0 Td (HashMap) Tj -40 0 Td 12 TL (5)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (5.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (5.2)' 0 TL 40 0 Td (Set & Get) Tj -40 0 Td 12 TL (5.3)' 0 TL 40 0 Td (Remove) Tj -40 0 Td 12 TL (5.4)' 0 TL 40 0 Td (Contains) Tj -40 0 Td 12 TL (5.5)' 0 TL 40 0 Td (Size & Capacity) Tj -40 0 Td 12 TL (5.6)' 0 TL 40 0 Td (Clear) Tj -40 0 Td 12 TL (5.7)' 0 TL 40 0 Td (Iteration) Tj -40 0 Td 12 TL (6)' 0 TL 40 0 Td (String Package Documentation) Tj -40 0 Td 12 TL (6.1)' 0 TL 40 0 Td (String Creation and Conversion) Tj -40 0 Td 12 TL (6.2)' 0 TL 40 0 Td (String Iteration) Tj -40 0 Td 12 TL (6.3)' 0 TL 40 0 Td (String Conversion) Tj -40 0 Td 12 TL (6.4)' 0 TL 40 0 Td (Unicode Handling) Tj -40 0 Td 12 TL (6.5)' 0 TL 40 0 Td (String Comparison) Tj -40 0 Td 12 TL (6.6)' 0 TL 40 0 Td (String Views) Tj -40 0 Td 12 TL (6.7)' 0 TL 40 0 Td (Practical Examples) Tj -40 0 Td 12 TL (6.8)' 0 TL 40 0 Td (Performance Notes) Tj -40 0 Td 12 TL (7)' 0 TL 40 0 Td (Moonbit/Core Result) Tj -40 0 Td 12 TL (7.1)' 0 TL 40 0 Td (Overview) Tj -40 0 Td 12 TL (7.2)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (7.2.1)' 0 TL 40 0 Td (Constructing Result) Tj -40 0 Td 12 TL (7.2.2)' 0 TL 40 0 Td (Querying variant) Tj -40 0 Td 12 TL (7.2.3)' 0 TL 40 0 Td (Extracting values) Tj -40 0 Td 12 TL (7.2.4)' 0 TL 40 0 Td (Transforming values) Tj -40 0 Td 12 TL (7.2.5)' 0 TL 40 0 Td (Monadic operations) Tj -40 0 Td 12 TL (8)' 0 TL 40 0 Td (uint16) Tj -40 0 Td 12 TL (8.1)' 0 TL 40 0 Td (Constants) Tj -40 0 Td 12 TL (8.2)' 0 TL 40 0 Td (Arithmetic Operations) Tj -40 0 Td 12 TL (8.3)' 0 TL 40 0 Td (Bitwise Operations) Tj -40 0 Td 12 TL (8.4)' 0 TL 40 0 Td (Comparison and Equality) Tj -40 0 Td 12 TL (8.5)' 0 TL 40 0 Td (Default Value and Hashing) Tj -40 0 Td 12 TL (8.6)' 0 TL 40 0 Td (Type Conversions) Tj -40 0 Td 12 TL (9)' 0 TL 40 0 Td (Tuple) Tj -40 0 Td 12 TL (10)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (10.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (10.2)' 0 TL 40 0 Td (Access) Tj -40 0 Td 12 TL (10.3)' 0 TL 40 0 Td (Transformation) Tj -40 0 Td 12 TL (11)' 0 TL 40 0 Td (List) Tj -40 0 Td 12 TL (11.1)' 0 TL 40 0 Td (Table of Contents) Tj -40 0 Td 12 TL (11.2)' 0 TL 40 0 Td (Overview) Tj -40 0 Td 12 TL (11.3)' 0 TL 40 0 Td (Performance) Tj -40 0 Td 12 TL (11.4)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (11.4.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (11.4.2)' 0 TL 40 0 Td (Basic Operations) Tj -40 0 Td 12 TL (11.4.3)' 0 TL 40 0 Td (Prepend) Tj -40 0 Td 12 TL (11.4.4)' 0 TL 40 0 Td (Length) Tj -40 0 Td 12 TL (11.4.5)' 0 TL 40 0 Td (Check if Empty) Tj -40 0 Td 12 TL (11.4.6)' 0 TL 40 0 Td (Access Elements) Tj -40 0 Td 12 TL (11.4.7)' 0 TL 40 0 Td (Head) Tj -40 0 Td 12 TL (11.4.8)' 0 TL 40 0 Td (Tail) Tj -40 0 Td 12 TL (11.4.9)' 0 TL 40 0 Td (Nth Element) Tj -40 0 Td 12 TL (11.4.10)' 0 TL 40 0 Td (Iteration) Tj -40 0 Td 12 TL (11.4.11)' 0 TL 40 0 Td (Each) Tj -40 0 Td 12 TL (11.4.12)' 0 TL 40 0 Td (Map) Tj -40 0 Td 12 TL (11.4.13)' 0 TL 40 0 Td (Filter) Tj -40 0 Td 12 TL (11.4.14)' 0 TL 40 0 Td (Advanced Operations) Tj -40 0 Td 12 TL (11.4.15)' 0 TL 40 0 Td (Reverse) Tj -40 0 Td 12 TL (11.4.16)' 0 TL 40 0 Td (Concatenate) Tj -40 0 Td 12 TL (11.4.17)' 0 TL 40 0 Td (Flatten) Tj -40 0 Td 12 TL (11.4.18)' 0 TL 40 0 Td (Sort) Tj -40 0 Td 12 TL (11.4.19)' 0 TL 40 0 Td (Conversion) Tj -40 0 Td 12 TL (11.4.20)' 0 TL 40 0 Td (To Array) Tj -40 0 Td 12 TL (11.4.21)' 0 TL 40 0 Td (From Array) Tj -40 0 Td 12 TL (11.4.22)' 0 TL 40 0 Td (Equality) Tj -40 0 Td 12 TL (11.5)' 0 TL 40 0 Td (Error Handling Best Practices) Tj -40 0 Td 12 TL (11.5.1)' 0 TL 40 0 Td (Additional Error Cases) Tj -40 0 Td 12 TL (11.6)' 0 TL 40 0 Td (Implementation Notes) Tj -40 0 Td 12 TL (11.7)' 0 TL 40 0 Td (Comparison with Other Collections) Tj -40 0 Td 12 TL (12)' 0 TL 40 0 Td (Priority Queue) Tj -40 0 Td 12 TL (13)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (13.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (13.2)' 0 TL 40 0 Td (Length) Tj -40 0 Td 12 TL (13.3)' 0 TL 40 0 Td (Peek) Tj -40 0 Td 12 TL (13.4)' 0 TL 40 0 Td (Push) Tj -40 0 Td 12 TL (13.5)' 0 TL 40 0 Td (Pop) Tj -40 0 Td 12 TL (13.6)' 0 TL 40 0 Td (Clear) Tj -40 0 Td 12 TL (13.7)' 0 TL 40 0 Td (Copy and Transfer) Tj -40 0 Td 12 TL (14)' 0 TL 40 0 Td (Array Package Documentation) Tj -40 0 Td 12 TL (14.1)' 0 TL 40 0 Td (Creating Arrays) Tj -40 0 Td 12 TL (14.2)' 0 TL 40 0 Td (Array Operations) Tj -40 0 Td 12 TL (14.3)' 0 TL 40 0 Td (Sorting) Tj -40 0 Td 12 TL (14.4)' 0 TL 40 0 Td (Array Views) Tj -40 0 Td 12 TL (14.5)' 0 TL 40 0 Td (Fixed Arrays) Tj -40 0 Td 12 TL (14.6)' 0 TL 40 0 Td (Utilities) Tj -40 0 Td 12 TL (15)' 0 TL 40 0 Td (Sorted Set) Tj -40 0 Td 12 TL (16)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (16.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (16.1.1)' 0 TL 40 0 Td (Container Operations) Tj -40 0 Td 12 TL (16.1.2)' 0 TL 40 0 Td (Set Operations) Tj -40 0 Td 12 TL (16.1.3)' 0 TL 40 0 Td (Stringify) Tj -40 0 Td 12 TL (17)' 0 TL 40 0 Td (int) Tj -40 0 Td 12 TL (17.1)' 0 TL 40 0 Td (Basic Operations) Tj -40 0 Td 12 TL (17.2)' 0 TL 40 0 Td (Byte Conversion) Tj -40 0 Td 12 TL (17.3)' 0 TL 40 0 Td (Method Syntax) Tj -40 0 Td 12 TL (18)' 0 TL 40 0 Td (int64) Tj -40 0 Td 12 TL (18.1)' 0 TL 40 0 Td (Basic Operations) Tj -40 0 Td 12 TL (18.2)' 0 TL 40 0 Td (Binary Representation) Tj -40 0 Td 12 TL (18.3)' 0 TL 40 0 Td (Method-Style Usage) Tj -40 0 Td 12 TL (19)' 0 TL 40 0 Td (unit) Tj -40 0 Td 12 TL (19.1)' 0 TL 40 0 Td (Understanding Unit Type) Tj -40 0 Td 12 TL (19.2)' 0 TL 40 0 Td (Unit Value Creation) Tj -40 0 Td 12 TL (19.3)' 0 TL 40 0 Td (Working with Side-Effect Functions) Tj -40 0 Td 12 TL (19.4)' 0 TL 40 0 Td (String Representation and Debugging) Tj -40 0 Td 12 TL (19.5)' 0 TL 40 0 Td (Generic Programming with Unit) Tj -40 0 Td 12 TL (19.6)' 0 TL 40 0 Td (Built-in Trait Implementations) Tj -40 0 Td 12 TL (19.7)' 0 TL 40 0 Td (Practical Use Cases) Tj -40 0 Td 12 TL (19.7.1)' 0 TL 40 0 Td (Result Accumulation) Tj -40 0 Td 12 TL (19.7.2)' 0 TL 40 0 Td (Builder Pattern Termination) Tj -40 0 Td 12 TL (20)' 0 TL 40 0 Td (BigInt Package Documentation) Tj -40 0 Td 12 TL (20.1)' 0 TL 40 0 Td (Creating BigInt Values) Tj -40 0 Td 12 TL (20.2)' 0 TL 40 0 Td (Basic Arithmetic Operations) Tj -40 0 Td 12 TL (20.3)' 0 TL 40 0 Td (Comparison Operations) Tj -40 0 Td 12 TL (20.4)' 0 TL 40 0 Td (Bitwise Operations) Tj -40 0 Td 12 TL (20.5)' 0 TL 40 0 Td (Power and Modular Arithmetic) Tj -40 0 Td 12 TL (20.6)' 0 TL 40 0 Td (String and Hexadecimal Conversion) Tj -40 0 Td 12 TL (20.7)' 0 TL 40 0 Td (Byte Array Conversion) Tj -40 0 Td 12 TL (20.8)' 0 TL 40 0 Td (Type Conversions) Tj -40 0 Td 12 TL (20.9)' 0 TL 40 0 Td (JSON Serialization) Tj -40 0 Td 12 TL (20.10)' 0 TL 40 0 Td (Utility Functions) Tj -40 0 Td 12 TL (20.11)' 0 TL 40 0 Td (Use Cases and Applications) Tj -40 0 Td 12 TL (20.12)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL (20.13)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (21)' 0 TL 40 0 Td (Bench Package Documentation) Tj -40 0 Td 12 TL (21.1)' 0 TL 40 0 Td (Basic Benchmarking) Tj -40 0 Td 12 TL (21.2)' 0 TL 40 0 Td (Benchmark Collection) Tj -40 0 Td 12 TL (21.3)' 0 TL 40 0 Td (Benchmarking Different Algorithms) Tj -40 0 Td 12 TL (21.4)' 0 TL 40 0 Td (Data Structure Benchmarks) Tj -40 0 Td 12 TL (21.5)' 0 TL 40 0 Td (String Operations Benchmarking) Tj -40 0 Td 12 TL (21.6)' 0 TL 40 0 Td (Memory Usage Prevention) Tj -40 0 Td 12 TL (21.7)' 0 TL 40 0 Td (Iteration Count Control) Tj -40 0 Td 12 TL (21.8)' 0 TL 40 0 Td (Benchmarking Best Practices) Tj -40 0 Td 12 TL (21.8.1)' 0 TL 40 0 Td (1. Isolate What You're Measuring) Tj -40 0 Td 12 TL (21.8.2)' 0 TL 40 0 Td (2. Warm Up Before Measuring) Tj -40 0 Td 12 TL (21.8.3)' 0 TL 40 0 Td (3. Use Meaningful Names) Tj -40 0 Td 12 TL (21.9)' 0 TL 40 0 Td (Performance Analysis) Tj -40 0 Td 12 TL (21.10)' 0 TL 40 0 Td (Integration with Testing) Tj -40 0 Td 12 TL (21.11)' 0 TL 40 0 Td (Common Benchmarking Patterns) Tj -40 0 Td 12 TL (21.12)' 0 TL 40 0 Td (Tips for Accurate Benchmarks) Tj -40 0 Td 12 TL (22)' 0 TL 40 0 Td (cmp) Tj -40 0 Td 12 TL (22.1)' 0 TL 40 0 Td (Generic Comparison Functions) Tj -40 0 Td 12 TL (22.2)' 0 TL 40 0 Td (Comparison by Key) Tj -40 0 Td 12 TL (23)' 0 TL 40 0 Td (math) Tj -40 0 Td 12 TL (23.1)' 0 TL 40 0 Td (Constants) Tj -40 0 Td 12 TL (23.2)' 0 TL 40 0 Td (Basic Arithmetic Functions) Tj -40 0 Td 12 TL (23.2.1)' 0 TL 40 0 Td (Rounding Functions) Tj -40 0 Td 12 TL (23.2.2)' 0 TL 40 0 Td (Exponential and Logarithmic Functions) Tj -40 0 Td 12 TL (23.3)' 0 TL 40 0 Td (Trigonometric Functions) Tj -40 0 Td 12 TL (23.3.1)' 0 TL 40 0 Td (Basic Trigonometric Functions) Tj -40 0 Td 12 TL (23.3.2)' 0 TL 40 0 Td (Hyperbolic Functions) Tj -40 0 Td 12 TL (23.4)' 0 TL 40 0 Td (Special Functions) Tj -40 0 Td 12 TL (23.4.1)' 0 TL 40 0 Td (Two-argument Functions) Tj -40 0 Td 12 TL (24)' 0 TL 40 0 Td (ref) Tj -40 0 Td 12 TL (24.1)' 0 TL 40 0 Td (Creating and Accessing References) Tj -40 0 Td 12 TL (24.2)' 0 TL 40 0 Td (Updating Reference Values) Tj -40 0 Td 12 TL (24.3)' 0 TL 40 0 Td (Mapping References) Tj -40 0 Td 12 TL (24.4)' 0 TL 40 0 Td (Swapping Reference Values) Tj -40 0 Td 12 TL (24.5)' 0 TL 40 0 Td (Temporary Value Protection) Tj -40 0 Td 12 TL (25)' 0 TL 40 0 Td (bytes) Tj -40 0 Td 12 TL (25.1)' 0 TL 40 0 Td (Creating Bytes) Tj -40 0 Td 12 TL (25.2)' 0 TL 40 0 Td (Converting Between Formats) Tj -40 0 Td 12 TL (25.3)' 0 TL 40 0 Td (Working with Views) Tj -40 0 Td 12 TL (25.4)' 0 TL 40 0 Td (Binary Data Interpretation) Tj -40 0 Td 12 TL (25.5)' 0 TL 40 0 Td (Concatenation and Comparison) Tj -40 0 Td 12 TL (26)' 0 TL 40 0 Td (char) Tj -40 0 Td 12 TL (26.1)' 0 TL 40 0 Td (Basic ASCII Classification) Tj -40 0 Td 12 TL (26.2)' 0 TL 40 0 Td (Number Classification) Tj -40 0 Td 12 TL (26.3)' 0 TL 40 0 Td (Special Characters) Tj -40 0 Td 12 TL (26.4)' 0 TL 40 0 Td (Method Style Usage) Tj -40 0 Td 12 TL (27)' 0 TL 40 0 Td (Deque) Tj -40 0 Td 12 TL (28)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (28.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (28.2)' 0 TL 40 0 Td (Length & Capacity) Tj -40 0 Td 12 TL (28.3)' 0 TL 40 0 Td (Front & Back & Get) Tj -40 0 Td 12 TL (28.4)' 0 TL 40 0 Td (Push & Set) Tj -40 0 Td 12 TL (28.5)' 0 TL 40 0 Td (Pop) Tj -40 0 Td 12 TL (28.6)' 0 TL 40 0 Td (Clear) Tj -40 0 Td 12 TL (28.7)' 0 TL 40 0 Td (Equal) Tj -40 0 Td 12 TL (28.8)' 0 TL 40 0 Td (Iter & Map) Tj -40 0 Td 12 TL (28.9)' 0 TL 40 0 Td (Search & Contains) Tj -40 0 Td 12 TL (29)' 0 TL 40 0 Td (Error Package Documentation) Tj -40 0 Td 12 TL (29.1)' 0 TL 40 0 Td (Basic Error Usage) Tj -40 0 Td 12 TL (29.2)' 0 TL 40 0 Td (Custom Error Types) Tj -40 0 Td 12 TL (29.3)' 0 TL 40 0 Td (Error Display and JSON Conversion) Tj -40 0 Td 12 TL (29.4)' 0 TL 40 0 Td (Error Propagation and Handling) Tj -40 0 Td 12 TL (29.5)' 0 TL 40 0 Td (Resource Management with Finally) Tj -40 0 Td 12 TL (29.6)' 0 TL 40 0 Td (Error Composition) Tj -40 0 Td 12 TL (29.7)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (29.8)' 0 TL 40 0 Td (Performance Notes) Tj -40 0 Td 12 TL (30)' 0 TL 40 0 Td (HashSet) Tj -40 0 Td 12 TL (31)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (31.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (31.2)' 0 TL 40 0 Td (Insert & Contain) Tj -40 0 Td 12 TL (31.3)' 0 TL 40 0 Td (Remove) Tj -40 0 Td 12 TL (31.4)' 0 TL 40 0 Td (Size & Capacity) Tj -40 0 Td 12 TL (31.5)' 0 TL 40 0 Td (Clear) Tj -40 0 Td 12 TL (31.6)' 0 TL 40 0 Td (Iteration) Tj -40 0 Td 12 TL (31.7)' 0 TL 40 0 Td (Set Operations) Tj -40 0 Td 12 TL (32)' 0 TL 40 0 Td (Rational \(DEPRECATED\)) Tj -40 0 Td 12 TL (33)' 0 TL 40 0 Td (bool) Tj -40 0 Td 12 TL (33.1)' 0 TL 40 0 Td (Overview) Tj -40 0 Td 12 TL (33.2)' 0 TL 40 0 Td (Basic Integer Conversion) Tj -40 0 Td 12 TL (33.3)' 0 TL 40 0 Td (Specialized Integer Types) Tj -40 0 Td 12 TL (33.4)' 0 TL 40 0 Td (Practical Use Cases) Tj -40 0 Td 12 TL (33.4.1)' 0 TL 40 0 Td (Boolean Indexing and Selection) Tj -40 0 Td 12 TL (33.4.2)' 0 TL 40 0 Td (Bit Manipulation and Flags) Tj -40 0 Td 12 TL (33.4.3)' 0 TL 40 0 Td (Statistical and Mathematical Operations) Tj -40 0 Td 12 TL (34)' 0 TL 40 0 Td (Coverage Package Documentation) Tj -40 0 Td 12 TL (34.1)' 0 TL 40 0 Td (Coverage Counter) Tj -40 0 Td 12 TL (34.2)' 0 TL 40 0 Td (Tracking Code Execution) Tj -40 0 Td 12 TL (34.3)' 0 TL 40 0 Td (Loop Coverage Tracking) Tj -40 0 Td 12 TL (34.4)' 0 TL 40 0 Td (Function Coverage) Tj -40 0 Td 12 TL (34.5)' 0 TL 40 0 Td (Coverage Analysis) Tj -40 0 Td 12 TL (34.6)' 0 TL 40 0 Td (Integration with Testing) Tj -40 0 Td 12 TL (34.7)' 0 TL 40 0 Td (Coverage Reporting) Tj -40 0 Td 12 TL (34.8)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (34.8.1)' 0 TL 40 0 Td (1. Automatic Coverage Generation) Tj -40 0 Td 12 TL (34.8.2)' 0 TL 40 0 Td (2. Coverage-Driven Testing) Tj -40 0 Td 12 TL (34.9)' 0 TL 40 0 Td (Integration with Build System) Tj -40 0 Td 12 TL (34.10)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL (34.11)' 0 TL 40 0 Td (Common Use Cases) Tj -40 0 Td 12 TL (35)' 0 TL 40 0 Td (MoonBit Float Package Documentation) Tj -40 0 Td 12 TL (35.1)' 0 TL 40 0 Td (Special Values) Tj -40 0 Td 12 TL (35.2)' 0 TL 40 0 Td (Rounding Functions) Tj -40 0 Td 12 TL (35.3)' 0 TL 40 0 Td (Utility Functions) Tj -40 0 Td 12 TL (35.4)' 0 TL 40 0 Td (Byte Representation) Tj -40 0 Td 12 TL (35.5)' 0 TL 40 0 Td (Method Style) Tj -40 0 Td 12 TL (36)' 0 TL 40 0 Td (int16) Tj -40 0 Td 12 TL (36.1)' 0 TL 40 0 Td (Range and Constants) Tj -40 0 Td 12 TL (36.2)' 0 TL 40 0 Td (Arithmetic Operations) Tj -40 0 Td 12 TL (36.3)' 0 TL 40 0 Td (Bitwise Operations) Tj -40 0 Td 12 TL (36.4)' 0 TL 40 0 Td (Comparison Operations) Tj -40 0 Td 12 TL (36.5)' 0 TL 40 0 Td (Default Value) Tj -40 0 Td 12 TL (36.6)' 0 TL 40 0 Td (Type Coercion and Conversion) Tj -40 0 Td 12 TL (37)' 0 TL 40 0 Td (Set Package Documentation) Tj -40 0 Td 12 TL (37.1)' 0 TL 40 0 Td (Creating Sets) Tj -40 0 Td 12 TL (37.2)' 0 TL 40 0 Td (Basic Operations) Tj -40 0 Td 12 TL (37.3)' 0 TL 40 0 Td (Set Operations) Tj -40 0 Td 12 TL (37.4)' 0 TL 40 0 Td (Set Relationships) Tj -40 0 Td 12 TL (37.5)' 0 TL 40 0 Td (Iteration and Conversion) Tj -40 0 Td 12 TL (37.6)' 0 TL 40 0 Td (Modifying Sets) Tj -40 0 Td 12 TL (37.7)' 0 TL 40 0 Td (JSON Serialization) Tj -40 0 Td 12 TL (37.8)' 0 TL 40 0 Td (Working with Different Types) Tj -40 0 Td 12 TL (37.9)' 0 TL 40 0 Td (Performance Examples) Tj -40 0 Td 12 TL (37.10)' 0 TL 40 0 Td (Use Cases) Tj -40 0 Td 12 TL (37.11)' 0 TL 40 0 Td (Performance Characteristics) Tj -40 0 Td 12 TL (37.12)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (38)' 0 TL 40 0 Td (buffer) Tj -40 0 Td 12 TL (38.1)' 0 TL 40 0 Td (Basic Usage) Tj -40 0 Td 12 TL (38.2)' 0 TL 40 0 Td (Writing Numbers) Tj -40 0 Td 12 TL (38.3)' 0 TL 40 0 Td (Writing Byte Sequences) Tj -40 0 Td 12 TL (38.4)' 0 TL 40 0 Td (Writing Structured Data) Tj -40 0 Td 12 TL (38.5)' 0 TL 40 0 Td (Size Hints) Tj -40 0 Td 12 TL (38.6)' 0 TL 40 0 Td (Buffer as Logger) Tj -40 0 Td 12 TL (38.7)' 0 TL 40 0 Td (Converting to String/Bytes) Tj -40 0 Td 12 TL (38.8)' 0 TL 40 0 Td (Binary Viewing) Tj -40 0 Td 12 TL (39)' 0 TL 40 0 Td (Random) Tj -40 0 Td 12 TL (40)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (41)' 0 TL 40 0 Td (Strconv) Tj -40 0 Td 12 TL (42)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (42.1)' 0 TL 40 0 Td (Parse) Tj -40 0 Td 12 TL (43)' 0 TL 40 0 Td (Option) Tj -40 0 Td 12 TL (44)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (44.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (44.2)' 0 TL 40 0 Td (Extracting values) Tj -40 0 Td 12 TL (44.3)' 0 TL 40 0 Td (Transforming values) Tj -40 0 Td 12 TL (44.4)' 0 TL 40 0 Td (Monadic operations) Tj -40 0 Td 12 TL (45)' 0 TL 40 0 Td (uint64) Tj -40 0 Td 12 TL (45.1)' 0 TL 40 0 Td (Constants) Tj -40 0 Td 12 TL (45.2)' 0 TL 40 0 Td (Arithmetic Operations) Tj -40 0 Td 12 TL (45.3)' 0 TL 40 0 Td (Bitwise Operations) Tj -40 0 Td 12 TL (45.4)' 0 TL 40 0 Td (Comparison and Equality) Tj -40 0 Td 12 TL (45.5)' 0 TL 40 0 Td (Byte Conversion) Tj -40 0 Td 12 TL (45.6)' 0 TL 40 0 Td (Default Value and Hashing) Tj -40 0 Td 12 TL (45.7)' 0 TL 40 0 Td (Type Conversions) Tj -40 0 Td 12 TL (45.8)' 0 TL 40 0 Td (Working with Large Numbers) Tj -40 0 Td 12 TL (45.9)' 0 TL 40 0 Td (Working with Hexadecimal Literals) Tj -40 0 Td 12 TL (46)' 0 TL 40 0 Td (Queue) Tj -40 0 Td 12 TL (47)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (47.1)' 0 TL 40 0 Td (Create and Clear) Tj -40 0 Td 12 TL (47.2)' 0 TL 40 0 Td (Length) Tj -40 0 Td 12 TL (47.3)' 0 TL 40 0 Td (Pop and Push) Tj -40 0 Td 12 TL (47.4)' 0 TL 40 0 Td (Peek) Tj -40 0 Td 12 TL (47.5)' 0 TL 40 0 Td (Traverse) Tj -40 0 Td 12 TL (47.6)' 0 TL 40 0 Td (Copy and Transfer) Tj -40 0 Td 12 TL (48)' 0 TL 40 0 Td (double) Tj -40 0 Td 12 TL (48.1)' 0 TL 40 0 Td (Constants and Special Values) Tj -40 0 Td 12 TL (48.2)' 0 TL 40 0 Td (Basic Operations) Tj -40 0 Td 12 TL (48.3)' 0 TL 40 0 Td (Special Value Testing) Tj -40 0 Td 12 TL (48.4)' 0 TL 40 0 Td (Binary Representation) Tj -40 0 Td 12 TL (49)' 0 TL 40 0 Td (Sorted Map) Tj -40 0 Td 12 TL (49.1)' 0 TL 40 0 Td (Overview) Tj -40 0 Td 12 TL (49.2)' 0 TL 40 0 Td (Performance) Tj -40 0 Td 12 TL (49.3)' 0 TL 40 0 Td (Usage) Tj -40 0 Td 12 TL (49.3.1)' 0 TL 40 0 Td (Create) Tj -40 0 Td 12 TL (49.3.2)' 0 TL 40 0 Td (Container Operations) Tj -40 0 Td 12 TL (49.3.3)' 0 TL 40 0 Td (Data Extraction) Tj -40 0 Td 12 TL (49.3.4)' 0 TL 40 0 Td (Range Operations) Tj -40 0 Td 12 TL (49.3.5)' 0 TL 40 0 Td (Iterators) Tj -40 0 Td 12 TL (49.3.6)' 0 TL 40 0 Td (Equality) Tj -40 0 Td 12 TL (49.3.7)' 0 TL 40 0 Td (Error Handling Best Practices) Tj -40 0 Td 12 TL (49.4)' 0 TL 40 0 Td (Implementation Notes) Tj -40 0 Td 12 TL (49.5)' 0 TL 40 0 Td (Comparison with Other Collections) Tj -40 0 Td 12 TL (50)' 0 TL 40 0 Td (MoonBit QuickCheck Package) Tj -40 0 Td 12 TL (50.1)' 0 TL 40 0 Td (Basic Usage) Tj -40 0 Td 12 TL (50.2)' 0 TL 40 0 Td (Multiple Samples) Tj -40 0 Td 12 TL (50.3)' 0 TL 40 0 Td (Built-in Types) Tj -40 0 Td 12 TL (50.4)' 0 TL 40 0 Td (Custom Types) Tj -40 0 Td 12 TL (51)' 0 TL 40 0 Td (uint) Tj -40 0 Td 12 TL (51.1)' 0 TL 40 0 Td (Basic Properties) Tj -40 0 Td 12 TL (51.2)' 0 TL 40 0 Td (Byte Representation) Tj -40 0 Td 12 TL (51.3)' 0 TL 40 0 Td (Converting to Other Number Types) Tj -40 0 Td 12 TL (52)' 0 TL 40 0 Td (json) Tj -40 0 Td 12 TL (52.1)' 0 TL 40 0 Td (Basic JSON Operations) Tj -40 0 Td 12 TL (52.1.1)' 0 TL 40 0 Td (Parsing and Validating JSON) Tj -40 0 Td 12 TL (52.1.2)' 0 TL 40 0 Td (Object Navigation) Tj -40 0 Td 12 TL (52.1.3)' 0 TL 40 0 Td (Array Navigation) Tj -40 0 Td 12 TL (52.2)' 0 TL 40 0 Td (Type-Safe JSON Conversion) Tj -40 0 Td 12 TL (52.2.1)' 0 TL 40 0 Td (From JSON to Native Types) Tj -40 0 Td 12 TL (52.2.2)' 0 TL 40 0 Td (Error Handling with JSON Path) Tj -40 0 Td 12 TL (52.3)' 0 TL 40 0 Td (JSON-based Snapshot Testing) Tj -40 0 Td 12 TL (53)' 0 TL 40 0 Td (Env Package Documentation) Tj -40 0 Td 12 TL (53.1)' 0 TL 40 0 Td (Command Line Arguments) Tj -40 0 Td 12 TL (53.2)' 0 TL 40 0 Td (Current Time) Tj -40 0 Td 12 TL (53.3)' 0 TL 40 0 Td (Working Directory) Tj -40 0 Td 12 TL (53.4)' 0 TL 40 0 Td (Practical Usage Examples) Tj -40 0 Td 12 TL (53.4.1)' 0 TL 40 0 Td (Command Line Tool Pattern) Tj -40 0 Td 12 TL (53.4.2)' 0 TL 40 0 Td (Configuration Loading) Tj -40 0 Td 12 TL (53.4.3)' 0 TL 40 0 Td (Logging with Timestamps) Tj -40 0 Td 12 TL (53.4.4)' 0 TL 40 0 Td (File Path Operations) Tj -40 0 Td 12 TL (53.5)' 0 TL 40 0 Td (Platform Differences) Tj -40 0 Td 12 TL (53.5.1)' 0 TL 40 0 Td (JavaScript Environment) Tj -40 0 Td 12 TL (53.5.2)' 0 TL 40 0 Td (WebAssembly Environment) Tj -40 0 Td 12 TL (53.5.3)' 0 TL 40 0 Td (Native Environment) Tj -40 0 Td 12 TL (53.6)' 0 TL 40 0 Td (Error Handling) Tj -40 0 Td 12 TL (53.7)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (53.7.1)' 0 TL 40 0 Td (1. Handle Missing Environment Data Gracefully) Tj -40 0 Td 12 TL (53.7.2)' 0 TL 40 0 Td (2. Validate Command Line Arguments) Tj -40 0 Td 12 TL (53.7.3)' 0 TL 40 0 Td (3. Use Timestamps for Unique Identifiers) Tj -40 0 Td 12 TL (53.8)' 0 TL 40 0 Td (Common Use Cases) Tj -40 0 Td 12 TL (53.9)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 3721
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Test Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides testing utilities and assertion functions for MoonBit prog) Tj T* (rams. It includes functions for comparing values, checking object identity, and ) Tj T* (creating structured test outputs with snapshot testing capabilities.) Tj T* 12 TL T* /F0 20 Tf (Basic Test Structure) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit tests are written using the ) Tj /F0 12 Tf (test) Tj /F0 12 Tf ( keyword:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic test example") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Assertion Functions) Tj 20 TL T* 12 TL T* /F0 16 Tf (Object Identity Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test whether two values refer to the same object in memory:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "object identity") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str1) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _str2) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( str1) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  @test) Tj 0 0 0 rg ( same_object) Tj 0 0 0 rg (\() Tj 0 0 0 rg (str1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( str3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                           ) Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                                   ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  @test) Tj 0 0 0 rg ( same_object) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                                                                              ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Failure Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Explicitly fail tests with custom messages:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 4140
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "conditional failure") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  if) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    @test) Tj 0 0 0 rg ( fail) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Value should not be negative: \\{value}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Test Output and Logging) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create structured test outputs using the Test type:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "test output") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( t) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @test) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Example Test") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( write) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Testing basic functionality: ") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("PASS") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Step 1: Initialize data") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Step 2: Process data") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Step 3: Verify results") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Snapshot Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Compare test outputs against saved snapshots:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "snapshot testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( t) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @test) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Snapshot Test") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Current timestamp: 2024-01-01") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Processing items: [1, 2, 3, 4, 5]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( writeln) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Result: SUCCESS") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  t) Tj 0 0 0 rg ( snapshot) Tj 0 0 0 rg (\() Tj 0 0 0 rg (filename) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("test_output") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Advanced Testing Patterns) Tj 20 TL T* 12 TL T* /F0 16 Tf (Testing with Complex Data) Tj 16 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 4275
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test functions that work with complex data structures:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "complex data testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( doubled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (doubled) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 4, 6, 8, 10]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                                                    ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( person_data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("Alice") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (person_data) Tj 0 0 0 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Alice") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (person_data) Tj 0 0 0 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("30") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Error Condition Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test that functions properly handle error conditions:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(5\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (error_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Property-Based Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test properties that should hold for various inputs:) Tj T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 4901
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "property testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( is_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    n) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( value) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( test_values) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( not) Tj 0 0 0 rg (\() Tj 0 0 0 rg (is_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (      @test) Tj 0 0 0 rg ( fail) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Expected \\{value} to be even") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( odd_values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( value) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( odd_values) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( is_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      @test) Tj 0 0 0 rg ( fail) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Expected \\{value} to be odd") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Test Organization) Tj 20 TL T* 12 TL T* /F0 16 Tf (Grouping Related Tests) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use descriptive test names to group related functionality:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string operations - concatenation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( " ") Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "world") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("hello world") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string operations - length") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "MoonBit") Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (text) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("7") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string operations - substring") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello, World!") Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sub) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sub) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("13") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Setup and Teardown Patterns) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create helper functions for common test setup:) Tj T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
13 0 obj
<<
  /Length 3516
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "with setup helper") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( setup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    [) Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 40) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( cleanup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_data) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( setup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg ([) Tj 1 0 1 rg (4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  cleanup_test_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (data) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Testing Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (Clear Test Names) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use descriptive names that explain what is being tested:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "user_can_login_with_valid_credentials") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "login_fails_with_invalid_password") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "shopping_cart_calculates_total_correctly") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (One Concept Per Test) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Keep tests focused on a single concept:) Tj T* 12 TL T* ET
endstream
endobj
14 0 obj
<<
  /Type /Page  
  /Contents 13 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
15 0 obj
<<
  /Length 4833
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array_push_increases_length") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( initial_length) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_length) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_length) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\\{initial_length + 1}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array_push_adds_element_at_end") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (20) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ([) Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("20") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Use Meaningful Test Data) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Choose test data that makes the test's intent clear:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "tax_calculation_for_standard_rate") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( price) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tax_rate) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (                                ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( calculated_tax) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( price) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( tax_rate) Tj 0 0 0 rg ( /) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (calculated_tax) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Integration with MoonBit Build System) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Tests are automatically discovered and run by the MoonBit build system:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon test) Tj /F0 12 Tf ( to run all tests) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon test --update) Tj /F0 12 Tf ( to update snapshots) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Tests in ) Tj /F0 12 Tf (*_test.mbt) Tj /F0 12 Tf ( files are blackbox tests) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Tests in regular ) Tj /F0 12 Tf (.mbt) Tj /F0 12 Tf ( files are whitebox tests) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Common Testing Patterns) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Arrange-Act-Assert) Tj /F0 12 Tf (: Set up data, perform operation, verify result) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Given-When-Then) Tj /F0 12 Tf (: Given some context, when an action occurs, then verify outcome) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Red-Green-Refactor) Tj /F0 12 Tf (: Write failing test, make it pass, improve code) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Test-Driven Development) Tj /F0 12 Tf (: Write tests before implementation) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* ET
endstream
endobj
16 0 obj
<<
  /Type /Page  
  /Contents 15 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
17 0 obj
<<
  /Length 3107
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Keep tests fast by avoiding expensive operations when possible) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use setup/teardown functions to share expensive initialization) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Consider using smaller datasets for unit tests) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Save integration tests with large datasets for separate test suites) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The test package provides essential tools for ensuring code quality and correctn) Tj T* (ess in MoonBit applications through comprehensive testing capabilities.) Tj T* 12 TL T* /F0 24 Tf (byte) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A package for working with bytes \(8-bit unsigned integers\) in MoonBit.) Tj T* 12 TL T* /F0 20 Tf (Constants) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides constants for the minimum and maximum values of a byte:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte constants") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@byte) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("b'\\\\x00'") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@byte) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("b'\\\\xFF'") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Bytes can be converted to other numeric types. The package provides conversion t) Tj T* (o ) Tj /F0 12 Tf (UInt64) Tj /F0 12 Tf (:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( byte) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( b'A') Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (byte) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("65") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( byte) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( b' ') Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (byte) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("32") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Byte Literals) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Although not directly part of this package, MoonBit provides byte literals with ) Tj T* (the ) Tj /F0 12 Tf (b) Tj /F0 12 Tf ( prefix:) Tj T* 12 TL T* ET
endstream
endobj
18 0 obj
<<
  /Type /Page  
  /Contents 17 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
19 0 obj
<<
  /Length 4329
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte literals") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( b'a') Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("97") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( hex) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( b'\\x41') Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (hex) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("65") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (              ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( null) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( b'\\x00') Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (null) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( max) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( b'\\xff') Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (max) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("255") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Note: The same conversion method can be called either as a method \() Tj /F0 12 Tf (b.to_uint64\) Tj T* ((\)) Tj /F0 12 Tf (\) or as a package function \() Tj /F0 12 Tf (@byte.to_uint64\(b\)) Tj /F0 12 Tf (\).) Tj T* 12 TL T* /F0 24 Tf (Builtin Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides the core built-in types, functions, and utilities that are) Tj T* ( fundamental to MoonBit programming. It includes basic data structures, iterator) Tj T* (s, assertions, and core language features.) Tj T* 12 TL T* /F0 20 Tf (Core Types and Functions) Tj 20 TL T* 12 TL T* /F0 16 Tf (Assertions and Testing) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit provides built-in assertion functions for testing:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "assertions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  assert_false) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_not_eq) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  assert_not_eq) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("foo") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "bar") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Inspect Function) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (inspect) Tj /F0 12 Tf ( function is used for testing and debugging:) Tj T* ET
endstream
endobj
20 0 obj
<<
  /Type /Page  
  /Contents 19 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
21 0 obj
<<
  /Length 4744
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "inspect usage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (100) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Ok\(100\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Result Type) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Result[T, E]) Tj /F0 12 Tf ( type represents operations that can succeed or fail:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "result type") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Division by zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Ok\(5\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Err\(\\"Division by zero\\"\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Option Type) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Option[T]) Tj /F0 12 Tf ( type represents values that may or may not exist:) Tj T* 12 TL T* ET
endstream
endobj
22 0 obj
<<
  /Type /Page  
  /Contents 21 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
23 0 obj
<<
  /Length 6663
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "option type") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( find_first_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg (numbers) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( num) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (        return) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (num) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( find_first_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(4\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( find_first_even) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iterator Type) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Iter[T]) Tj /F0 12 Tf ( type provides lazy iteration over sequences:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "iterators") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( collected) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (collected) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3, 4, 5]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( doubled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (doubled) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 4, 6, 8, 10]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( evens) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( filter) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (evens) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 4]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("15") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
24 0 obj
<<
  /Type /Page  
  /Contents 23 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
25 0 obj
<<
  /Length 4395
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Array and FixedArray) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Built-in array types for storing collections:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "arrays") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed_arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (fixed_arr) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[10, 20, 30]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( length) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( fixed_arr) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (length) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( first) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( fixed_arr) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (first) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Basic string functionality:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "strings") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello, World!") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( len) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (len) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("13") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( greeting) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello") Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( ", ") Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "World!") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (greeting) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Hello, World!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( equal) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "test") Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "test") Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (equal) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (StringBuilder) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Efficient string building:) Tj T* 12 TL T* ET
endstream
endobj
26 0 obj
<<
  /Type /Page  
  /Contents 25 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
27 0 obj
<<
  /Length 5661
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string builder") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( builder) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( StringBuilder) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  builder) Tj 0 0 0 rg ( write_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  builder) Tj 0 0 0 rg ( write_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg (", ") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  builder) Tj 0 0 0 rg ( write_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("World!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( builder) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Hello, World!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (JSON Support) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Basic JSON operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_null) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( null) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_null) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Null") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_bool) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_bool) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("True") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_number) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (42) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_number) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Number\(42\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_string) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    json_string) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 1 0 0 rg (      #|String\("hello"\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Built-in comparison operators:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "comparisons") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg ( !=) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg ( >=) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg ( <=) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("apple") Tj 0 0 0 rg ( <) Tj 1 0 0 rg ( "banana") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("hello") Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
28 0 obj
<<
  /Type /Page  
  /Contents 27 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
29 0 obj
<<
  /Length 4576
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Utility Functions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Helpful utility functions:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "utilities") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( not) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( same_ref) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (physical_equal) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (physical_equal) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( same_ref) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Basic error handling with panic and abort:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                        ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (8   ) Tj 1 0 1 rg (      0) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( safe_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (safe_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* ET
endstream
endobj
30 0 obj
<<
  /Type /Page  
  /Contents 29 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
31 0 obj
<<
  /Length 3198
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use assertions liberally in tests) Tj /F0 12 Tf (: They help catch bugs early and document expec) Tj T* (ted behavior) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Prefer ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( over exceptions) Tj /F0 12 Tf (: For recoverable errors, use ) Tj /F0 12 Tf (Result[T, E]) Tj /F0 12 Tf ( instead ) Tj T* (of panicking) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( for nullable values) Tj /F0 12 Tf (: Instead of null pointers, use ) Tj /F0 12 Tf (Option[T]) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Leverage iterators for data processing) Tj /F0 12 Tf (: They provide composable and efficient da) Tj T* (ta transformations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use ) Tj /F0 12 Tf (StringBuilder) Tj /F0 12 Tf ( for string concatenation) Tj /F0 12 Tf (: More efficient than repeated string ) Tj T* (concatenation) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Pattern match on ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (: Handle both success and failure cases explic) Tj T* (itly) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Notes) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Arrays have O\(1\) access and O\(1\) amortized append) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Iterators are lazy and don't allocate intermediate collections) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (StringBuilder is more efficient than string concatenation for building large str) Tj T* (ings) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Physical equality is faster than structural equality but should be used carefull) Tj T* (y) Tj T* 12 TL T* -10 0 Td 12 TL T* /F0 24 Tf (HashMap) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A mutable hash map based on a Robin Hood hash table.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create an empty map using ) Tj /F0 12 Tf (new\(\)) Tj /F0 12 Tf ( or construct it using ) Tj /F0 12 Tf (from_array\(\)) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _map2) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( HashMap) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Set & Get) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (set\(\)) Tj /F0 12 Tf ( to add a key-value pair to the map, and use ) Tj /F0 12 Tf (get\(\)) Tj /F0 12 Tf ( to get a) Tj T* ( value.) Tj T* 12 TL T* ET
endstream
endobj
32 0 obj
<<
  /Type /Page  
  /Contents 31 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
33 0 obj
<<
  /Length 6719
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( HashMap) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( set) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( get) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( get_or_default) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( get_or_default) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( remove) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Remove) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (remove\(\)) Tj /F0 12 Tf ( to remove a key-value pair.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( remove) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( ignore) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Contains) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (contains\(\)) Tj /F0 12 Tf ( to check whether a key exists.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("d") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Size & Capacity) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (size\(\)) Tj /F0 12 Tf ( to get the number of key-value pairs in the map, or ) Tj /F0 12 Tf (capacit) Tj T* (y\(\)) Tj /F0 12 Tf ( to get the current capacity.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Similarly, you can use ) Tj /F0 12 Tf (is_empty\(\)) Tj /F0 12 Tf ( to check whether the map is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( HashMap) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
34 0 obj
<<
  /Type /Page  
  /Contents 33 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
35 0 obj
<<
  /Length 4566
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Clear) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (clear) Tj /F0 12 Tf ( to remove all key-value pairs from the map, but the allocated ) Tj T* (memory will not change.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iteration) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (each\(\)) Tj /F0 12 Tf ( or ) Tj /F0 12 Tf (eachi\(\)) Tj /F0 12 Tf ( to iterate through all key-value pairs.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( eachi) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Or use ) Tj /F0 12 Tf (iter\(\)) Tj /F0 12 Tf ( to get an iterator of hashmap.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashmap) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("c") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _iter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (String Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides comprehensive string manipulation utilities for MoonBit, i) Tj T* (ncluding string creation, conversion, searching, and Unicode handling.) Tj T* 12 TL T* /F0 20 Tf (String Creation and Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create strings from various sources:) Tj T* 12 TL T* ET
endstream
endobj
36 0 obj
<<
  /Type /Page  
  /Contents 35 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
37 0 obj
<<
  /Length 5425
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string creation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ('H') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'e') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'l') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'l') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'o') Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (str1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ('W') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'o') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'r') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'l') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'd') Tj 0 0 0 rg (]) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (str2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("World") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Iteration) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterate over Unicode characters in strings:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string iteration") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello??) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['H', 'e', 'l', 'l', 'o', '??']) Tj 0 0 0 rg (") Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( reversed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( rev_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (reversed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['??', 'o', 'l', 'l', 'e', 'H']) Tj 0 0 0 rg (") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                                             ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( first_char) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( 'a') Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  text) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (   iter2) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (   each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (idx) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( char) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( idx) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (      first_char) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( char) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (first_char) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("H") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert strings to other formats:) Tj T* 12 TL T* ET
endstream
endobj
38 0 obj
<<
  /Type /Page  
  /Contents 37 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
39 0 obj
<<
  /Length 5547
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['H', 'e', 'l', 'l', 'o']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Unicode Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Work with Unicode characters and surrogate pairs:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unicode handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello??World) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( char_count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( count) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( code_unit_count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (char_count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("11") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (code_unit_count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( offset) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg ( offset_of_nth_char) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (offset) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(5\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( has_11_chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg ( char_length_eq) Tj 0 0 0 rg (\() Tj 1 0 1 rg (11) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (has_11_chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Comparison) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Strings are ordered using shortlex order by Unicode code points:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "apple") Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("banana") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (         ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result3) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "zebra") Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("apple") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Views) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (String views provide efficient substring operations without copying:) Tj T* ET
endstream
endobj
40 0 obj
<<
  /Type /Page  
  /Contents 39 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
41 0 obj
<<
  /Length 5995
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string views") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello, World!") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg ([) Tj 1 0 1 rg (7) Tj 0 0 0 rg (:) Tj 1 0 1 rg (12) Tj 0 0 0 rg (]) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['W', 'o', 'r', 'l', 'd']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( substring) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (substring) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("World") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Examples) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Common string manipulation tasks:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "practical examples") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "The quick brown fox") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                             ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( words) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( split) Tj 0 0 0 rg (\() Tj 1 0 0 rg (" ") Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (words) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (words) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("The") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (words) Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("fox") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                              ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( word_strings) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( words) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( word) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( word_strings) Tj 0 0 0 rg ( iter2) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (      result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "-") Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( word) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("The-quick-brown-fox") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( upper) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_upper) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (upper) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("THE QUICK BROWN FOX") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( lower) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_lower) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (lower) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("the quick brown fox") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Performance Notes) Tj 20 TL T* 12 TL T* ET
endstream
endobj
42 0 obj
<<
  /Type /Page  
  /Contents 41 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
43 0 obj
<<
  /Length 5201
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (StringBuilder) Tj /F0 12 Tf ( or ) Tj /F0 12 Tf (Buffer) Tj /F0 12 Tf ( for building strings incrementally rather than repea) Tj T* (ted concatenation) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (String views are lightweight and don't copy the underlying data) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Unicode iteration handles surrogate pairs correctly but is slower than UTF-16 co) Tj T* (de unit iteration) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Character length operations \() Tj /F0 12 Tf (char_length_eq) Tj /F0 12 Tf (, ) Tj /F0 12 Tf (char_length_ge) Tj /F0 12 Tf (\) have O\(n\) compl) Tj T* (exity where n is the character count) Tj T* 12 TL T* -10 0 Td 12 TL T* /F0 24 Tf (Moonbit/Core Result) Tj 24 TL T* 12 TL T* /F0 20 Tf (Overview) Tj 20 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Result[T,E]) Tj /F0 12 Tf ( is a type used for handling computation results and errors in an exp) Tj T* (licit and declarative manner, similar to Rust \() Tj /F0 12 Tf (Result<T,E>) Tj /F0 12 Tf (\) and OCaml \() Tj /F0 12 Tf (\('a, ) Tj T* ('e\) result) Tj /F0 12 Tf (\).) Tj /F0 12 Tf ( ) Tj /F0 12 Tf (It is an enum with two variants: ) Tj /F0 12 Tf (Ok\(T\)) Tj /F0 12 Tf (, which represents succes) Tj T* (s and contains a value of type ) Tj /F0 12 Tf (T) Tj /F0 12 Tf (, and ) Tj /F0 12 Tf (Err\(E\)) Tj /F0 12 Tf (, representing error and containin) Tj T* (g an error value of type ) Tj /F0 12 Tf (E) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F0 20 Tf (Usage) Tj 20 TL T* /F0 16 Tf (Constructing Result) Tj 16 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( value using the ) Tj /F0 12 Tf (Ok) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (Err) Tj /F0 12 Tf ( constructors, remember to giv) Tj T* (e proper type annotations.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _error) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Error message") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Or use the ) Tj /F0 12 Tf (ok) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (err) Tj /F0 12 Tf ( functions to create a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( value.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("yes") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _error) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("error") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Querying variant) Tj 16 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can check the variant of a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( using the ) Tj /F0 12 Tf (is_ok) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (is_err) Tj /F0 12 Tf ( methods.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( is_ok) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 1 rg ( is) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (is_ok) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( is_err) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 1 rg ( is) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (is_err) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Extracting values) Tj 16 TL T* ET
endstream
endobj
44 0 obj
<<
  /Type /Page  
  /Contents 43 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
45 0 obj
<<
  /Length 6133
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (You can extract the value from a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( using the ) Tj /F0 12 Tf (match) Tj /F0 12 Tf ( expression \(Pattern Mat) Tj T* (ching\).) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (33) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( val) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( match) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( value) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( -) Tj 1 0 1 rg (1) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (val) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 33) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Or using the ) Tj /F0 12 Tf (unwrap) Tj /F0 12 Tf ( method, which will panic if the result is ) Tj /F0 12 Tf (Err) Tj /F0 12 Tf ( and return the) Tj T* ( value if it is ) Tj /F0 12 Tf (Ok) Tj /F0 12 Tf (.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A safe alternative is the ) Tj /F0 12 Tf (or) Tj /F0 12 Tf ( method, which returns the value if the result is ) Tj /F0 12 Tf (Ok) Tj /F0 12 Tf () Tj T* ( or a default value if it is ) Tj /F0 12 Tf (Err) Tj /F0 12 Tf (.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("error") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( or) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (There is a lazy version of ) Tj /F0 12 Tf (or) Tj /F0 12 Tf ( called ) Tj /F0 12 Tf (or_else) Tj /F0 12 Tf (, which takes a function that return) Tj T* (s a default value.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("error") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( or_else) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Transforming values) Tj 16 TL T* 12 TL /F0 12 Tf /F0 12 Tf (To transform values inside a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf (, you can use the ) Tj /F0 12 Tf (map) Tj /F0 12 Tf ( method, which applies a) Tj T* ( function to the value if the result is ) Tj /F0 12 Tf (Ok) Tj /F0 12 Tf (,) Tj /F0 12 Tf ( ) Tj /F0 12 Tf (and remains unchanged if it is ) Tj /F0 12 Tf (Err) Tj /F0 12 Tf (.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (43) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A dual method to ) Tj /F0 12 Tf (map) Tj /F0 12 Tf ( is ) Tj /F0 12 Tf (map_err) Tj /F0 12 Tf (, which applies a function to the error value if ) Tj T* (the result is ) Tj /F0 12 Tf (Err) Tj /F0 12 Tf (, and remains unchanged if it is ) Tj /F0 12 Tf (Ok) Tj /F0 12 Tf (.) Tj T* ET
endstream
endobj
46 0 obj
<<
  /Type /Page  
  /Contents 45 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
47 0 obj
<<
  /Length 5870
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("error") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( map_err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("error!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can turn a ) Tj /F0 12 Tf (Result[T, E]) Tj /F0 12 Tf ( into a ) Tj /F0 12 Tf (Option[T]) Tj /F0 12 Tf ( by using the method ) Tj /F0 12 Tf (to_option) Tj /F0 12 Tf (, whic) Tj T* (h returns ) Tj /F0 12 Tf (Some\(value\)) Tj /F0 12 Tf ( if the result is ) Tj /F0 12 Tf (Ok) Tj /F0 12 Tf (, and ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( if it is ) Tj /F0 12 Tf (Err) Tj /F0 12 Tf (.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( option) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( to_option) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (option) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("error") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( option1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( to_option) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (option1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( None) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Monadic operations) Tj 16 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Moonbit provides monadic operations for ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf (, such as ) Tj /F0 12 Tf (flatten) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (bind) Tj /F0 12 Tf (, which ) Tj T* (allow chaining of computations that return ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf (.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( flattened) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( flatten) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (flattened) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (bind) Tj /F0 12 Tf ( method is similar to ) Tj /F0 12 Tf (map) Tj /F0 12 Tf (, but the function passed to it should return a) Tj T* ( ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( value.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( bind) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 1 rg (43) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (uint16) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (moonbitlang/core/uint16) Tj /F0 12 Tf ( package provides functionality for working with 16-b) Tj T* (it unsigned integers. This package includes constants, operators, and conversion) Tj T* (s for UInt16 values.) Tj T* 12 TL T* /F0 20 Tf (Constants) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package defines the minimum and maximum values for UInt16:) Tj T* 12 TL T* ET
endstream
endobj
48 0 obj
<<
  /Type /Page  
  /Contents 47 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
49 0 obj
<<
  /Length 3457
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt16 constants") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint16) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint16) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("65535") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Arithmetic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt16 supports standard arithmetic operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt16 arithmetic") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("150") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5000") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (             ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint16) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint16) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("65535") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Bitwise Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt16 supports various bitwise operations:) Tj T* 12 TL T* ET
endstream
endobj
50 0 obj
<<
  /Type /Page  
  /Contents 49 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
51 0 obj
<<
  /Length 4907
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt16 bitwise operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1010) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1100) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( &) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (               ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( |) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("14") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ^) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("20") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("40") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >>) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( >>) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison and Equality) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt16 supports comparison and equality operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt16 comparison and equality") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( c) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( !=) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >=) Tj 0 0 0 rg ( c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg ( <=) Tj 0 0 0 rg ( a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Default Value and Hashing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt16 implements the Default trait:) Tj T* 12 TL T* ET
endstream
endobj
52 0 obj
<<
  /Type /Page  
  /Contents 51 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
53 0 obj
<<
  /Length 4438
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt16 default value") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( hash) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Type Conversions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt16 works with various conversions to and from other types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt16 conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("65535") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 1 0 1 rg (65536) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 1 0 1 rg (65537) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'A') Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("65") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'\\xFF') Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("255") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Tuple) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Tuple is a fixed-size collection of elements of different types. It is a lightwe) Tj T* (ight data structure that can be used to store multiple values in a single variab) Tj T* (le. This sub-package introduces utils for binary tuples.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create a new tuple using the tuple literal syntax.) Tj T* 12 TL T* ET
endstream
endobj
54 0 obj
<<
  /Type /Page  
  /Contents 53 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
55 0 obj
<<
  /Length 4927
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tuple2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tuple3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (tuple2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( tuple3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\(1, 2\), \(1, 2, 3\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Access) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can access the elements of the tuple using pattern match or  dot access.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tuple) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (tuple) Tj 0 0 0 rg ( 0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (tuple) Tj 0 0 0 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( tuple) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Transformation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can transform the tuple using the matrix functions combined with ) Tj /F0 12 Tf (then) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tuple) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tuple2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\() Tj 0 0 0 rg (pair) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (pair) Tj 0 0 0 rg ( 0) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( pair) Tj 0 0 0 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\() Tj 0 0 0 rg (tuple) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (tuple2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(2, 2\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( tuple3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( tuple) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( then) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pair) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (pair) Tj 0 0 0 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( pair) Tj 0 0 0 rg ( 1) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (tuple3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(1, 3\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( mapped) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( tuple) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( then) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pair) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (pair) Tj 0 0 0 rg ( 0) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( pair) Tj 0 0 0 rg ( 1) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (mapped) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(2, 1\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (List) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (List) Tj /F0 12 Tf ( package provides an immutable linked list data structure with a variety) Tj T* ( of utility functions for functional programming.) Tj T* 12 TL T* /F0 20 Tf (Table of Contents) Tj 20 TL T* 12 TL T* ET
endstream
endobj
56 0 obj
<<
  /Type /Page  
  /Contents 55 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
57 0 obj
<<
  /Length 2946
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Overview) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Performance) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Usage) Tj T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Create) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Basic Operations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Access Elements) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Iteration) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Advanced Operations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Conversion) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Equality) Tj T* -10 0 Td -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Error Handling Best Practices) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Implementation Notes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Comparison with Other Collections) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 20 Tf (Overview) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (List) Tj /F0 12 Tf ( is a functional, immutable data structure that supports efficient traversal) Tj T* (, transformation, and manipulation. It is particularly useful for recursive algo) Tj T* (rithms and scenarios where immutability is required.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 20 Tf (Performance) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (prepend) Tj /F0 12 Tf (: O\(1\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (length) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (map/filter) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (concatenate) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (reverse) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (nth) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (sort) Tj /F0 12 Tf (: O\(n log n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (flatten) Tj /F0 12 Tf (: O\(n * m\), where ) Tj /F0 12 Tf (m) Tj /F0 12 Tf ( is the average inner list length) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (space complexity) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 20 Tf (Usage) Tj 20 TL T* 12 TL T* /F0 16 Tf (Create) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create an empty list or a list from an array.) Tj T* 12 TL T* ET
endstream
endobj
58 0 obj
<<
  /Type /Page  
  /Contents 57 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
59 0 obj
<<
  /Length 4461
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty_list) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( List) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty_list) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 16 Tf (Basic Operations) Tj 16 TL T* 12 TL T* /F0 12 Tf (Prepend) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Add an element to the beginning of the list.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( prepend) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Length) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the number of elements in the list.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Check if Empty) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Determine if the list is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty_list) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( List) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty_list) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 16 Tf (Access Elements) Tj 16 TL T* 12 TL T* /F0 12 Tf (Head) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the first element of the list as an ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (.) Tj T* 12 TL T* ET
endstream
endobj
60 0 obj
<<
  /Type /Page  
  /Contents 59 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
61 0 obj
<<
  /Length 5376
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg ( head) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Tail) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the list without its first element.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg ( unsafe_tail) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Nth Element) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the nth element of the list as an ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg ( nth) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 16 Tf (Iteration) Tj 16 TL T* 12 TL T* /F0 12 Tf (Each) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterate over the elements of the list.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Map) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Transform each element of the list.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Filter) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Keep elements that satisfy a predicate.) Tj T* ET
endstream
endobj
62 0 obj
<<
  /Type /Page  
  /Contents 61 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
63 0 obj
<<
  /Length 5774
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( filter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 16 Tf (Advanced Operations) Tj 16 TL T* 12 TL T* /F0 12 Tf (Reverse) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Reverse the list.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( rev) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Concatenate) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Concatenate two lists.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( concat) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Flatten) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Flatten a list of lists.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (@list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( flatten) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (Sort) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Sort the list in ascending order.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( sort) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 16 Tf (Conversion) Tj 16 TL T* ET
endstream
endobj
64 0 obj
<<
  /Type /Page  
  /Contents 63 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
65 0 obj
<<
  /Length 3428
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 12 Tf (To Array) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert a list to an array.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 12 Tf (From Array) Tj 12 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create a list from an array.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 16 Tf (Equality) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Lists with the same elements in the same order are considered equal.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( list2) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 20 Tf (Error Handling Best Practices) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (When accessing elements that might not exist, use pattern matching for safety:) Tj T* 12 TL T* ET
endstream
endobj
66 0 obj
<<
  /Type /Page  
  /Contents 65 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
67 0 obj
<<
  /Length 4457
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (fn) Tj 0 0 0 rg ( safe_head) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( List) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( head) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( value) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg ( =>) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (                 ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( list) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (safe_head) Tj 0 0 0 rg (\() Tj 0 0 0 rg (list) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty_list) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( List) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @list) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (safe_head) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty_list) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Additional Error Cases) Tj 16 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (nth\(\)) Tj /F0 12 Tf ( on an empty list or out-of-bounds index) Tj /F0 12 Tf (: Returns ) Tj /F0 12 Tf (None) Tj /F0 12 Tf (.) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (tail\(\)) Tj /F0 12 Tf ( on an empty list) Tj /F0 12 Tf (: Returns ) Tj /F0 12 Tf (Empty) Tj /F0 12 Tf (.) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (sort\(\)) Tj /F0 12 Tf ( with non-comparable elements) Tj /F0 12 Tf (: Throws a runtime error.) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 20 Tf (Implementation Notes) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (List) Tj /F0 12 Tf ( is implemented as a singly linked list. Operations like ) Tj /F0 12 Tf (prepend) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (hea) Tj T* (d) Tj /F0 12 Tf ( are O\(1\), while operations like ) Tj /F0 12 Tf (length) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (map) Tj /F0 12 Tf ( are O\(n\).) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Key properties of the implementation:) Tj T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Immutable by design) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Recursive-friendly) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Optimized for functional programming patterns) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (---) Tj T* 12 TL T* /F0 20 Tf (Comparison with Other Collections) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (@array.T) Tj /F0 12 Tf (: Provides O\(1\) random access but is mutable; use when random access i) Tj T* (s required.) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (@list.T) Tj /F0 12 Tf (: Immutable and optimized for recursive operations; use when immutability) Tj T* ( and functional patterns are required.) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Choose ) Tj /F0 12 Tf (List) Tj /F0 12 Tf ( when you need:) Tj T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Immutable data structures) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Efficient prepend operations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Functional programming patterns) Tj T* 12 TL T* -10 0 Td 12 TL T* ET
endstream
endobj
68 0 obj
<<
  /Type /Page  
  /Contents 67 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
69 0 obj
<<
  /Length 4485
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Priority Queue) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A priority queue is a data structure capable of maintaining maximum/minimum valu) Tj T* (es at front of the queue, which may have other names in other programming langua) Tj T* (ges \(C++ std::priority_queue / Rust BinaryHeap \). The priority queue here is i) Tj T* (mplemented as a pairing heap and has excellent performance.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (new\(\)) Tj /F0 12 Tf ( or ) Tj /F0 12 Tf (of\(\)) Tj /F0 12 Tf ( to create a priority queue.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue1) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( T) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  @json) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ([) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  @json) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Note, however, that the default priority queue created is greater-first; if you ) Tj T* (need to create a less-first queue, you can write a struct belongs to Compare tra) Tj T* (it to implement it.) Tj T* 12 TL T* /F0 20 Tf (Length) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (length\(\)) Tj /F0 12 Tf ( to get the number of elements in the current priority que) Tj T* (ue.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Similarly, you can use the ) Tj /F0 12 Tf (is_empty) Tj /F0 12 Tf ( to determine whether the priority queue is e) Tj T* (mpty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( T) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Peek) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (peek\(\)) Tj /F0 12 Tf ( to look at the head element of a queue, which must be eithe) Tj T* (r the maximum or minimum value of an element in the queue, depending on the natu) Tj T* (re of the specification. The return value of ) Tj /F0 12 Tf (peek\(\)) Tj /F0 12 Tf ( is an Option, which means ) Tj T* (that the result will be ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( when the queue is empty.) Tj T* ET
endstream
endobj
70 0 obj
<<
  /Type /Page  
  /Contents 69 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
71 0 obj
<<
  /Length 5030
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( peek) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Push) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (push\(\)) Tj /F0 12 Tf ( to add elements to the priority queue.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( T) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  pq) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  pq) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( peek) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Pop) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (pop\(\)) Tj /F0 12 Tf ( to pop the element at the front of the priority queue, respe) Tj T* (ctively, and like ) Tj /F0 12 Tf (Peek) Tj /F0 12 Tf (, its return values are ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (, loaded with the value of t) Tj T* (he element being popped.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( pop) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Clear) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (clear) Tj /F0 12 Tf ( to clear a priority queue.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  pq) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pq) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Copy and Transfer) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can copy a priority queue using the ) Tj /F0 12 Tf (copy) Tj /F0 12 Tf ( method.) Tj T* 12 TL T* ET
endstream
endobj
72 0 obj
<<
  /Type /Page  
  /Contents 71 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
73 0 obj
<<
  /Length 5644
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @priority_queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _pq2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( pq) Tj 0 0 0 rg ( copy) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Array Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides array manipulation utilities for MoonBit, including fixed-) Tj T* (size arrays \() Tj /F0 12 Tf (FixedArray) Tj /F0 12 Tf (\), dynamic arrays \() Tj /F0 12 Tf (Array) Tj /F0 12 Tf (\), and array views \() Tj /F0 12 Tf (ArrayVie) Tj T* (w) Tj /F0 12 Tf (/) Tj /F0 12 Tf (View) Tj /F0 12 Tf (\).) Tj T* 12 TL T* /F0 20 Tf (Creating Arrays) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (There are several ways to create arrays in MoonBit:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array creation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[0, 2, 4]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_iter) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("hello") Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['h', 'e', 'l', 'l', 'o']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Array Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Common array operations include mapping, filtering, and folding:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( nums) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( neg_evens) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( nums) Tj 0 0 0 rg ( filter_map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( None) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (neg_evens) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[-2, -4]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( nums) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("15") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( last) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( nums) Tj 0 0 0 rg ( last) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (last) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(5\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
74 0 obj
<<
  /Type /Page  
  /Contents 73 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
75 0 obj
<<
  /Length 5584
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Sorting) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides various sorting utilities:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "sorting") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sorted1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( copy) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  sorted1) Tj 0 0 0 rg ( sort) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sorted1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 1, 2, 3, 4, 5, 6, 9]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( strs) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("aa") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "ccc") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sorted2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( strs) Tj 0 0 0 rg ( copy) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  sorted2) Tj 0 0 0 rg ( sort_by) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    sorted2) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 1 0 0 rg (      #|["b", "aa", "ccc"]) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pairs) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sorted3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( pairs) Tj 0 0 0 rg ( copy) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  sorted3) Tj 0 0 0 rg ( sort_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (p) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( p) Tj 0 0 0 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    sorted3) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 1 0 0 rg (      #|[\(1, "a"\), \(2, "b"\), \(3, "c"\)]) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Array Views) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Array views provide a lightweight way to work with array slices:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "array views") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (:) Tj 1 0 1 rg (4) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 3, 4]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( doubled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (doubled) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[4, 6, 8]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Fixed Arrays) Tj 20 TL T* ET
endstream
endobj
76 0 obj
<<
  /Type /Page  
  /Contents 75 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
77 0 obj
<<
  /Length 4941
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Fixed arrays provide immutable array operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "fixed arrays") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( FixedArray) Tj 0 0 0 rg ([) Tj 0 0 0 rg (_) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( combined) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (combined) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3, 4, 5]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( has_two) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (has_two) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( starts) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( starts_with) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (starts) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( ends) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( ends_with) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ends) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Utilities) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Additional array utilities for common operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "utilities") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( words) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "world") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( joined) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( words) Tj 0 0 0 rg ( join) Tj 0 0 0 rg (\() Tj 1 0 0 rg (" ") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (joined) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("hello world") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( nums) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                                                ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                                          ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( shuffled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( nums) Tj 0 0 0 rg ( shuffle) Tj 0 0 0 rg (\() Tj 0 0 0 rg (rand) Tj 0 0 0 rg (=) Tj 0 0 0 rg (_) Tj 0 0 0 rg ( =>) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (shuffled) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 3, 4, 5, 2]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Sorted Set) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A mutable set backed by a red-black tree.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create an empty SortedSet or a SortedSet from other containers.) Tj T* 12 TL T* ET
endstream
endobj
78 0 obj
<<
  /Type /Page  
  /Contents 77 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
79 0 obj
<<
  /Length 6558
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _set1) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( SortedSet) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _set2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( singleton) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _set3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* /F0 16 Tf (Container Operations) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Add an element to the SortedSet in place.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set4) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  set4) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (      ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set6) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set6) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Remove an element from the SortedSet in place.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( remove) Tj 0 0 0 rg (\() Tj 1 0 1 rg (8) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (       ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set7) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set7) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Whether an element is in the set.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterates over the elements in the set.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the size of the set.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
80 0 obj
<<
  /Type /Page  
  /Contents 79 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
81 0 obj
<<
  /Length 6093
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Whether the set is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( SortedSet) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Set Operations) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Union, intersection and difference of two sets. They return a new set that does ) Tj T* (not overlap with the original sets in memory.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( union) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set3) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set4) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( intersection) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set4) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set5) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( difference) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set5) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Determine the inclusion and separation relationship between two sets.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set1) Tj 0 0 0 rg ( subset) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set1) Tj 0 0 0 rg ( disjoint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Stringify) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (SortedSet implements to_string \(i.e. Show trait\), which allows you to directly) Tj T* ( output it.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_set) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "@sorted_set.from_array\([1, 2, 3]\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (int) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (moonbitlang/core/int) Tj /F0 12 Tf ( package provides essential operations on 32-bit integer) Tj T* (s.) Tj T* 12 TL T* ET
endstream
endobj
82 0 obj
<<
  /Type /Page  
  /Contents 81 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
83 0 obj
<<
  /Length 3864
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Basic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This section shows the basic operations available for integers:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic int operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-2147483648") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2147483647") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Byte Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides methods to convert integers to their byte representation in) Tj T* ( both big-endian and little-endian formats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 258) Tj 0 0 0 rg (                 ) Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                        ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    be_bytes) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x01\\x02") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                                            ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    le_bytes) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|b"\\x02\\x01\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Method Syntax) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (All operations are also available using method syntax for better readability:) Tj T* 12 TL T* ET
endstream
endobj
84 0 obj
<<
  /Type /Page  
  /Contents 83 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
85 0 obj
<<
  /Length 4569
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "method syntax") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( -) Tj 1 0 1 rg (42) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    be) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 1 0 0 rg (      #|b"\\xff\\xff\\xff\\xd6") Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    le) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (      #|b"\\xd6\\xff\\xff\\xff") Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides the foundations for 32-bit integer operations in MoonBit, e) Tj T* (ssential for any numeric computation.) Tj T* 12 TL T* /F0 24 Tf (int64) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides operations for working with 64-bit signed integers \() Tj /F0 12 Tf (Int64) Tj /F0 12 Tf () Tj T* (\) in MoonBit.) Tj T* 12 TL T* /F0 20 Tf (Basic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Int64) Tj /F0 12 Tf ( values can be created from regular 32-bit integers using ) Tj /F0 12 Tf (from_int) Tj /F0 12 Tf (. The pac) Tj T* (kage also provides constants for the maximum and minimum values representable by) Tj T* ( ) Tj /F0 12 Tf (Int64) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int64) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( -) Tj 1 0 1 rg (12345L) Tj 0 0 0 rg (                 ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int64) Tj 0 0 0 rg ( from_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (12345) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int64) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("9223372036854775807") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int64) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-9223372036854775808") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int64) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12345") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
86 0 obj
<<
  /Type /Page  
  /Contents 85 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
87 0 obj
<<
  /Length 4371
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Binary Representation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides functions to convert ) Tj /F0 12 Tf (Int64) Tj /F0 12 Tf ( values to their binary represent) Tj T* (ation in both big-endian and little-endian byte order:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "binary conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 258L) Tj 0 0 0 rg (                      ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    be_bytes) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    le_bytes) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 1 0 0 rg (      #|b"\\x02\\x01\\x00\\x00\\x00\\x00\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                                                                              ) Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( len) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (len) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Method-Style Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (All operations are also available as methods on ) Tj /F0 12 Tf (Int64) Tj /F0 12 Tf ( values:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "method style") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( -) Tj 1 0 1 rg (42L) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    x) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      #|b"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xd6") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Note that ) Tj /F0 12 Tf (Int64) Tj /F0 12 Tf ( implements the ) Tj /F0 12 Tf (Hash) Tj /F0 12 Tf ( trait, allowing it to be used as keys in has) Tj T* (h maps and members of hash sets.) Tj T* 12 TL T* ET
endstream
endobj
88 0 obj
<<
  /Type /Page  
  /Contents 87 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
89 0 obj
<<
  /Length 4096
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (unit) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (unit) Tj /F0 12 Tf ( package provides functionality for working with the singleton type ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf () Tj T* (, which represents computations that produce side effects but return no meaningf) Tj T* (ul value. This is a fundamental type in functional programming for operations li) Tj T* (ke I/O, logging, and state modifications.) Tj T* 12 TL T* /F0 20 Tf (Understanding Unit Type) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( type has exactly one value: ) Tj /F0 12 Tf (\(\)) Tj /F0 12 Tf (. This might seem trivial, but it serve) Tj T* (s important purposes in type systems:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Side Effect Indication) Tj /F0 12 Tf (: Functions returning ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( signal they're called for side ) Tj T* (effects) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Placeholder Type) Tj /F0 12 Tf (: Used when a type parameter is needed but no meaningful value e) Tj T* (xists) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Functional Programming) Tj /F0 12 Tf (: Represents "no useful return value" without using ) Tj /F0 12 Tf (null) Tj /F0 12 Tf ( o) Tj T* (r exceptions) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Interface Consistency) Tj /F0 12 Tf (: Maintains uniform function signatures in generic contexts) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Unit Value Creation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The unit value can be created in multiple ways:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unit construction") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @unit) Tj 0 0 0 rg ( default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (    println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Hello, world!") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Side-Effect Functions) Tj 20 TL T* 12 TL T* ET
endstream
endobj
90 0 obj
<<
  /Type /Page  
  /Contents 89 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
91 0 obj
<<
  /Length 4770
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (Functions that return ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( are typically called for their side effects:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "side effect patterns") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( processing_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( numbers) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (      println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (processing_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  numbers) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( println) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Representation and Debugging) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Unit values have a standard string representation for debugging:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unit string conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( perform_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( perform_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( debug_msg) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Operation completed: \\{result}") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (debug_msg) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Operation completed: \(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Generic Programming with Unit) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Unit is particularly useful in generic contexts where you need to represent "no ) Tj T* (meaningful value":) Tj T* 12 TL T* ET
endstream
endobj
92 0 obj
<<
  /Type /Page  
  /Contents 91 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
93 0 obj
<<
  /Length 5161
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "generic unit usage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                              ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( items) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  items) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( processed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (processed) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                                                          ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( completion_status) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (completion_status) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                                                  ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( operation_result) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Unit) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (operation_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Ok\(\(\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Built-in Trait Implementations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Unit implements essential traits for seamless integration with MoonBit's type sy) Tj T* (stem:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unit trait implementations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u1) Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( h1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg ( hash) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( h2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( u2) Tj 0 0 0 rg ( hash) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (h1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( h2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( u3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg (::) Tj 0 0 0 rg (default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (u3) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( u1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Use Cases) Tj 20 TL T* 12 TL T* /F0 16 Tf (Result Accumulation) Tj 16 TL T* 12 TL T* ET
endstream
endobj
94 0 obj
<<
  /Type /Page  
  /Contents 93 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
95 0 obj
<<
  /Length 4659
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "result accumulation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                               ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( operations) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (,) Tj 0 0 0 rg (               ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (,) Tj 0 0 0 rg (               ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  ]) Tj 0 0 0 rg (               ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( final_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( operations) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( operation) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (    acc) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (final_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Builder Pattern Termination) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "builder pattern") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                            ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( settings) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("debug=true") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "timeout=30") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                              ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( apply_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config_list) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Unit) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( _has_settings) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( config_list) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( apply_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (settings) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Unit) Tj /F0 12 Tf ( type provides essential functionality for representing "no meaningful r) Tj T* (eturn value" in a type-safe way, enabling clean functional programming patterns ) Tj T* (and consistent interfaces across MoonBit code.) Tj T* 12 TL T* /F0 24 Tf (BigInt Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides arbitrary-precision integer arithmetic through the ) Tj /F0 12 Tf (BigInt) Tj /F0 12 Tf ( ) Tj T* (type. BigInt allows you to work with integers of unlimited size, making it perfe) Tj T* (ct for cryptographic operations, mathematical computations, and any scenario whe) Tj T* (re standard integer types are insufficient.) Tj T* 12 TL T* /F0 20 Tf (Creating BigInt Values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (There are several ways to create BigInt values:) Tj T* 12 TL T* ET
endstream
endobj
96 0 obj
<<
  /Type /Page  
  /Contents 95 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
97 0 obj
<<
  /Length 2943
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "creating bigint values") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big1) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 12345678901234567890N) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12345678901234567890") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int64) Tj 0 0 0 rg (\() Tj 1 0 1 rg (9223372036854775807L) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("9223372036854775807") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big4) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("123456789012345678901234567890") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big4) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("123456789012345678901234567890") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big5) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_hex) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("1a2b3c4d5e6f") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("28772997619311") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Basic Arithmetic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (BigInt supports all standard arithmetic operations:) Tj T* 12 TL T* ET
endstream
endobj
98 0 obj
<<
  /Type /Page  
  /Contents 97 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
99 0 obj
<<
  /Length 6952
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "arithmetic operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 123456789012345678901234567890N) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 987654321098765432109876543210N) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1111111110111111111011111111100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( diff) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( a) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (diff) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("864197532086419753208641975320") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( product) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (123) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (456) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (product) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("56088") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (             ) Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( quotient) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1000) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (quotient) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("142") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (           ) Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( remainder) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1000) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( %) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (remainder) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (             ) Tj T* 12 TL (27  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( neg) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( -) Tj 0 0 0 rg (a) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (neg) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-123456789012345678901234567890") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Compare BigInt values with each other and with regular integers:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "comparisons") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 12345N) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( small) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 123N) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( small) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( small) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( big) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big) Tj 0 0 0 rg ( equal_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (12345) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big) Tj 0 0 0 rg ( compare_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (12345) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big) Tj 0 0 0 rg ( compare_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1000) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small) Tj 0 0 0 rg ( compare_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (200) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (             ) Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big64) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int64) Tj 0 0 0 rg (\() Tj 1 0 1 rg (9223372036854775807L) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big64) Tj 0 0 0 rg ( equal_int64) Tj 0 0 0 rg (\() Tj 1 0 1 rg (9223372036854775807L) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
100 0 obj
<<
  /Type /Page  
  /Contents 99 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
101 0 obj
<<
  /Length 3219
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Bitwise Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (BigInt supports bitwise operations for bit manipulation:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bitwise operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b11110000N) Tj 0 0 0 rg (                  ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b10101010N) Tj 0 0 0 rg (                  ) Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( and_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( &) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (and_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("160") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (              ) Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( or_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( |) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (or_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("250") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (              ) Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( xor_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( ^) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (xor_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("90") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (              ) Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big_num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 255N) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big_num) Tj 0 0 0 rg ( bit_length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( with_zeros) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1000N) Tj 0 0 0 rg (                                ) Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( ctz) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( with_zeros) Tj 0 0 0 rg ( ctz) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ctz) Tj 0 0 0 rg ( >=) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Power and Modular Arithmetic) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (BigInt provides efficient power and modular exponentiation:) Tj T* 12 TL T* ET
endstream
endobj
102 0 obj
<<
  /Type /Page  
  /Contents 101 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
103 0 obj
<<
  /Length 6071
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "power operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( base) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 2N) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( exponent) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 10N) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( power) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( base) Tj 0 0 0 rg ( pow) Tj 0 0 0 rg (\() Tj 0 0 0 rg (exponent) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (power) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1024") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( base2) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 3N) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( exp2) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 5N) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( modulus) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 7N) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( mod_power) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( base2) Tj 0 0 0 rg ( pow) Tj 0 0 0 rg (\() Tj 0 0 0 rg (exp2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( modulus~) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (mod_power) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                           ) Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                                       ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_base) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 123N) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_exp) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 20N) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_mod) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1000007N) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( large_base) Tj 0 0 0 rg ( pow) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_exp) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( modulus) Tj 0 0 0 rg (=) Tj 0 0 0 rg (large_mod) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("378446") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String and Hexadecimal Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert BigInt to and from various string representations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 255N) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( decimal) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (decimal) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("255") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( hex_lower) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_hex) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (hex_lower) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("FF") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( hex_upper) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_hex) Tj 0 0 0 rg (\() Tj 0 0 0 rg (uppercase) Tj 0 0 0 rg (=) Tj 0 0 1 rg (true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (hex_upper) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("FF") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( from_hex) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_hex) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("deadbeef") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (from_hex) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3735928559") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( original) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 98765432109876543210N) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_string) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( original) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( parsed_back) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_string) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (original) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( parsed_back) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
104 0 obj
<<
  /Type /Page  
  /Contents 103 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
105 0 obj
<<
  /Length 2949
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Byte Array Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert BigInt to and from byte arrays:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0x123456789abcdefN) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_octets) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( from_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_octets) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (from_bytes) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( big) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed_length) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (255) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_octets) Tj 0 0 0 rg (\() Tj 0 0 0 rg (length) Tj 0 0 0 rg (=) Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (fixed_length) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (                                                                           ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (                                                        ) Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Type Conversions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert BigInt to standard integer types:) Tj T* 12 TL T* ET
endstream
endobj
106 0 obj
<<
  /Type /Page  
  /Contents 105 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
107 0 obj
<<
  /Length 4558
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "type conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 12345N) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_int) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12345") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_int64) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_int64) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12345") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (            ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_uint) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_uint) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12345") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( small) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 255N) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_int16) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( small) Tj 0 0 0 rg ( to_int16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_int16) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("255") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_uint16) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( small) Tj 0 0 0 rg ( to_uint16) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_uint16) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("255") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (JSON Serialization) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (BigInt values can be serialized to and from JSON:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json serialization") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 12345678901234567890N) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                      ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( big) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("String\(\\"12345678901234567890\\"\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                              ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( very_big) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bigint) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("123456789012345678901234567890") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( big_json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( very_big) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (big_json) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("String\(\\"123456789012345678901234567890\\"\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Utility Functions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Check properties of BigInt values:) Tj T* 12 TL T* ET
endstream
endobj
108 0 obj
<<
  /Type /Page  
  /Contents 107 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
109 0 obj
<<
  /Length 4654
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "utility functions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( zero) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0N) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( positive) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42N) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( negative) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( -) Tj 1 0 1 rg (42N) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (zero) Tj 0 0 0 rg ( is_zero) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (positive) Tj 0 0 0 rg ( is_zero) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (positive) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( zero) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (negative) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( zero) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (zero) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( zero) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Use Cases and Applications) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (BigInt is particularly useful for:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Cryptography) Tj /F0 12 Tf (: RSA encryption, digital signatures, and key generation) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Mathematical computations) Tj /F0 12 Tf (: Factorial calculations, Fibonacci sequences, prime nu) Tj T* (mber testing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Financial calculations) Tj /F0 12 Tf (: High-precision monetary computations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Scientific computing) Tj /F0 12 Tf (: Large integer calculations in physics and chemistry) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Data processing) Tj /F0 12 Tf (: Handling large numeric IDs and checksums) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (BigInt operations are slower than regular integer operations due to arbitrary pr) Tj T* (ecision) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Addition and subtraction are generally fast) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Multiplication and division become slower with larger numbers) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Modular exponentiation is optimized for cryptographic use cases) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (String conversions can be expensive for very large numbers) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use regular integers when possible) Tj /F0 12 Tf (: Only use BigInt when you need arbitrary prec) Tj T* (ision) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Cache string representations) Tj /F0 12 Tf (: If you need to display the same BigInt multiple ti) Tj T* (mes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use modular arithmetic) Tj /F0 12 Tf (: For cryptographic applications, always use modular expon) Tj T* (entiation) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Be careful with conversions) Tj /F0 12 Tf (: Converting very large BigInt to regular integers wi) Tj T* (ll truncate) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Consider memory usage) Tj /F0 12 Tf (: Very large BigInt values consume more memory) Tj T* 12 TL T* -10 0 Td 12 TL T* ET
endstream
endobj
110 0 obj
<<
  /Type /Page  
  /Contents 109 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
111 0 obj
<<
  /Length 2542
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Bench Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides benchmarking utilities for measuring the performance of Mo) Tj T* (onBit code. It includes functions for timing code execution, collecting statisti) Tj T* (cs, and generating performance reports.) Tj T* 12 TL T* /F0 20 Tf (Basic Benchmarking) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use the ) Tj /F0 12 Tf (single_bench) Tj /F0 12 Tf ( function to benchmark individual operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic benchmarking") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( simple_calc) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    n) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( summary) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( single_bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("simple_calc") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (simple_calc) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (summary) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( stringify) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Benchmark Collection) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use the ) Tj /F0 12 Tf (T) Tj /F0 12 Tf ( type to collect multiple benchmarks:) Tj T* 12 TL T* ET
endstream
endobj
112 0 obj
<<
  /Type /Page  
  /Contents 111 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
113 0 obj
<<
  /Length 3182
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "benchmark collection") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_creation") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_iteration") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (      sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Benchmarking Different Algorithms) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Compare the performance of different implementations:) Tj T* 12 TL T* ET
endstream
endobj
114 0 obj
<<
  /Type /Page  
  /Contents 113 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
115 0 obj
<<
  /Length 3595
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "algorithm comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("linear_search") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( target) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( found) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( false) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( target) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (        found) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (        break) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (found) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("builtin_contains") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Data Structure Benchmarks) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Benchmark different data structure operations:) Tj T* 12 TL T* ET
endstream
endobj
116 0 obj
<<
  /Type /Page  
  /Contents 115 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
117 0 obj
<<
  /Length 6429
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "data structure benchmarks") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_append") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("fixedarray_access") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ([) Tj 0 0 0 rg (i) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Operations Benchmarking) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Measure string manipulation performance:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string benchmarks") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("string_concat") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "x") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("stringbuilder") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( builder) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( StringBuilder) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (      builder) Tj 0 0 0 rg ( write_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("x") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (builder) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
118 0 obj
<<
  /Type /Page  
  /Contents 117 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
119 0 obj
<<
  /Length 5948
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Memory Usage Prevention) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (keep) Tj /F0 12 Tf ( to prevent compiler optimizations from eliminating benchmarked code:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "preventing optimization") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("with_keep") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                                ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iteration Count Control) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Control the number of benchmark iterations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "iteration control") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("stable_benchmark") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    count) Tj 0 0 0 rg (=) Tj 1 0 1 rg (20) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("quick_benchmark") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (      let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (      for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (10) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (        result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( i) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (      ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    count) Tj 0 0 0 rg (=) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (31  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
120 0 obj
<<
  /Type /Page  
  /Contents 119 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
121 0 obj
<<
  /Length 5514
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Benchmarking Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (1. Isolate What You're Measuring) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "isolation example") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                           ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_sum") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (      sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (2. Warm Up Before Measuring) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "warmup example") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( expensive_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (      result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( i) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    result) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( _) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (expensive_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("warmed_up") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( expensive_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (3. Use Meaningful Names) Tj 16 TL T* 12 TL T* ET
endstream
endobj
122 0 obj
<<
  /Type /Page  
  /Contents 121 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
123 0 obj
<<
  /Length 4030
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "meaningful names") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_insert_10_items") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (10) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_search_sorted_10") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Performance Analysis) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The benchmark results include statistical information:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Timing measurements) Tj /F0 12 Tf (: Microsecond precision timing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Statistical analysis) Tj /F0 12 Tf (: Median, percentiles, and outlier detection) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Batch sizing) Tj /F0 12 Tf (: Automatic adjustment for stable measurements) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (JSON output) Tj /F0 12 Tf (: Machine-readable results for analysis) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Integration with Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Benchmarks can be integrated into your testing workflow:) Tj T* 12 TL T* ET
endstream
endobj
124 0 obj
<<
  /Type /Page  
  /Contents 123 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
125 0 obj
<<
  /Length 4845
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "performance regression test") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("critical_algorithm") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( sorted) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (      sorted) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    sorted) Tj 0 0 0 rg ( sort) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sorted) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                                              ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Common Benchmarking Patterns) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Before/After comparisons) Tj /F0 12 Tf (: Benchmark code before and after optimizations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Algorithm comparison) Tj /F0 12 Tf (: Compare different implementations of the same functionalit) Tj T* (y) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Scaling analysis) Tj /F0 12 Tf (: Benchmark with different input sizes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Memory vs. speed tradeoffs) Tj /F0 12 Tf (: Compare memory-efficient vs. speed-optimized approac) Tj T* (hes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Platform differences) Tj /F0 12 Tf (: Compare performance across different targets \(JS, WASM, n) Tj T* (ative\)) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Tips for Accurate Benchmarks) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Run benchmarks multiple times and look for consistency) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Be aware of system load and other processes affecting timing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use appropriate iteration counts \(more for stable results, fewer for quick feed) Tj T* (back\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Measure what matters to your use case) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Consider both average case and worst case performance) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Profile memory usage separately if memory performance is important) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The bench package provides essential tools for performance analysis and optimiza) Tj T* (tion in MoonBit applications.) Tj T* 12 TL T* /F0 24 Tf (cmp) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utility functions for comparing values.) Tj T* 12 TL T* /F0 20 Tf (Generic Comparison Functions) Tj 20 TL T* 12 TL T* ET
endstream
endobj
126 0 obj
<<
  /Type /Page  
  /Contents 125 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
127 0 obj
<<
  /Length 5831
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (The library provides generic comparison functions that work with any type implem) Tj T* (enting the ) Tj /F0 12 Tf (Compare) Tj /F0 12 Tf ( trait:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "generic comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg ( maximum) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg ( minimum) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison by Key) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (With ) Tj /F0 12 Tf (@cmp.maximum_by_key\(\)) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (@cmp.minimum_by_key\(\)) Tj /F0 12 Tf (, it is possible to comp) Tj T* (are values based on arbitrary keys derived from the them. This is particularly u) Tj T* (seful when you need to compare complex objects based on some specific aspect or ) Tj T* (field.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "cmp_by_key") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  struct) Tj 0 0 0 rg ( Person) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    name) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    age) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 1 rg ( derive) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Show) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( s1) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( s2) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hi") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( longer) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @cmp) Tj 0 0 0 rg ( maximum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (s1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( s2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (length) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (longer) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( alice) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( name) Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "Alice") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( age) Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 25) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bob) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( name) Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "Bob") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( age) Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( younger) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @cmp) Tj 0 0 0 rg ( minimum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (alice) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( bob) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( p) Tj 0 0 0 rg ( age) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (younger) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("{name: \\"Alice\\", age: 25}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                                                                      ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( p1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("first") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 0 rg ("second") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( snd) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (p) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (_) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( _) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( p) Tj 0 0 0 rg ( 1) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg ( minimum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (p1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( snd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@cmp) Tj 0 0 0 rg ( maximum_by_key) Tj 0 0 0 rg (\() Tj 0 0 0 rg (p1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( snd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( p2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (math) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This library provides common mathematical functions for floating-point arithmeti) Tj T* (c, trigonometry, and general numeric comparisons.) Tj T* 12 TL T* /F0 20 Tf (Constants) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit math library provides the mathematical constant \300\003:) Tj T* ET
endstream
endobj
128 0 obj
<<
  /Type /Page  
  /Contents 127 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
129 0 obj
<<
  /Length 5705
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "mathematical constants") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( PI) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3.141592653589793") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Basic Arithmetic Functions) Tj 20 TL T* 12 TL T* /F0 16 Tf (Rounding Functions) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Several functions are available for rounding numbers in different ways:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "rounding functions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( round) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( round) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( ceil) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( ceil) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( floor) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( floor) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( trunc) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( trunc) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Exponential and Logarithmic Functions) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The library provides standard exponential and logarithmic operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "exponential and logarithmic") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( exp) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2.718281828459045") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( expm1) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.718281828459045") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( ln) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2.718281828459045) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( ln_1p) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.718281828459045) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( log2) Tj 0 0 0 rg (\() Tj 1 0 1 rg (8.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( log10) Tj 0 0 0 rg (\() Tj 1 0 1 rg (100.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Trigonometric Functions) Tj 20 TL T* 12 TL T* ET
endstream
endobj
130 0 obj
<<
  /Type /Page  
  /Contents 129 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
131 0 obj
<<
  /Length 6069
>>
stream
 1 0 0 1 50 770 cm BT /F0 16 Tf (Basic Trigonometric Functions) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Standard trigonometric functions operating in radians:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic trigonometry") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( sin) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( PI) Tj 0 0 0 rg ( /) Tj 1 0 1 rg ( 2.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( cos) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( tan) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( PI) Tj 0 0 0 rg ( /) Tj 1 0 1 rg ( 4.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0.9999999999999999") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( asin) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.5707963267948966") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( acos) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( atan) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0.7853981633974483") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Hyperbolic Functions) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The library also includes hyperbolic functions and their inverses:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "hyperbolic functions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( sinh) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.1752011936438014") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( cosh) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.5430806348152437") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( tanh) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0.7615941559557649") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( asinh) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0.881373587019543") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( acosh) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.3169578969248166") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( atanh) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0.5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0.5493061443340548") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Special Functions) Tj 20 TL T* 12 TL T* /F0 16 Tf (Two-argument Functions) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Some special mathematical functions taking two arguments:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "special functions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                                            ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( atan2) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1.0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0.7853981633974483") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                                 ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( hypot) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (              ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@math) Tj 0 0 0 rg ( cbrt) Tj 0 0 0 rg (\() Tj 1 0 1 rg (8.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
132 0 obj
<<
  /Type /Page  
  /Contents 131 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
133 0 obj
<<
  /Length 4312
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (ref) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides functionality for working with mutable references, allowin) Tj T* (g you to create sharable mutable values that can be modified safely.) Tj T* 12 TL T* /F0 20 Tf (Creating and Accessing References) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (References can be created using ) Tj /F0 12 Tf (@ref.new\(\)) Tj /F0 12 Tf (. The reference value can be accesse) Tj T* (d through the ) Tj /F0 12 Tf (val) Tj /F0 12 Tf ( field:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "creating and accessing refs") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( r1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @ref) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r1) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Updating Reference Values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (update) Tj /F0 12 Tf ( function allows modifying the contained value using a transformation ) Tj T* (function:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "updating refs") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @ref) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( update) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( update) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Mapping References) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (map) Tj /F0 12 Tf ( function transforms a reference while preserving the reference wrapper:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "mapping refs") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @ref) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( doubled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (doubled) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("20") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( squared) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (squared) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Swapping Reference Values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can exchange the values of two references using the ) Tj /F0 12 Tf (swap) Tj /F0 12 Tf ( function:) Tj T* 12 TL T* ET
endstream
endobj
134 0 obj
<<
  /Type /Page  
  /Contents 133 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
135 0 obj
<<
  /Length 3679
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "swapping refs") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( r1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @ref) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("first") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( r2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @ref) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("second") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  @ref) Tj 0 0 0 rg ( swap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r1) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("second") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r2) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("first") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Temporary Value Protection) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (protect) Tj /F0 12 Tf ( function temporarily sets a reference to a value and restores it aft) Tj T* (er executing a block:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "protected updates") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( state) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @ref) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (100) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( middle) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( state) Tj 0 0 0 rg ( protect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    middle) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( state) Tj 0 0 0 rg ( val) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 1 0 1 rg (    42) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (middle) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (state) Tj 0 0 0 rg ( val) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This is useful for temporarily modifying state that needs to be restored afterwa) Tj T* (rds.) Tj T* 12 TL T* /F0 24 Tf (bytes) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utilities for working with sequences of bytes, offering bo) Tj T* (th mutable \() Tj /F0 12 Tf (Bytes) Tj /F0 12 Tf (\) and immutable \() Tj /F0 12 Tf (View) Tj /F0 12 Tf (\) representations.) Tj T* 12 TL T* /F0 20 Tf (Creating Bytes) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create ) Tj /F0 12 Tf (Bytes) Tj /F0 12 Tf ( from various sources including arrays, fixed arrays, and it) Tj T* (erators:) Tj T* 12 TL T* ET
endstream
endobj
136 0 obj
<<
  /Type /Page  
  /Contents 135 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
137 0 obj
<<
  /Length 3857
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes creation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (b'h') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'e') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'l') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'l') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'o') Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    bytes1) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 1 0 0 rg (      #|b"\\x68\\x65\\x6c\\x6c\\x6f") Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( FixedArray) Tj 0 0 0 rg (::) Tj 0 0 0 rg (make) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'a') Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg (fixed) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    bytes2) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|b"\\x61\\x61\\x61") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    empty) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 1 0 0 rg (      #|b"") Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( iter_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 0 rg (    iter_bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 1 0 0 rg (      #|b"\\x68\\x65\\x6c\\x6c\\x6f") Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (39  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (40  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Converting Between Formats) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Bytes) Tj /F0 12 Tf ( can be converted to and from different formats:) Tj T* 12 TL T* ET
endstream
endobj
138 0 obj
<<
  /Type /Page  
  /Contents 137 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
139 0 obj
<<
  /Length 5078
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( original) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (b'x') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'y') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'z') Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (original) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[b'\\\\x78', b'\\\\x79', b'\\\\x7A']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( fixed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( to_fixedarray) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (fixed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[b'\\\\x78', b'\\\\x79', b'\\\\x7A']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( collected) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (collected) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[b'\\\\x78', b'\\\\x79', b'\\\\x7A']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Views) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Views provide a way to work with portions of bytes and interpret them as various) Tj T* ( numeric types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes view operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (0x12) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x34) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x56) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x78) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num_bytes) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("b'\\\\x12'") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg ( to_int_be) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("305419896") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (view) Tj 0 0 0 rg ( to_int_le) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2018915346") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sub_view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (:) Tj 1 0 1 rg (3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sub_view) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Binary Data Interpretation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Views provide methods to interpret byte sequences as various numeric types in bo) Tj T* (th little-endian and big-endian formats:) Tj T* 12 TL T* ET
endstream
endobj
140 0 obj
<<
  /Type /Page  
  /Contents 139 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
141 0 obj
<<
  /Length 4798
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "numeric interpretation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( int64_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 1 0 1 rg (    0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x00) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0x42) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  ]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( int64_view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( int64_bytes) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (int64_view) Tj 0 0 0 rg ( to_int64_be) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("66") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (int64_view) Tj 0 0 0 rg ( to_uint64_le) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4755801206503243776") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Concatenation and Comparison) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Bytes can be concatenated and compared:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bytes operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'a') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'b') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'c') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'd') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( combined) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( b1) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b2) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    combined) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      #|b"\\x61\\x62\\x63\\x64") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( same) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'a') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'b') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( different) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bytes) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (b'x') Tj 0 0 0 rg (,) Tj 1 0 1 rg ( b'y') Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( same) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( different) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b1) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( b2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (char) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides a set of utilities for working with characters, focusing o) Tj T* (n character classification and validation.) Tj T* 12 TL T* /F0 20 Tf (Basic ASCII Classification) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Functions for determining if a character belongs to various ASCII categories.) Tj T* 12 TL T* ET
endstream
endobj
142 0 obj
<<
  /Type /Page  
  /Contents 141 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
143 0 obj
<<
  /Length 6021
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "ascii classification") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('A') Tj 0 0 0 rg ( is_ascii) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('?') Tj 0 0 0 rg ( is_ascii) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('Z') Tj 0 0 0 rg ( is_ascii_alphabetic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('1') Tj 0 0 0 rg ( is_ascii_alphabetic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('A') Tj 0 0 0 rg ( is_ascii_uppercase) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('a') Tj 0 0 0 rg ( is_ascii_uppercase) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('a') Tj 0 0 0 rg ( is_ascii_lowercase) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('A') Tj 0 0 0 rg ( is_ascii_lowercase) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Number Classification) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Functions for identifying digits in different number bases.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "number classification") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('5') Tj 0 0 0 rg ( is_ascii_digit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('x') Tj 0 0 0 rg ( is_ascii_digit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('F') Tj 0 0 0 rg ( is_ascii_hexdigit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('G') Tj 0 0 0 rg ( is_ascii_hexdigit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('7') Tj 0 0 0 rg ( is_ascii_octdigit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('8') Tj 0 0 0 rg ( is_ascii_octdigit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('5') Tj 0 0 0 rg ( is_digit) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6U) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('6') Tj 0 0 0 rg ( is_digit) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6U) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('1') Tj 0 0 0 rg ( is_numeric) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('A') Tj 0 0 0 rg ( is_numeric) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Special Characters) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Functions for identifying whitespace, control characters and other special chara) Tj T* (cters.) Tj T* 12 TL T* ET
endstream
endobj
144 0 obj
<<
  /Type /Page  
  /Contents 143 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
145 0 obj
<<
  /Length 5678
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "special characters") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg (' ') Tj 0 0 0 rg ( is_ascii_whitespace) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('\\n') Tj 0 0 0 rg ( is_whitespace) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('\\u0000') Tj 0 0 0 rg ( is_ascii_control) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('\\u007F') Tj 0 0 0 rg ( is_control) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg ('!') Tj 0 0 0 rg ( is_ascii_graphic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg (' ') Tj 0 0 0 rg ( is_ascii_graphic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 0 rg (',') Tj 0 0 0 rg ( is_ascii_punctuation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Method Style Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (All character classification functions can also be called as methods directly on) Tj T* ( characters.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "method style") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( c) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( 'A') Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg ( is_ascii) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg ( is_ascii_alphabetic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg ( is_ascii_uppercase) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( d) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( '7') Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (d) Tj 0 0 0 rg ( is_ascii_digit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (d) Tj 0 0 0 rg ( is_digit) Tj 0 0 0 rg (\() Tj 1 0 1 rg (8U) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (d) Tj 0 0 0 rg ( is_ascii_hexdigit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( s) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( ' ') Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (s) Tj 0 0 0 rg ( is_ascii_whitespace) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (s) Tj 0 0 0 rg ( is_whitespace) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Deque) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Deque is a double-ended queue implemented as a round-robin queue, supporting O\() Tj T* (1\) head or tail insertion and querying, just like double-ended queues in other ) Tj T* (languages\(C++ std::deque / Rust VecDeque\), here deque also supports random acc) Tj T* (ess.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* ET
endstream
endobj
146 0 obj
<<
  /Type /Page  
  /Contents 145 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
147 0 obj
<<
  /Length 5092
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (You can create a deque manually via the ) Tj /F0 12 Tf (new\(\)) Tj /F0 12 Tf ( or construct it using the ) Tj /F0 12 Tf (of\(\)) Tj /F0 12 Tf () Tj T* (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _dv) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( Deque) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (If you want to set the length at creation time to minimize expansion consumption) Tj T* (, you can add parameter ) Tj /F0 12 Tf (capacity) Tj /F0 12 Tf ( to the ) Tj /F0 12 Tf (new\(\)) Tj /F0 12 Tf ( function.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _dv) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( Deque) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (capacity) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Length & Capacity) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A deque is an indefinite-length, auto-expandable datatype. You can use ) Tj /F0 12 Tf (length\(\) Tj T* ()) Tj /F0 12 Tf ( to get the number of elements in the current queue, or ) Tj /F0 12 Tf (capacity\(\)) Tj /F0 12 Tf ( to get the) Tj T* ( current capacity.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL /F0 12 Tf /F0 12 Tf (Similarly, you can use the ) Tj /F0 12 Tf (is_empty) Tj /F0 12 Tf ( to determine whether the queue is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( Deque) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (reserve_capacity) Tj /F0 12 Tf ( to reserve capacity, ensures that it can hold at le) Tj T* (ast the number of elements) Tj /F0 12 Tf ( ) Tj /F0 12 Tf (specified by the ) Tj /F0 12 Tf (capacity) Tj /F0 12 Tf ( argument.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( reserve_capacity) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Also, you can use ) Tj /F0 12 Tf (shrink_to_fit) Tj /F0 12 Tf ( to shrink the capacity of the deque.) Tj T* 12 TL T* ET
endstream
endobj
148 0 obj
<<
  /Type /Page  
  /Contents 147 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
149 0 obj
<<
  /Length 5533
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (capacity) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_back) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_back) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_back) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( shrink_to_fit) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Front & Back & Get) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (front\(\)) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (back\(\)) Tj /F0 12 Tf ( to get the head and tail elements of the queu) Tj T* (e, respectively. Since the queue may be empty, their return values are both ) Tj /F0 12 Tf (Opti) Tj T* (on) Tj /F0 12 Tf (, or ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( if the queue is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( front) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( back) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can also use ) Tj /F0 12 Tf (get) Tj /F0 12 Tf ( to access elements of the queue directly, but be careful no) Tj T* (t to cross the boundaries!) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ([) Tj 1 0 1 rg (4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Push & Set) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Since the queue is bi-directional, you can use ) Tj /F0 12 Tf (push_front\(\)) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (push_back\(\)) Tj /F0 12 Tf ( ) Tj T* (to add values to the head or tail of the queue, respectively.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_front) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_front) Tj 0 0 0 rg (\() Tj 1 0 1 rg (7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_back) Tj 0 0 0 rg (\() Tj 1 0 1 rg (8) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( push_back) Tj 0 0 0 rg (\() Tj 1 0 1 rg (9) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can also use ) Tj /F0 12 Tf (Deque::set) Tj /F0 12 Tf ( or operator ) Tj /F0 12 Tf (_[_]=_) Tj /F0 12 Tf (to set elements of the queue direc) Tj T* (tly, but be careful not to cross the boundaries!) Tj T* 12 TL T* ET
endstream
endobj
150 0 obj
<<
  /Type /Page  
  /Contents 149 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
151 0 obj
<<
  /Length 5678
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Pop) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (pop_front\(\)) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (pop_back\(\)) Tj /F0 12 Tf ( to pop the element at the head or tai) Tj T* (l of the queue, respectively, and like [Front & Back]\(#Front & Back & Get\), th) Tj T* (eir return values are ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (, loaded with the value of the element being popped.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _back) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( pop_back) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (           ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( back) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _front) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( pop_front) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (          ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( front) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL /F0 12 Tf /F0 12 Tf (If you only want to pop an element without getting the return value, you can use) Tj T* ( ) Tj /F0 12 Tf (unsafe_pop_front\(\)) Tj /F0 12 Tf ( with ) Tj /F0 12 Tf (unsafe_pop_back\(\)) Tj /F0 12 Tf (. These two functions will panic i) Tj T* (f the queue is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( unsafe_pop_front) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( front) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( unsafe_pop_back) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( back) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Clear) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (clear) Tj /F0 12 Tf ( to clear a deque. But note that the memory it already occupies) Tj T* ( does not change.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Equal) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (deque supports comparing them directly using ) Tj /F0 12 Tf (equal) Tj /F0 12 Tf (.) Tj T* 12 TL T* ET
endstream
endobj
152 0 obj
<<
  /Type /Page  
  /Contents 151 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
153 0 obj
<<
  /Length 7091
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dqa) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dqb) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dqa) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( dqb) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iter & Map) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (deque supports vector-like ) Tj /F0 12 Tf (iter/iteri/map/mapi) Tj /F0 12 Tf ( functions and their inverse forms) Tj T* (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (elem) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (elem) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  dv) Tj 0 0 0 rg ( eachi) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( _elem) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (elem) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr3) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (elem) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr4) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( mapi) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( elem) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr4) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (elem) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr4) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Search & Contains) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (contains\(\)) Tj /F0 12 Tf ( to find out if a value is in the deque, or ) Tj /F0 12 Tf (search\(\)) Tj /F0 12 Tf ( t) Tj T* (o find its index in the deque.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dv) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @deque) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( search) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dv) Tj 0 0 0 rg ( search) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( None) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Error Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utilities for working with MoonBit's error handling system) Tj T* (, including implementations of ) Tj /F0 12 Tf (Show) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (ToJson) Tj /F0 12 Tf ( traits for the built-in ) Tj /F0 12 Tf (Error) Tj /F0 12 Tf ( typ) Tj T* (e.) Tj T* 12 TL T* /F0 20 Tf (Basic Error Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit uses a structured error system with ) Tj /F0 12 Tf (raise) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (try) Tj /F0 12 Tf ( constructs:) Tj T* ET
endstream
endobj
154 0 obj
<<
  /Type /Page  
  /Contents 153 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
155 0 obj
<<
  /Length 2327
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Division by zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try!) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Err\(Failure\(\\"Division by zero\\"\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Custom Error Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Define custom error types using ) Tj /F0 12 Tf (suberror) Tj /F0 12 Tf (:) Tj T* 12 TL T* ET
endstream
endobj
156 0 obj
<<
  /Type /Page  
  /Contents 155 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
157 0 obj
<<
  /Length 4683
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ValidationError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( NetworkError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "custom errors") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( validate_email) Tj 0 0 0 rg (\() Tj 0 0 0 rg (email) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ValidationError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( email) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (      email) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( ValidationError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid email format") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( fetch_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (url) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( NetworkError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( url) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg ( {) Tj 0 0 0 rg (                     ) Tj T* 12 TL (19  ) Tj 1 0 0 rg (      "data") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( NetworkError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid URL") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (26  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( email_result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( validate_email) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("short") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( email_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( data_result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( fetch_data) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("short") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( data_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Display and JSON Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The error package provides ) Tj /F0 12 Tf (Show) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (ToJson) Tj /F0 12 Tf ( implementations:) Tj T* 12 TL T* ET
endstream
endobj
158 0 obj
<<
  /Type /Page  
  /Contents 157 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
159 0 obj
<<
  /Length 5645
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( MyError) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( derive) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ToJson) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error display and json") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Error) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( MyError) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error_string) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( error) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (error_string) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error_json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( error) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (error_json) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Array\([String\(\\"MyError\\"\), Number\(42\)]\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Propagation and Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Handle errors at different levels of your application:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( FileError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error propagation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( parse_number) Tj 0 0 0 rg (\() Tj 0 0 0 rg (s) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( s) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "42") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 1 rg (      42) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid number: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( s) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( read_and_parse) Tj 0 0 0 rg (\() Tj 0 0 0 rg (content) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    parse_number) Tj 0 0 0 rg (\() Tj 0 0 0 rg (content) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      ParseError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( FileError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Parse failed: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try!) Tj 0 0 0 rg ( read_and_parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (28  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( read_and_parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("invalid") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
160 0 obj
<<
  /Type /Page  
  /Contents 159 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
161 0 obj
<<
  /Length 3070
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Resource Management with Finally) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (protect) Tj /F0 12 Tf ( functions for resource cleanup:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ResourceError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "resource management") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( risky_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ResourceError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (    raise) Tj 0 0 0 rg ( ResourceError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Something went wrong") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( use_resource) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (    risky_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (      ResourceError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (        raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Operation failed after cleanup") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( use_resource) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Composition) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Combine multiple error-producing operations:) Tj T* 12 TL T* ET
endstream
endobj
162 0 obj
<<
  /Type /Page  
  /Contents 161 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
163 0 obj
<<
  /Length 5535
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ConfigError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( DatabaseError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error composition") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( load_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ConfigError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      "config_data") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( ConfigError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Config not found") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( connect_database) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( DatabaseError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( config) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "config_data") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      "connected") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( DatabaseError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid config") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( initialize_app) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( config) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( load_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (      ConfigError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Config error: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( db) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( connect_database) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (      DatabaseError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Database error: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 1 0 0 rg (    "App initialized with ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( db) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( app_result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try!) Tj 0 0 0 rg ( initialize_app) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (app_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("App initialized with connected") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use specific error types) Tj /F0 12 Tf (: Create custom ) Tj /F0 12 Tf (suberror) Tj /F0 12 Tf ( types for different error categ) Tj T* (ories) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Provide meaningful messages) Tj /F0 12 Tf (: Include context and actionable information in error) Tj T* ( messages) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Handle errors at appropriate levels) Tj /F0 12 Tf (: Don't catch errors too early; let them prop) Tj T* (agate to where they can be properly handled) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use ) Tj /F0 12 Tf (try!) Tj /F0 12 Tf ( for operations that should not fail) Tj /F0 12 Tf (: This will panic if an error occurs) Tj T* (, making failures visible during development) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use ) Tj /F0 12 Tf (try?) Tj /F0 12 Tf ( for recoverable errors) Tj /F0 12 Tf (: This returns a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( type that can be pattern ) Tj T* (matched) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Implement proper cleanup) Tj /F0 12 Tf (: Use the ) Tj /F0 12 Tf (protect) Tj /F0 12 Tf ( pattern or similar constructs for reso) Tj T* (urce management) Tj T* -10 0 Td 12 TL T* ET
endstream
endobj
164 0 obj
<<
  /Type /Page  
  /Contents 163 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
165 0 obj
<<
  /Length 3904
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Performance Notes) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Error handling in MoonBit is zero-cost when no errors occur) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Error propagation is efficient and doesn't require heap allocation for the error) Tj T* ( path) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Custom error types with ) Tj /F0 12 Tf (derive\(ToJson\)) Tj /F0 12 Tf ( automatically generate efficient JSON s) Tj T* (erialization) Tj T* 12 TL T* -10 0 Td 12 TL T* /F0 24 Tf (HashSet) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A mutable hash set based on a Robin Hood hash table.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create an empty set using ) Tj /F0 12 Tf (new\(\)) Tj /F0 12 Tf ( or construct it using ) Tj /F0 12 Tf (from_array\(\)) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _set1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _set2) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( HashSet) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Insert & Contain) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (insert\(\)) Tj /F0 12 Tf ( to add a key to the set, and ) Tj /F0 12 Tf (contains\(\)) Tj /F0 12 Tf ( to check whethe) Tj T* (r a key exists.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( HashSet) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Remove) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (remove\(\)) Tj /F0 12 Tf ( to remove a key.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( remove) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("a") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
166 0 obj
<<
  /Type /Page  
  /Contents 165 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
167 0 obj
<<
  /Length 4835
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Size & Capacity) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (size\(\)) Tj /F0 12 Tf ( to get the number of keys in the set, or ) Tj /F0 12 Tf (capacity\(\)) Tj /F0 12 Tf ( to ge) Tj T* (t the current capacity.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Similarly, you can use ) Tj /F0 12 Tf (is_empty\(\)) Tj /F0 12 Tf ( to check whether the set is empty.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( HashSet) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Clear) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (clear) Tj /F0 12 Tf ( to remove all keys from the set, but the allocated memory will) Tj T* ( not change.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iteration) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (each\(\)) Tj /F0 12 Tf ( or ) Tj /F0 12 Tf (eachi\(\)) Tj /F0 12 Tf ( to iterate through all keys.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( eachi) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( k) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( arr2) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( k) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Set Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can use ) Tj /F0 12 Tf (union\(\)) Tj /F0 12 Tf (, ) Tj /F0 12 Tf (intersection\(\)) Tj /F0 12 Tf (, ) Tj /F0 12 Tf (difference\(\)) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (symmetric_difference) Tj T* (\(\)) Tj /F0 12 Tf ( to perform set operations.) Tj T* 12 TL T* ET
endstream
endobj
168 0 obj
<<
  /Type /Page  
  /Contents 167 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
169 0 obj
<<
  /Length 5252
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( m1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( m2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "d") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( to_sorted_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @hashset) Tj 0 0 0 rg ( HashSet) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    arr) Tj 0 0 0 rg ( sort) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    arr) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m1) Tj 0 0 0 rg ( union) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m2) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( to_sorted_array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "d") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m1) Tj 0 0 0 rg ( intersection) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m2) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( to_sorted_array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m1) Tj 0 0 0 rg ( difference) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m2) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( to_sorted_array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m1) Tj 0 0 0 rg ( symmetric_difference) Tj 0 0 0 rg (\() Tj 0 0 0 rg (m2) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( |>) Tj 0 0 0 rg ( to_sorted_array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "d") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Rational \(DEPRECATED\)) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (\240\046\017\376 ) Tj /F1 12 Tf (This module is deprecated. Use ) Tj /F0 12 Tf (@rational) Tj /F0 12 Tf ( in module ) Tj /F0 12 Tf (moonbitlang/) Tj T* (x) Tj /F0 12 Tf ( instead. Note that you need to rename ) Tj /F0 12 Tf (Rational) Tj /F0 12 Tf ( to ) Tj /F0 12 Tf (Rational64) Tj /F0 12 Tf (.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Rational) Tj /F0 12 Tf ( type represents a rational number, which is a number that can be ex) Tj T* (pressed as a fraction ) Tj /F0 12 Tf (a/b) Tj /F0 12 Tf ( where ) Tj /F0 12 Tf (a) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (b) Tj /F0 12 Tf ( are integers and ) Tj /F0 12 Tf (b) Tj /F0 12 Tf ( is not zero.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (All tests and examples have been removed. Please refer to the new ) Tj /F0 12 Tf (moonbitlang/x) Tj /F0 12 Tf ( ) Tj T* (module for updated ) Tj /F0 12 Tf (documentation) Tj /F0 12 Tf ( and examples.) Tj T* 12 TL T* /F0 24 Tf (bool) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utility functions for working with boolean values in MoonB) Tj T* (it, primarily focused on type conversions that are useful in systems programming) Tj T* (, bitwise operations, and numerical computations.) Tj T* 12 TL T* /F0 20 Tf (Overview) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Boolean values in MoonBit can be seamlessly converted to numeric types, followin) Tj T* (g the standard convention where ) Tj /F0 12 Tf (true) Tj /F0 12 Tf ( maps to ) Tj /F0 12 Tf (1) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (false) Tj /F0 12 Tf ( maps to ) Tj /F0 12 Tf (0) Tj /F0 12 Tf (. This is part) Tj T* (icularly useful for:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Conditional arithmetic and accumulation) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Interfacing with C libraries or low-level code) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Implementing boolean algebra with numeric operations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Converting logical results to flags or indices) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Basic Integer Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert boolean values to standard integers for arithmetic operations:) Tj T* 12 TL T* ET
endstream
endobj
170 0 obj
<<
  /Type /Page  
  /Contents 169 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
171 0 obj
<<
  /Length 5208
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bool to integer conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( score) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bonus_applied) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( final_score) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( score) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( bonus_applied) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (final_score) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("150") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( conditions) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditions) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( cond) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( cond) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Specialized Integer Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (For specific use cases requiring different integer widths and signedness:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "bool to specialized integer types") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( flag) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( no_flag) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( false) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (flag) Tj 0 0 0 rg ( to_uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (no_flag) Tj 0 0 0 rg ( to_uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (flag) Tj 0 0 0 rg ( to_int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (no_flag) Tj 0 0 0 rg ( to_int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (flag) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (no_flag) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Use Cases) Tj 20 TL T* 12 TL T* /F0 16 Tf (Boolean Indexing and Selection) Tj 16 TL T* 12 TL T* ET
endstream
endobj
172 0 obj
<<
  /Type /Page  
  /Contents 171 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
173 0 obj
<<
  /Length 7956
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "boolean indexing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( options) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("default") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "enhanced") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( use_enhanced) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( selected) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( options) Tj 0 0 0 rg ([) Tj 0 0 0 rg (use_enhanced) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (selected) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("enhanced") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( base_value) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( multiplier) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( apply_multiplier) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( false) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( base_value) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( apply_multiplier) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (multiplier) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Bit Manipulation and Flags) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "flags and bit operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( read_permission) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( write_permission) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( false) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( execute_permission) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( permissions) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (read_permission) Tj 0 0 0 rg ( to_uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( |) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (write_permission) Tj 0 0 0 rg ( to_uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( |) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    execute_permission) Tj 0 0 0 rg ( to_uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (permissions) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Statistical and Mathematical Operations) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "statistical operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( successes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( test_results) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( total) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( test_results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( success_rate) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( successes) Tj 0 0 0 rg ( to_double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( total) Tj 0 0 0 rg ( to_double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (success_rate) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0.7) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                            ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( feature_enabled) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( weights) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (0.6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0.3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0.1) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                                              ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( score1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( feature_enabled) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( weights) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( score2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( feature_enabled) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( weights) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( score3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( feature_enabled) Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( weights) Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( weighted_score) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( score1) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( score2) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( score3) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (weighted_score) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0.7) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
174 0 obj
<<
  /Type /Page  
  /Contents 173 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
175 0 obj
<<
  /Length 2766
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides the essential bridge between MoonBit's boolean logic and n) Tj T* (umeric computations, enabling elegant solutions for conditional arithmetic, flag) Tj T* ( operations, and data processing workflows.) Tj T* 12 TL T* /F0 24 Tf (Coverage Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides code coverage tracking utilities for MoonBit programs. It ) Tj T* (includes tools for measuring which parts of your code are executed during testin) Tj T* (g and generating coverage reports.) Tj T* 12 TL T* /F0 20 Tf (Coverage Counter) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The core component for tracking code execution:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage counter basics") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[0, 0, 0, 0, 0]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 0, 1, 0, 0]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Tracking Code Execution) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use coverage counters to track which code paths are executed:) Tj T* 12 TL T* ET
endstream
endobj
176 0 obj
<<
  /Type /Page  
  /Contents 175 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
177 0 obj
<<
  /Length 3745
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "tracking execution paths") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (7   ) Tj 1 0 0 rg (      "positive") Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (10  ) Tj 1 0 0 rg (      "negative") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (             ) Tj T* 12 TL (13  ) Tj 1 0 0 rg (      "zero") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("positive") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("negative") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( conditional_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 1, 1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Loop Coverage Tracking) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Track coverage in loops and iterations:) Tj T* 12 TL T* ET
endstream
endobj
178 0 obj
<<
  /Type /Page  
  /Contents 177 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
179 0 obj
<<
  /Length 3810
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "loop coverage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( process_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( %) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                          ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (        sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (        sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    sum) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (                       ) Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( process_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (test_data) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                                                    ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("24") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( coverage_str) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (coverage_str) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Function Coverage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Track coverage across different functions:) Tj T* 12 TL T* ET
endstream
endobj
180 0 obj
<<
  /Type /Page  
  /Contents 179 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
181 0 obj
<<
  /Length 5027
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "function coverage") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    op) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( op) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      "add") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (        a) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (      "sub") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (        a) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      "mul") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (        a) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (      _) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (        coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 1 0 1 rg (        0) Tj 0 0 0 rg (                     ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (31  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( add_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "add") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (add_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("15") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sub_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "sub") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sub_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( unknown_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( math_operations) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "unknown") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (unknown_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (                                                    ) Tj T* 12 TL (39  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( final_coverage) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (40  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (final_coverage) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 1, 0, 1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (41  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Coverage Analysis) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Analyze coverage data to understand code execution:) Tj T* 12 TL T* ET
endstream
endobj
182 0 obj
<<
  /Type /Page  
  /Contents 181 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
183 0 obj
<<
  /Length 4862
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage analysis") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (input) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( input) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (      return) Tj 1 0 0 rg ( "negative") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( input) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (               ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (      return) Tj 1 0 0 rg ( "zero") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( input) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (      coverage) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                       ) Tj T* 12 TL (18  ) Tj 1 0 0 rg (      "large") Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (      "small") Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("negative") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result3) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( complex_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("small") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( coverage) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (                                                                                                             ) Tj T* 12 TL (35  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (coverage) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Integration with Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Coverage tracking integrates with MoonBit's testing system:) Tj T* 12 TL T* ET
endstream
endobj
184 0 obj
<<
  /Type /Page  
  /Contents 183 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
185 0 obj
<<
  /Length 3269
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "testing integration") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                           ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( test_function_with_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                                ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg ( helper) Tj 0 0 0 rg (\() Tj 0 0 0 rg (condition) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( cov) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( condition) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (        cov) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (        "true_branch") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (      }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (        cov) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (        "false_branch") Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( helper) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( helper) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    result1) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "true_branch") Tj 0 0 0 rg ( &&) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "false_branch") Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_passed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( test_function_with_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (test_passed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Coverage Reporting) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Generate and analyze coverage reports:) Tj T* 12 TL T* ET
endstream
endobj
186 0 obj
<<
  /Type /Page  
  /Contents 185 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
187 0 obj
<<
  /Length 5018
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage reporting") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( CoverageCounter) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  counter) Tj 0 0 0 rg ( incr) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( counter) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[2, 0, 1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( analyze_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_coverage_str) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                                                     ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                  ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                            ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (covered) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( total) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( analyze_coverage) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (covered) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (total) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (1. Automatic Coverage Generation) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (In real applications, coverage tracking is typically generated automatically:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (                                                               ) Tj T* 12 TL (3   ) Tj 0 0 1 rg (fn) Tj 0 0 0 rg ( example_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                       ) Tj T* 12 TL (7   ) Tj 1 0 0 rg (    "positive") Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                       ) Tj T* 12 TL (10  ) Tj 1 0 0 rg (    "non-positive") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "automatic coverage concept") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( example_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("positive") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (2. Coverage-Driven Testing) Tj 16 TL T* 12 TL T* ET
endstream
endobj
188 0 obj
<<
  /Type /Page  
  /Contents 187 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
189 0 obj
<<
  /Length 4783
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (Use coverage information to improve test quality:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "coverage driven testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( multi_branch_function) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 1 0 0 rg (      "greater") Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 1 0 0 rg (      "less") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      "equal") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (multi_branch_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("greater") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (multi_branch_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("less") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (multi_branch_function) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("equal") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Integration with Build System) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Coverage tracking integrates with MoonBit's build tools:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon test) Tj /F0 12 Tf ( to run tests with coverage tracking) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (moon coverage analyze) Tj /F0 12 Tf ( to generate coverage reports) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Coverage data helps identify untested code paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Supports both line coverage and branch coverage analysis) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Coverage tracking adds minimal runtime overhead) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Counters use efficient fixed arrays for storage) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Coverage instrumentation is typically removed in release builds) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use coverage data to optimize test suite performance) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Common Use Cases) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Test Quality Assessment) Tj /F0 12 Tf (: Ensure comprehensive test coverage) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Dead Code Detection) Tj /F0 12 Tf (: Find unused code paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Regression Testing) Tj /F0 12 Tf (: Verify that tests exercise the same code paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Performance Analysis) Tj /F0 12 Tf (: Identify frequently executed code for optimization) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Code Review) Tj /F0 12 Tf (: Understand which parts of code are well-tested) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The coverage package provides essential tools for maintaining high-quality, well) Tj T* (-tested MoonBit code through comprehensive coverage analysis.) Tj T* 12 TL T* ET
endstream
endobj
190 0 obj
<<
  /Type /Page  
  /Contents 189 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
191 0 obj
<<
  /Length 3908
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (MoonBit Float Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides operations on 32-bit floating-point numbers \() Tj /F0 12 Tf (Float) Tj /F0 12 Tf (\). It ) Tj T* (includes basic arithmetic, trigonometric functions, exponential and logarithmic ) Tj T* (functions, as well as utility functions for rounding and conversion.) Tj T* 12 TL T* /F0 20 Tf (Special Values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package defines several special floating-point values:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "special float values") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( infinity) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Infinity") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( neg_infinity) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-Infinity") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( not_a_number) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("NaN") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (           ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3.4028234663852886e+38") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-3.4028234663852886e+38") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( min_positive) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.1754943508222875e-38") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "checking special values") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( infinity) Tj 0 0 0 rg ( is_inf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( neg_infinity) Tj 0 0 0 rg ( is_neg_inf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( infinity) Tj 0 0 0 rg ( is_pos_inf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( not_a_number) Tj 0 0 0 rg ( is_nan) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Rounding Functions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides various ways to round floating-point numbers:) Tj T* 12 TL T* ET
endstream
endobj
192 0 obj
<<
  /Type /Page  
  /Contents 191 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
193 0 obj
<<
  /Length 5665
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "rounding functions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( ceil) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( ceil) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( floor) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( floor) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( round) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( round) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( trunc) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( trunc) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Utility Functions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Other useful operations on floats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "utility functions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.14) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3.140000104904175") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.14) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@float) Tj 0 0 0 rg ( default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Byte Representation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Functions to convert floats to their byte representation:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte representation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Float) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 3.14) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (be_bytes) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (le_bytes) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Method Style) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (All functions can also be called in method style:) Tj T* ET
endstream
endobj
194 0 obj
<<
  /Type /Page  
  /Contents 193 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
195 0 obj
<<
  /Length 5212
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "method style calls") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Float) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 3.14) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( floor) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( ceil) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( round) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( y) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Float) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 2.0) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (y) Tj 0 0 0 rg ( pow) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (int16) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides a fixed-width 16-bit signed integer type.) Tj T* 12 TL T* /F0 20 Tf (Range and Constants) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Int16) Tj /F0 12 Tf ( type represents values from -32768 to 32767 \(inclusive\). The package) Tj T* ( provides these boundary values as constants:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "int16 range") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int16) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-32768") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int16) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("32767") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Arithmetic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Int16) Tj /F0 12 Tf ( type supports standard arithmetic operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "int16 arithmetic") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("150") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5000") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( max) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @int16) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( min) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @int16) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (max) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-32768") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (min) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("32767") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Bitwise Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Int16) Tj /F0 12 Tf ( supports standard bitwise operations:) Tj T* 12 TL T* ET
endstream
endobj
196 0 obj
<<
  /Type /Page  
  /Contents 195 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
197 0 obj
<<
  /Length 5731
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "int16 bitwise") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1010) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( &) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( |) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("14") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (          ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ^) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (          ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("16") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (              ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( >>) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (               ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Int16) Tj /F0 12 Tf ( implements the ) Tj /F0 12 Tf (Compare) Tj /F0 12 Tf ( trait for total ordering:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "int16 comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( c) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (             ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( compare) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Default Value) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Int16) Tj /F0 12 Tf ( implements the ) Tj /F0 12 Tf (Default) Tj /F0 12 Tf ( trait, with 0 as its default value:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "int16 default") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg (::) Tj 0 0 0 rg (default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Type Coercion and Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Integer literals can be coerced to ) Tj /F0 12 Tf (Int16) Tj /F0 12 Tf ( when the type is explicitly specified:) Tj T* ET
endstream
endobj
198 0 obj
<<
  /Type /Page  
  /Contents 197 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
199 0 obj
<<
  /Length 5879
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "int16 coercion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0xFF) Tj 0 0 0 rg (                       ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( c) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int16) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1111) Tj 0 0 0 rg (                  ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("255") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("15") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Set Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides a hash-based set data structure that maintains insertion o) Tj T* (rder. The ) Tj /F0 12 Tf (Set[K]) Tj /F0 12 Tf ( type stores unique elements and provides efficient membership t) Tj T* (esting, insertion, and deletion operations.) Tj T* 12 TL T* /F0 20 Tf (Creating Sets) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (There are several ways to create sets:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "creating sets") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (              ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty_set) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty_set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty_set) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set_with_capacity) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (capacity) Tj 0 0 0 rg (=) Tj 1 0 1 rg (16) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set_with_capacity) Tj 0 0 0 rg ( capacity) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("16") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                          ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (from_array) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( from_fixed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (from_fixed) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( from_iter) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (from_iter) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Basic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Add, remove, and check membership:) Tj T* 12 TL T* ET
endstream
endobj
200 0 obj
<<
  /Type /Page  
  /Contents 199 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
201 0 obj
<<
  /Length 4861
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("apple") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("banana") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("cherry") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("apple") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (           ) Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("apple") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("orange") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( remove) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("banana") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("banana") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( was_added) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( add_and_check) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("date") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (was_added) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( was_added_again) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( add_and_check) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("date") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (was_added_again) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (29  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( was_removed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( remove_and_check) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("cherry") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (was_removed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( was_removed_again) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( remove_and_check) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("cherry") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (was_removed_again) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (33  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Set Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Perform mathematical set operations:) Tj T* 12 TL T* ET
endstream
endobj
202 0 obj
<<
  /Type /Page  
  /Contents 201 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
203 0 obj
<<
  /Length 6171
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "set operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( union_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( union) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( union_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( union_set) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (union_array) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( union_alt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( |) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (union_alt) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( intersection_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( intersection) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( intersection_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( intersection_set) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (intersection_array) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (          ) Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( intersection_alt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( &) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (intersection_alt) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                                                  ) Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( difference_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( difference) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( difference_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( difference_set) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (difference_array) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (          ) Tj T* 12 TL (28  ) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (30  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( difference_alt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (difference_alt) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 0 rg (                                                           ) Tj T* 12 TL (34  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sym_diff_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( symmetric_difference) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sym_diff_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sym_diff_set) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sym_diff_array) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                ) Tj T* 12 TL (37  ) Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (39  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sym_diff_alt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( ^) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg () Tj T* 12 TL (40  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sym_diff_alt) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (41  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Set Relationships) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Test relationships between sets:) Tj T* 12 TL T* ET
endstream
endobj
204 0 obj
<<
  /Type /Page  
  /Contents 203 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
205 0 obj
<<
  /Length 4286
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "set relationships") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( small_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( disjoint_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small_set) Tj 0 0 0 rg ( is_subset) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg ( is_subset) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg ( is_superset) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small_set) Tj 0 0 0 rg ( is_superset) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small_set) Tj 0 0 0 rg ( is_disjoint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (disjoint_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (small_set) Tj 0 0 0 rg ( is_disjoint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( set2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iteration and Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterate over sets and convert to other types:) Tj T* 12 TL T* ET
endstream
endobj
206 0 obj
<<
  /Type /Page  
  /Contents 205 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
207 0 obj
<<
  /Length 6515
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "iteration and conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("first") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "second") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "third") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_element) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( indices_sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( eachi) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( _element) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( indices_sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( indices_sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (indices_sum) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( elements) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (elements) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( copied_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( copy) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (copied_set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (copied_set) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( set) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Modifying Sets) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Clear and modify existing sets:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "modifying sets") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 40) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 1 rg (100) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 1 0 1 rg (200) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (100) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (JSON Serialization) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Sets can be serialized to JSON as arrays:) Tj T* 12 TL T* ET
endstream
endobj
208 0 obj
<<
  /Type /Page  
  /Contents 207 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
209 0 obj
<<
  /Length 5581
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json serialization") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( set) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Array\([Number\(1\), Number\(2\), Number\(3\)]\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (               ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( string_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("a") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "c") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( string_json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( string_set) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    string_json) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Array\([String\(\\"a\\"\), String\(\\"b\\"\), String\(\\"c\\"\)]\)") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Different Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Sets work with any type that implements ) Tj /F0 12 Tf (Hash) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (Eq) Tj /F0 12 Tf (:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "different types") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( int_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (int_set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (               ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( string_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "world") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "moonbit") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (string_set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("world") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                                   ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( char_codes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (97) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 98) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 99) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (char_codes) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (98) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (            ) Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bool_codes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                   ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bool_codes) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Performance Examples) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Demonstrate efficient operations:) Tj T* 12 TL T* ET
endstream
endobj
210 0 obj
<<
  /Type /Page  
  /Contents 209 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
211 0 obj
<<
  /Length 4738
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "performance examples") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (capacity) Tj 0 0 0 rg (=) Tj 1 0 1 rg (1000) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (100) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    large_set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (50) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_set) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (150) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                                           ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( another_set) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @set) Tj 0 0 0 rg ( Set) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (150) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    another_set) Tj 0 0 0 rg ( add) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( intersection) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( large_set) Tj 0 0 0 rg ( intersection) Tj 0 0 0 rg (\() Tj 0 0 0 rg (another_set) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (intersection) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Use Cases) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Sets are particularly useful for:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Removing duplicates) Tj /F0 12 Tf (: Convert arrays to sets and back to remove duplicates) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Membership testing) Tj /F0 12 Tf (: Fast O\(1\) average-case lookups) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Mathematical operations) Tj /F0 12 Tf (: Union, intersection, difference operations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Unique collections) Tj /F0 12 Tf (: Maintaining collections of unique items) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Algorithm implementation) Tj /F0 12 Tf (: Graph algorithms, caching, etc.) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Characteristics) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Insertion) Tj /F0 12 Tf (: O\(1\) average case, O\(n\) worst case) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Removal) Tj /F0 12 Tf (: O\(1\) average case, O\(n\) worst case) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Lookup) Tj /F0 12 Tf (: O\(1\) average case, O\(n\) worst case) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Space complexity) Tj /F0 12 Tf (: O\(n\) where n is the number of elements) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Iteration order) Tj /F0 12 Tf (: Maintains insertion order \(linked hash set\)) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* ET
endstream
endobj
212 0 obj
<<
  /Type /Page  
  /Contents 211 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
213 0 obj
<<
  /Length 4036
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Pre-size when possible) Tj /F0 12 Tf (: Use ) Tj /F0 12 Tf (@set.Set::new\(capacity=n\)) Tj /F0 12 Tf ( if you know the approxim) Tj T* (ate size) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use appropriate types) Tj /F0 12 Tf (: Ensure your key type has good ) Tj /F0 12 Tf (Hash) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (Eq) Tj /F0 12 Tf ( implementations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Prefer set operations) Tj /F0 12 Tf (: Use built-in union, intersection, etc. instead of manual ) Tj T* (loops) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Check return values) Tj /F0 12 Tf (: Use ) Tj /F0 12 Tf (add_and_check) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (remove_and_check) Tj /F0 12 Tf ( when you need to kno) Tj T* (w if the operation succeeded) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Consider memory usage) Tj /F0 12 Tf (: Sets have overhead compared to arrays for small collectio) Tj T* (ns) Tj T* 12 TL T* -10 0 Td 12 TL T* /F0 24 Tf (buffer) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The buffer package provides a flexible byte buffer implementation for efficient ) Tj T* (binary data handling and serialization.) Tj T* 12 TL T* /F0 20 Tf (Basic Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create a new buffer and write basic data:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic buffer operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg (..) Tj 0 0 0 rg (write_byte) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'H') Tj 0 0 0 rg (\)) Tj 0 0 0 rg (..) Tj 0 0 0 rg (write_byte) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'i') Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (buf) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (buf) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 1 0 0 rg (      #|b"\\x48\\x69") Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (22  ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( reset) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (buf) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Writing Numbers) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Write numbers in different encodings:) Tj T* 12 TL T* ET
endstream
endobj
214 0 obj
<<
  /Type /Page  
  /Contents 213 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
215 0 obj
<<
  /Length 4260
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "number serialization") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_int_be) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_int_le) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (     to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x00\\x2a\\x2a\\x00\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_float_be) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.14) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_float_le) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.14) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (     to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (      #|b"\\x40\\x48\\xf5\\xc3\\xc3\\xf5\\x48\\x40") Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (    @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_int64_be) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0xAABBCCDDEEL) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_int64_le) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0xAABBCCDDEEL) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (     to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x00\\xaa\\xbb\\xcc\\xdd\\xee\\xee\\xdd\\xcc\\xbb\\xaa\\x00\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg (    @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (36  ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_uint_be) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0x2077U) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg (    ..) Tj 0 0 0 rg (write_uint_le) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0x2077U) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (     to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (39  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (40  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x20\\x77\\x77\\x20\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (41  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (42  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (43  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Writing Byte Sequences) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Write sequences of bytes:) Tj T* 12 TL T* ET
endstream
endobj
216 0 obj
<<
  /Type /Page  
  /Contents 215 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
217 0 obj
<<
  /Length 3306
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte sequence writing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                     ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( b"Hello") Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    contents) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (      #|b"\\x48\\x65\\x6c\\x6c\\x6f\\x48\\x65\\x6c\\x6c\\x6f") Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg (                         ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Writing Structured Data) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Write structured data that implements Show:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "object writing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_object) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    contents) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 1 0 0 rg (      #|b"\\x34\\x00\\x32\\x00") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Size Hints) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Provide size hints for better performance:) Tj T* 12 TL T* ET
endstream
endobj
218 0 obj
<<
  /Type /Page  
  /Contents 217 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
219 0 obj
<<
  /Length 4499
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "buffer with size hint") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size_hint) Tj 0 0 0 rg (=) Tj 1 0 1 rg (1024) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (100) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    buf) Tj 0 0 0 rg ( write_int_le) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (buf) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("400") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Buffer as Logger) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The buffer implements the Logger trait for Show:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "buffer as logger") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  array) Tj 0 0 0 rg ( output) Tj 0 0 0 rg (\() Tj 0 0 0 rg (buf) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    contents) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      #|b"\\x5b\\x00\\x31\\x00\\x2c\\x00\\x20\\x00\\x32\\x00\\x2c\\x00\\x20\\x00\\x33\\x00\\x5d\\x00") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Converting to String/Bytes) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Methods for converting buffer contents:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "buffer conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_byte) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'a') Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_byte) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'b') Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_byte) Tj 0 0 0 rg (\() Tj 1 0 1 rg (b'c') Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      #|b"\\x61\\x62\\x63") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
220 0 obj
<<
  /Type /Page  
  /Contents 219 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
221 0 obj
<<
  /Length 2258
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Binary Viewing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Support for viewing subsets of bytes:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte view writing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @buffer) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( b"Hello World") Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  buf) Tj 0 0 0 rg ( write_bytesview) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (:) Tj 1 0 1 rg (5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( contents) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( buf) Tj 0 0 0 rg ( to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    contents) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      #|b"\\x48\\x65\\x6c\\x6c\\x6f") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Random) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This is an efficient random number generation function based on the paper ) Tj /F0 12 Tf (Fast R) Tj T* (andom Integer Generation in an Interval) Tj /F0 12 Tf ( by Daniel Lemire, as well as the Golang') Tj T* (s ) Tj /F0 12 Tf (rand/v2) Tj /F0 12 Tf ( package.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Internally, it uses the ) Tj /F0 12 Tf (Chacha8) Tj /F0 12 Tf ( cipher to generate random numbers. It is a crypt) Tj T* (ographically secure pseudo-random number generator \(CSPRNG\) that is also very ) Tj T* (fast.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* ET
endstream
endobj
222 0 obj
<<
  /Type /Page  
  /Contents 221 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
223 0 obj
<<
  /Length 6508
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( r) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @random) Tj 0 0 0 rg ( Rand) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (limit) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (limit) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (limit) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1064320769) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0.3318940049218405) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (limit) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( uint) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 311122750) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2043189202271773519) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (limit) Tj 0 0 0 rg (=) Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (r) Tj 0 0 0 rg ( uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3951155890335085418) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  r) Tj 0 0 0 rg ( shuffle) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( j) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( t) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ([) Tj 0 0 0 rg (i) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    a) Tj 0 0 0 rg ([) Tj 0 0 0 rg (i) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ([) Tj 0 0 0 rg (j) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    a) Tj 0 0 0 rg ([) Tj 0 0 0 rg (j) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( t) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Strconv) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package implements conversions to and from string representations of basic ) Tj T* (data types.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Parse) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (parse_bool) Tj /F0 12 Tf (, ) Tj /F0 12 Tf (parse_double) Tj /F0 12 Tf (, ) Tj /F0 12 Tf (parse_int) Tj /F0 12 Tf (, and ) Tj /F0 12 Tf (parse_int64) Tj /F0 12 Tf ( convert strings to valu) Tj T* (es.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @strconv) Tj 0 0 0 rg ( parse_bool) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( i1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @strconv) Tj 0 0 0 rg ( parse_int) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("1234567") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1234567) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( i2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @strconv) Tj 0 0 0 rg ( parse_int) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("101") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( base) Tj 0 0 0 rg (=) Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( d) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @strconv) Tj 0 0 0 rg ( parse_double) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("123.4567") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (d) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 123.4567) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (For types that implement the ) Tj /F0 12 Tf (FromStr) Tj /F0 12 Tf ( trait, you can also use helper function ) Tj /F0 12 Tf (par) Tj T* (se) Tj /F0 12 Tf ( to convert a string to a value.) Tj T* 12 TL T* ET
endstream
endobj
224 0 obj
<<
  /Type /Page  
  /Contents 223 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
225 0 obj
<<
  /Length 4455
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @strconv) Tj 0 0 0 rg ( parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("123") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 123) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @strconv) Tj 0 0 0 rg ( parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Option) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( type is a built-in type in MoonBit that represents an optional value.) Tj T* ( The type annotation ) Tj /F0 12 Tf (Option[A]) Tj /F0 12 Tf ( can also be written as ) Tj /F0 12 Tf (A?) Tj /F0 12 Tf (.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (It is an enum with two variants: ) Tj /F0 12 Tf (Some\(T\)) Tj /F0 12 Tf (, which represents a value of type ) Tj /F0 12 Tf (T) Tj /F0 12 Tf (, ) Tj T* (and ) Tj /F0 12 Tf (None) Tj /F0 12 Tf (, representing no value.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Note that some methods of the Option are defined in the ) Tj /F0 12 Tf (core/builtin) Tj /F0 12 Tf ( package.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create an ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( value using the ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( constructors, remember to) Tj T* ( give proper type annotations.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( None) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (some) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(42\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (none) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Extracting values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can extract the value from an ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( using the ) Tj /F0 12 Tf (match) Tj /F0 12 Tf ( expression \(Pattern Ma) Tj T* (tching\).) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( j) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( match) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( value) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( abort) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("unreachable") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (j) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Or using the ) Tj /F0 12 Tf (unwrap) Tj /F0 12 Tf ( method, which will panic if the result is ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( and return th) Tj T* (e value if it is ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf (.) Tj T* 12 TL T* ET
endstream
endobj
226 0 obj
<<
  /Type /Page  
  /Contents 225 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
227 0 obj
<<
  /Length 5751
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (      ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A safer alternative to ) Tj /F0 12 Tf (unwrap) Tj /F0 12 Tf ( is the ) Tj /F0 12 Tf (or) Tj /F0 12 Tf ( method, which returns the value if it is) Tj T* ( ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf (, otherwise, it returns the default value.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( None) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( unwrap_or) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (     ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (There is also the ) Tj /F0 12 Tf (or_else) Tj /F0 12 Tf ( method, which returns the value if it is ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf (, otherwi) Tj T* (se, it returns the result of the provided function.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( None) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( unwrap_or_else) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (     ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Transforming values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can transform the value of an ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( using the ) Tj /F0 12 Tf (map) Tj /F0 12 Tf ( method. It applies the pr) Tj T* (ovided function to the value if it is ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf (, otherwise, it returns ) Tj /F0 12 Tf (None) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_some) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( map) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (            ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_some) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (43) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (There is a ) Tj /F0 12 Tf (filter) Tj /F0 12 Tf ( method that applies a predicate to the value if it is ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf (, ot) Tj T* (herwise, it returns ) Tj /F0 12 Tf (None) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_some) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( filter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 40) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (            ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( filter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (        ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_some) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (none) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( None) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Monadic operations) Tj 20 TL T* 12 TL T* ET
endstream
endobj
228 0 obj
<<
  /Type /Page  
  /Contents 227 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
229 0 obj
<<
  /Length 4785
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (You can chain multiple operations that return ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( using the ) Tj /F0 12 Tf (bind) Tj /F0 12 Tf ( method, whic) Tj T* (h applies a function to the value if it is ) Tj /F0 12 Tf (Some) Tj /F0 12 Tf (, otherwise, it returns ) Tj /F0 12 Tf (None) Tj /F0 12 Tf (. Dif) Tj T* (ferent from ) Tj /F0 12 Tf (map) Tj /F0 12 Tf (, the function in argument returns an ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_some) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( bind) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (            ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_some) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (43) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Sometimes we want to reduce the nested ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf ( values into a single ) Tj /F0 12 Tf (Option) Tj /F0 12 Tf (, you c) Tj T* (an use the ) Tj /F0 12 Tf (flatten) Tj /F0 12 Tf ( method to achieve this. It transforms ) Tj /F0 12 Tf (Some\(Some\(value\)\)) Tj /F0 12 Tf ( i) Tj T* (nto ) Tj /F0 12 Tf (Some\(value\)) Tj /F0 12 Tf (, and ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( otherwise.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_some) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( some) Tj 0 0 0 rg ( flatten) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (            ) Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_some) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (?) Tj 0 0 0 rg (?) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (None) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( new_none) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( none) Tj 0 0 0 rg ( flatten) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (        ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (new_none) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( None) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (uint64) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (moonbitlang/core/uint64) Tj /F0 12 Tf ( package provides functionality for working with 64-b) Tj T* (it unsigned integers. This package includes constants, operators, and conversion) Tj T* (s for UInt64 values.) Tj T* 12 TL T* /F0 20 Tf (Constants) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package defines the minimum and maximum values for UInt64:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 constants") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint64) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint64) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("18446744073709551615") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Arithmetic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 supports standard arithmetic operations:) Tj T* 12 TL T* ET
endstream
endobj
230 0 obj
<<
  /Type /Page  
  /Contents 229 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
231 0 obj
<<
  /Length 5141
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 arithmetic") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100UL) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 50UL) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("150") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( -) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("50") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5000") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (             ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint64) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1UL) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint64) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1UL) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("18446744073709551615") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Bitwise Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 supports various bitwise operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 bitwise operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1010UL) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0b1100UL) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( &) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (               ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( |) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("14") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ^) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("20") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("40") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >>) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( >>) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Comparison and Equality) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 supports comparison and equality operations:) Tj T* 12 TL T* ET
endstream
endobj
232 0 obj
<<
  /Type /Page  
  /Contents 231 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
233 0 obj
<<
  /Length 4295
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 comparison and equality") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100UL) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 50UL) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( c) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100UL) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (             ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( !=) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (               ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( >=) Tj 0 0 0 rg ( c) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (c) Tj 0 0 0 rg ( <=) Tj 0 0 0 rg ( a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Byte Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 provides methods for converting to bytes in both big-endian and little-en) Tj T* (dian formats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 byte conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                       ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0x123456789ABCDEF0UL) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    be_bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 1 0 0 rg (      #|b"\\x12\\x34\\x56\\x78\\x9a\\xbc\\xde\\xf0") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                                           ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le_bytes) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0x123456789ABCDEF0UL) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    le_bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 1 0 0 rg (      #|b"\\xf0\\xde\\xbc\\x9a\\x78\\x56\\x34\\x12") Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Default Value and Hashing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 implements the Default trait:) Tj T* 12 TL T* ET
endstream
endobj
234 0 obj
<<
  /Type /Page  
  /Contents 233 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
235 0 obj
<<
  /Length 5410
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 default value") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0UL) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42UL) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( hash) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1962516083") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Type Conversions) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 works with various conversions to and from other types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 100UL) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( to_int) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( as_double) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( to_double) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (as_double) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("100") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("18446744073709551615") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( from_double) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42.0) Tj 0 0 0 rg ( to_uint64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (from_double) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Large Numbers) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt64 is especially useful for applications requiring large unsigned integers:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 for large numbers") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_number) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1UL) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 63) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1UL) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                  ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_number) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1UL) Tj 0 0 0 rg ( <<) Tj 1 0 1 rg ( 32) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( -) Tj 1 0 1 rg ( 1UL) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                             ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( large_number) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2UL) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("18446744073709551614") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working with Hexadecimal Literals) Tj 20 TL T* 12 TL T* ET
endstream
endobj
236 0 obj
<<
  /Type /Page  
  /Contents 235 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
237 0 obj
<<
  /Length 4153
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (UInt64 works well with hexadecimal literals for clarity when working with bit pa) Tj T* (tterns:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "UInt64 hexadecimal literals") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                                                             ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0xDEADBEEFUL) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( ad) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (value) Tj 0 0 0 rg ( >>) Tj 1 0 1 rg ( 16) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( &) Tj 1 0 1 rg ( 0xFFUL) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ad) Tj 0 0 0 rg ( to_byte) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("b'\\\\xAD'") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( value) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x00\\x00\\xde\\xad\\xbe\\xef") Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Queue) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Queue is a first in first out \(FIFO\) data structure, allowing to process their) Tj T* ( elements in the order they come.) Tj T* 12 TL T* /F0 24 Tf (Usage) Tj 24 TL T* 12 TL T* /F0 20 Tf (Create and Clear) Tj 20 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create a queue manually by using the ) Tj /F0 12 Tf (new) Tj /F0 12 Tf ( or construct it using the ) Tj /F0 12 Tf (from_) Tj T* (array) Tj /F0 12 Tf (.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _queue) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( Queue) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _queue1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (To clear the queue, you can use the ) Tj /F0 12 Tf (clear) Tj /F0 12 Tf ( method.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  queue) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Length) Tj 20 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can get the length of the queue by using the ) Tj /F0 12 Tf (length) Tj /F0 12 Tf ( method. The ) Tj /F0 12 Tf (is_empty) Tj /F0 12 Tf ( met) Tj T* (hod can be used to check if the queue is empty.) Tj T* ET
endstream
endobj
238 0 obj
<<
  /Type /Page  
  /Contents 237 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
239 0 obj
<<
  /Length 5497
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Pop and Push) Tj 20 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can add elements to the queue using the ) Tj /F0 12 Tf (push) Tj /F0 12 Tf ( method and remove them using th) Tj T* (e ) Tj /F0 12 Tf (pop) Tj /F0 12 Tf ( method.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  queue) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  queue) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue) Tj 0 0 0 rg ( pop) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue) Tj 0 0 0 rg ( pop) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Peek) Tj 20 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can get the first element of the queue without removing it using the ) Tj /F0 12 Tf (peek) Tj /F0 12 Tf ( me) Tj T* (thod.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (queue) Tj 0 0 0 rg ( peek) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Traverse) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can traverse the queue using the ) Tj /F0 12 Tf (each) Tj /F0 12 Tf ( method.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  queue) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +=) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can fold the queue using the ) Tj /F0 12 Tf (fold) Tj /F0 12 Tf ( method.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Copy and Transfer) Tj 20 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can copy a queue using the ) Tj /F0 12 Tf (copy) Tj /F0 12 Tf ( method.) Tj T* ET
endstream
endobj
240 0 obj
<<
  /Type /Page  
  /Contents 239 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
241 0 obj
<<
  /Length 4239
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _queue2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( queue) Tj 0 0 0 rg ( copy) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Transfer the elements from one queue to another using the ) Tj /F0 12 Tf (transfer) Tj /F0 12 Tf ( method.) Tj T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( dst) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( Queue) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( src) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( Queue) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @queue) Tj 0 0 0 rg ( of) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  src) Tj 0 0 0 rg ( transfer) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dst) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (double) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides comprehensive support for double-precision floating-point ) Tj T* (arithmetic, including basic operations, trigonometric functions, exponential and) Tj T* ( logarithmic functions, as well as utility functions for handling special values) Tj T* (.) Tj T* 12 TL T* /F0 20 Tf (Constants and Special Values) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides several important constants and special floating-point valu) Tj T* (es:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "special values") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( infinity) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Infinity") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( neg_infinity) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-Infinity") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( not_a_number) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("NaN") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (           ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1.7976931348623157e+308") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1.7976931348623157e+308") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( min_positive) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2.2250738585072014e-308") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Basic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Basic mathematical operations and rounding functions:) Tj T* 12 TL T* ET
endstream
endobj
242 0 obj
<<
  /Type /Page  
  /Contents 241 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
243 0 obj
<<
  /Length 5317
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                   ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.14) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3.14") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( floor) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( ceil) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( round) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( trunc) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3.7) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("3") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2.0) Tj 0 0 0 rg ( pow) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("8") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (         ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (3.14) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( signum) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2.0) Tj 0 0 0 rg ( signum) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( from_int) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Special Value Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Functions for testing special floating-point values and comparing numbers:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "special value testing") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( not_a_number) Tj 0 0 0 rg ( is_nan) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( infinity) Tj 0 0 0 rg ( is_inf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( infinity) Tj 0 0 0 rg ( is_pos_inf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( neg_infinity) Tj 0 0 0 rg ( is_neg_inf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( relative_tolerance) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1.e-9) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@double) Tj 0 0 0 rg ( is_close) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0.1) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 0.2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0.3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( relative_tolerance~) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Binary Representation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Functions for converting doubles to their binary representation:) Tj T* 12 TL T* ET
endstream
endobj
244 0 obj
<<
  /Type /Page  
  /Contents 243 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
245 0 obj
<<
  /Length 3272
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "binary representation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1.0) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                  ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                           ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    num) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      #|b"\\x3f\\xf0\\x00\\x00\\x00\\x00\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    num) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x00\\x00\\x00\\x00\\xf0\\x3f") Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Note: Most methods can be called either as a method \() Tj /F0 12 Tf (d.to_be_bytes\(\)) Tj /F0 12 Tf (\) or as ) Tj T* (a package function \() Tj /F0 12 Tf (@double.to_be_bytes\(d\)) Tj /F0 12 Tf (\).) Tj T* 12 TL T* /F0 24 Tf (Sorted Map) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (A mutable map backed by an AVL tree that maintains keys in sorted order.) Tj T* 12 TL T* /F0 20 Tf (Overview) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (SortedMap is an ordered map implementation that keeps entries sorted by keys. It) Tj T* ( provides efficient lookup, insertion, and deletion operations, with stable trav) Tj T* (ersal order based on key comparison.) Tj T* 12 TL T* /F0 20 Tf (Performance) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (add/set) Tj /F0 12 Tf (: O\(log n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (remove) Tj /F0 12 Tf (: O\(log n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (get/contains) Tj /F0 12 Tf (: O\(log n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (iterate) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (range) Tj /F0 12 Tf (: O\(log n + k\) where k is number of elements in range) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (space complexity) Tj /F0 12 Tf (: O\(n\)) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Usage) Tj 20 TL T* 12 TL T* /F0 16 Tf (Create) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can create an empty SortedMap or a SortedMap from other containers.) Tj T* 12 TL T* ET
endstream
endobj
246 0 obj
<<
  /Type /Page  
  /Contents 245 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
247 0 obj
<<
  /Length 5816
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _map1) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( SortedMap) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( _map2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Container Operations) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Add a key-value pair to the SortedMap in place.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( set) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (You can also use the convenient subscript syntax to add or update values:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ([) Tj 1 0 1 rg (2) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Remove a key-value pair from the SortedMap in place.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( remove) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get a value by its key. The return type is ) Tj /F0 12 Tf (Option[V]) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( get) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Some) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( get) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( None) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Safe access with error handling:) Tj T* 12 TL T* ET
endstream
endobj
248 0 obj
<<
  /Type /Page  
  /Contents 247 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
249 0 obj
<<
  /Length 7151
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( key) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( get) Tj 0 0 0 rg (\() Tj 0 0 0 rg (key) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Check if a key exists in the map.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( false) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterate over all key-value pairs in the map in sorted key order.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( keys) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    keys) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    values) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (keys) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (values) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("one") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterate with index:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( eachi) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the size of the map.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Check if the map is empty.) Tj T* 12 TL T* ET
endstream
endobj
250 0 obj
<<
  /Type /Page  
  /Contents 249 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
251 0 obj
<<
  /Length 7164
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( SortedMap) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Clear the map.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( clear) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( is_empty) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Data Extraction) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get all keys or values from the map.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( keys_as_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( values_as_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("one") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert the map to an array of key-value pairs.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Range Operations) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get a subset of the map within a specified range of keys. The range is inclusive) Tj T* ( for both bounds ) Tj /F0 12 Tf ([low, high]) Tj /F0 12 Tf (.) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "four") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    \() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "five") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  ]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( range_items) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( range) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( range_items) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (range_items) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (4) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "four") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Edge cases for range operations:) Tj T* ET
endstream
endobj
252 0 obj
<<
  /Type /Page  
  /Contents 251 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
253 0 obj
<<
  /Length 8047
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (If ) Tj /F0 12 Tf (low > high) Tj /F0 12 Tf (, returns an empty result) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (If ) Tj /F0 12 Tf (low) Tj /F0 12 Tf ( or ) Tj /F0 12 Tf (high) Tj /F0 12 Tf ( are outside the map bounds, returns only pairs within valid bound) Tj T* (s) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (The returned iterator preserves the sorted order of keys) Tj T* -10 0 Td 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( range_items) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( range) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( range_items) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (range_items) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty_range) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( range) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( empty_range) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty_range) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Iterators) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The SortedMap supports several iterator patterns. Create a map from an iterator:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pairs) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pairs) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map) Tj 0 0 0 rg ( size) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use the ) Tj /F0 12 Tf (iter) Tj /F0 12 Tf ( method to get an iterator over key-value pairs:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( pairs) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (pairs) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use the ) Tj /F0 12 Tf (iter2) Tj /F0 12 Tf ( method for a more convenient key-value iteration:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "three") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( transformed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  map) Tj 0 0 0 rg ( iter2) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( each) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( transformed) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (k) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( ": ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (transformed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("1: one") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "2: two") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "3: three") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Equality) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Maps with the same key-value pairs are considered equal, regardless of the order) Tj T* ( in which elements were added.) Tj T* ET
endstream
endobj
254 0 obj
<<
  /Type /Page  
  /Contents 253 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
255 0 obj
<<
  /Length 5228
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "two") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "one") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (map1) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( map2) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( true) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Error Handling Best Practices) Tj 16 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (When working with keys that might not exist, prefer using pattern matching for s) Tj T* (afety:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (fn) Tj 0 0 0 rg ( get_score) Tj 0 0 0 rg (\() Tj 0 0 0 rg (scores) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( SortedMap) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( student_id) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( scores) Tj 0 0 0 rg ( get) Tj 0 0 0 rg (\() Tj 0 0 0 rg (student_id) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (score) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( score) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                      ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (          ) Tj T* 12 TL (11  ) Tj 1 0 1 rg (      0) Tj 0 0 0 rg (                 ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "safe_key_access") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                          ) Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( scores) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @sorted_map) Tj 0 0 0 rg ( from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 1 0 1 rg (1001) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 85) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1002) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 92) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (1003) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 78) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (get_score) Tj 0 0 0 rg (\() Tj 0 0 0 rg (scores) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1001) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 85) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (                                                           ) Tj T* 12 TL (24  ) Tj 0 0 0 rg (  assert_eq) Tj 0 0 0 rg (\() Tj 0 0 0 rg (get_score) Tj 0 0 0 rg (\() Tj 0 0 0 rg (scores) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9999) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Implementation Notes) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The SortedMap is implemented as an AVL tree, a self-balancing binary search tree) Tj T* (. After insertions and deletions, the tree automatically rebalances to maintain ) Tj T* (O\(log n\) search, insertion, and deletion times.) Tj T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Key properties of the AVL tree implementation:) Tj T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Each node stores a balance factor \(height difference between left and right sub) Tj T* (trees\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (The balance factor is maintained between -1 and 1 for all nodes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Rebalancing is done through tree rotations \(single and double rotations\)) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Comparison with Other Collections) Tj 20 TL T* ET
endstream
endobj
256 0 obj
<<
  /Type /Page  
  /Contents 255 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
257 0 obj
<<
  /Length 4806
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (@hashmap.T) Tj /F0 12 Tf (: Provides O\(1\) average case lookups but doesn't maintain order; use) Tj T* ( when order doesn't matter) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (@indexmap.T) Tj /F0 12 Tf (: Maintains insertion order but not sorted order; use when insertion ) Tj T* (order matters) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (@sorted_map.SortedMap) Tj /F0 12 Tf (: Maintains keys in sorted order; use when you need keys to) Tj T* ( be sorted) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Choose SortedMap when you need:) Tj T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Key-value pairs sorted by key) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Efficient range queries) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Ordered traversal guarantees) Tj T* -10 0 Td 12 TL T* /F0 24 Tf (MoonBit QuickCheck Package) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit QuickCheck package provides property-based testing capabilities by gener) Tj T* (ating random test inputs.) Tj T* 12 TL T* /F0 20 Tf (Basic Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Generate random values of any type that implements the ) Tj /F0 12 Tf (Arbitrary) Tj /F0 12 Tf ( trait:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic generation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sized) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (=) Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sized) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <=) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Multiple Samples) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Generate multiple test cases using the ) Tj /F0 12 Tf (samples) Tj /F0 12 Tf ( function:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "multiple samples") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( ints) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( samples) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ints) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[0, 0, 0, -1, -1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( strings) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( samples) Tj 0 0 0 rg (\() Tj 1 0 1 rg (12) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    strings) Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (:) Tj 1 0 1 rg (10) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 1 0 0 rg (      #|["E\\b\\u{0f} ", "", "K\\u{1f}[", "!@", "xvLxb"]) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
258 0 obj
<<
  /Type /Page  
  /Contents 257 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
259 0 obj
<<
  /Length 5754
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Built-in Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (QuickCheck provides ) Tj /F0 12 Tf (Arbitrary) Tj /F0 12 Tf ( implementations for all basic MoonBit types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "builtin types") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Bool) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Char) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Byte) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(true, '#', b'\\\\x12'\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int64) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( UInt) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Float) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Double) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(0, 0, 0, 0, 0.1430625319480896, 0.33098446695254635, 0\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Iter) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    v) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (      #|\("", b"", []\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Custom Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Implement ) Tj /F0 12 Tf (Arbitrary) Tj /F0 12 Tf ( trait for custom types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (struct) Tj 0 0 0 rg ( Point) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (  x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  y) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 1 rg ( derive) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Show) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (impl) Tj 0 0 0 rg ( Arbitrary) Tj 0 0 1 rg ( for) Tj 0 0 0 rg ( Point) Tj 0 0 1 rg ( with) Tj 0 0 0 rg ( arbitrary) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( r1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( r0) Tj 0 0 0 rg ( split) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( y) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( Arbitrary) Tj 0 0 0 rg (::) Tj 0 0 0 rg (arbitrary) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  {) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (:) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( Arbitrary) Tj 0 0 0 rg (::) Tj 0 0 0 rg (arbitrary) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( y) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "custom type generation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( point) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Point) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (point) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("{x: 0, y: 0}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( points) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Point) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg ( samples) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    points) Tj 0 0 0 rg ([) Tj 1 0 1 rg (6) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[{x: 0, y: 1}, {x: -1, y: -5}, {x: -6, y: -6}, {x: -1, y: 7}]") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
260 0 obj
<<
  /Type /Page  
  /Contents 259 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
261 0 obj
<<
  /Length 3890
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (The package is useful for writing property tests that verify code behavior acros) Tj T* (s a wide range of randomly generated inputs.) Tj T* 12 TL T* /F0 24 Tf (uint) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides functionalities for handling 32-bit unsigned integers in M) Tj T* (oonBit. To this end, it includes methods for converting between ) Tj /F0 12 Tf (UInt) Tj /F0 12 Tf ( and other n) Tj T* (umber formats, as well as utilities for byte representation.) Tj T* 12 TL T* /F0 20 Tf (Basic Properties) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (uint) Tj /F0 12 Tf ( provides constants for ) Tj /F0 12 Tf (UInt) Tj /F0 12 Tf ('s value range and default value:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "uint basics") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint) Tj 0 0 0 rg ( default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint) Tj 0 0 0 rg ( max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4294967295") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@uint) Tj 0 0 0 rg ( min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Byte Representation) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (UInt) Tj /F0 12 Tf ( can be converted to bytes in both big-endian and little-endian formats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "uint byte conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 258U) Tj 0 0 0 rg (                     ) Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                   ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    be_bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x01\\x02") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                                       ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    le_bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|b"\\x02\\x01\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Converting to Other Number Types) Tj 20 TL T* 12 TL T* ET
endstream
endobj
262 0 obj
<<
  /Type /Page  
  /Contents 261 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
263 0 obj
<<
  /Length 3351
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (UInt) Tj /F0 12 Tf ( can be converted to ) Tj /F0 12 Tf (Int64) Tj /F0 12 Tf ( when you need to work with signed 64-bit integers) Tj T* (:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "uint type conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 42U) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (num) Tj 0 0 0 rg ( to_int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( large_num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 4294967295U) Tj 0 0 0 rg (             ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (large_num) Tj 0 0 0 rg ( to_int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4294967295") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (These conversion functions are also available as methods:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "uint methods") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1000U) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (num) Tj 0 0 0 rg ( to_int64) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1000") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    num) Tj 0 0 0 rg ( to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x03\\xe8") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    num) Tj 0 0 0 rg ( to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 1 0 0 rg (      #|b"\\xe8\\x03\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (json) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (json) Tj /F0 12 Tf ( package provides comprehensive JSON handling capabilities, including pa) Tj T* (rsing, stringifying, and type-safe conversion between JSON and other MoonBit dat) Tj T* (a types.) Tj T* 12 TL T* /F0 20 Tf (Basic JSON Operations) Tj 20 TL T* 12 TL T* /F0 16 Tf (Parsing and Validating JSON) Tj 16 TL T* 12 TL T* ET
endstream
endobj
264 0 obj
<<
  /Type /Page  
  /Contents 263 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
265 0 obj
<<
  /Length 2802
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "parse and validate jsons") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg ( valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("{\\"key\\": 42}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg ( valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg ( valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("null") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg ( valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("{\\"key\\": 42}") Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (_) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( panic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                                       ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    json) Tj 0 0 0 rg ( stringify) Tj 0 0 0 rg (\() Tj 0 0 0 rg (indent) Tj 0 0 0 rg (=) Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ({) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( output) Tj 0 0 0 rg ( =) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (        #|{) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 1 0 0 rg (        #|  "key": 42) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 1 0 0 rg (        #|}) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (      output) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Object Navigation) Tj 16 TL T* 12 TL T* ET
endstream
endobj
266 0 obj
<<
  /Type /Page  
  /Contents 265 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
267 0 obj
<<
  /Length 5289
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json object navigation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( parse) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 1 0 0 rg (    "{\\"string\\":\\"hello\\",\\"number\\":42,\\"array\\":[1,2,3]}") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( string_opt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("string") Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( as_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    string_opt) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      #|Some\("hello"\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( number_opt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("number") Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( as_number) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (number_opt) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(42\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array_opt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("array") Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( as_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array_opt) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\([Number\(1\), Number\(2\), Number\(3\)]\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json) Tj 0 0 0 rg ( value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("missing") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Array Navigation) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json array navigation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("[1,2,3,4,5]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( first) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( item) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (first) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(Number\(1\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( missing) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( item) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (missing) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( as_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    values) Tj 0 0 0 rg ( iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[Number\(1\), Number\(2\), Number\(3\), Number\(4\), Number\(5\)]") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Type-Safe JSON Conversion) Tj 20 TL T* 12 TL T* /F0 16 Tf (From JSON to Native Types) Tj 16 TL T* 12 TL T* ET
endstream
endobj
268 0 obj
<<
  /Type /Page  
  /Contents 267 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
269 0 obj
<<
  /Length 5212
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json decode") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_number) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (42) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( number) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_number) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (number) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_array) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg ({) Tj 1 0 0 rg ( "a") Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( }) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Map) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_map) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    map) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|{"a": 1, "b": 2}) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Error Handling with JSON Path) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json path") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  try) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( _arr) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg ( from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (42) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "not a number") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 49) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    panic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  }) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    @json) Tj 0 0 0 rg ( JsonDecodeError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("$[1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Int::from_json: expected number") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (JSON-based Snapshot Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (@json.inspect\(\)) Tj /F0 12 Tf ( can be used as an alternative to ) Tj /F0 12 Tf (inspect\(\)) Tj /F0 12 Tf ( when a value's ) Tj /F0 12 Tf (To) Tj T* (Json) Tj /F0 12 Tf ( implementation is considered a better debugging representation than its ) Tj /F0 12 Tf (Sho) Tj T* (w) Tj /F0 12 Tf ( implementation.) Tj /F0 12 Tf ( ) Tj /F0 12 Tf (This is particularly true for deeply-nested data structures.) Tj T* 12 TL T* ET
endstream
endobj
270 0 obj
<<
  /Type /Page  
  /Contents 269 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
271 0 obj
<<
  /Length 5040
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json inspection") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( null) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( null) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 1 0 0 rg ( "key") Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "value") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "numbers") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  @json) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ({) Tj 1 0 0 rg ( "key") Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "value") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "numbers") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_special) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 1 0 0 rg ( "null") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( null) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "bool") Tj 0 0 0 rg (:) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  @json) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_special) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ({) Tj 1 0 0 rg ( "null") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( null) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "bool") Tj 0 0 0 rg (:) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 24 Tf (Env Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utilities for interacting with the runtime environment, in) Tj T* (cluding access to command line arguments, current time, and working directory in) Tj T* (formation.) Tj T* 12 TL T* /F0 20 Tf (Command Line Arguments) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Access command line arguments passed to your program:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "command line arguments") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arguments) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( args) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                   ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                                                    ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arguments) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >=) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                                  ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( process_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      "No arguments provided") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 1 0 0 rg (      "First argument: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( process_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arguments) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Current Time) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the current time in milliseconds since Unix epoch:) Tj T* 12 TL T* ET
endstream
endobj
272 0 obj
<<
  /Type /Page  
  /Contents 271 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
273 0 obj
<<
  /Length 4044
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "current time") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( timestamp) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( now) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                             ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( year_2020_ms) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1577836800000UL) Tj 0 0 0 rg (                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (timestamp) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( year_2020_ms) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( format_timestamp) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ts) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (    "Timestamp: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( ts) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( formatted) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( format_timestamp) Tj 0 0 0 rg (\() Tj 0 0 0 rg (timestamp) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (formatted) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Working Directory) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the current working directory:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "working directory") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( cwd) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( cwd) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                               ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                                    ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Usage Examples) Tj 20 TL T* 12 TL T* /F0 16 Tf (Command Line Tool Pattern) Tj 16 TL T* 12 TL T* ET
endstream
endobj
274 0 obj
<<
  /Type /Page  
  /Contents 273 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
275 0 obj
<<
  /Length 7391
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "command line tool pattern") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( parse_command) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Usage: program <command> [args...]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (      match) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 1 0 0 rg (        "help") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Showing help information") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 1 0 0 rg (        "version") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Version 1.0.0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (        "status") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("System is running") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (        cmd) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Unknown command: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( cmd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_args) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("program") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "help") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( parse_command) Tj 0 0 0 rg (\() Tj 0 0 0 rg (test_args) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Ok\(\\"Showing help information\\"\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( invalid_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( parse_command) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("program") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "invalid") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( invalid_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Configuration Loading) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "configuration loading") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( load_config_path) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (cwd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( cwd) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "/config.json") Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 1 0 0 rg ( "./config.json") Tj 0 0 0 rg (            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( config_path) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( load_config_path) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config_path) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Logging with Timestamps) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "logging with timestamps") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 0 0 0 rg (level) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( message) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( timestamp) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( now) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 1 0 0 rg (    "[") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( timestamp) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "] ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( level) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( ": ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( message) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( log_entry) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("INFO") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "Application started") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (log_entry) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (log_entry) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
276 0 obj
<<
  /Type /Page  
  /Contents 275 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
277 0 obj
<<
  /Length 3462
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 16 Tf (File Path Operations) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "file path operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( resolve_relative_path) Tj 0 0 0 rg (\() Tj 0 0 0 rg (relative) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (base) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( base) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "/") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( relative) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( relative) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( resolved) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( resolve_relative_path) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("data/input.txt") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (resolved) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Platform Differences) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The env package behaves differently across platforms:) Tj T* 12 TL T* /F0 16 Tf (JavaScript Environment) Tj 16 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( returns arguments from the JavaScript environment) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( uses ) Tj /F0 12 Tf (Date.@env.now\(\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( may return ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( in browser environments) Tj T* -10 0 Td 12 TL T* /F0 16 Tf (WebAssembly Environment) Tj 16 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( behavior depends on the WASM host) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( provides millisecond precision timing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( availability depends on host capabilities) Tj T* -10 0 Td 12 TL T* /F0 16 Tf (Native Environment) Tj 16 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( returns actual command line arguments) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( provides system time) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( uses system calls to get working directory) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Error Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Handle cases where environment information is unavailable:) Tj T* 12 TL T* ET
endstream
endobj
278 0 obj
<<
  /Type /Page  
  /Contents 277 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
279 0 obj
<<
  /Length 5561
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( safe_get_cwd) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( path) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (8   ) Tj 1 0 0 rg (        ".") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( safe_cwd) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_get_cwd) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (safe_cwd) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( validate_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    min_count) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Unit) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( min_count) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Insufficient arguments: expected at least ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( min_count) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( validation) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( validate_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("prog") Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( validation) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (29  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (1. Handle Missing Environment Data Gracefully) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "graceful handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( get_work_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dir) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( dir) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 1 0 0 rg ( "~") Tj 0 0 0 rg (                                     ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( work_dir) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( get_work_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (work_dir) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (2. Validate Command Line Arguments) Tj 16 TL T* 12 TL T* ET
endstream
endobj
280 0 obj
<<
  /Type /Page  
  /Contents 279 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
281 0 obj
<<
  /Length 7257
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "argument validation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( validate_and_parse_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("No program name available") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( program) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( arguments) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (..<) Tj 0 0 0 rg (args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (        arguments) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ([) Tj 0 0 0 rg (i) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (program) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( arguments) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( validate_and_parse_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("myprogram") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "arg1") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "arg2") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( test_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (prog) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( args) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (prog) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("myprogram") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (3. Use Timestamps for Unique Identifiers) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unique identifiers") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( generate_unique_id) Tj 0 0 0 rg (\() Tj 0 0 0 rg (prefix) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    prefix) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "_") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( now) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( id1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( generate_unique_id) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("task") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( id2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( generate_unique_id) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("task") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (id1) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (id2) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Common Use Cases) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Command Line Tools) Tj /F0 12 Tf (: Parse arguments and provide help/usage information) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Configuration Management) Tj /F0 12 Tf (: Load config files relative to current directory) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Logging Systems) Tj /F0 12 Tf (: Add timestamps to log entries) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (File Processing) Tj /F0 12 Tf (: Resolve relative file paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Debugging) Tj /F0 12 Tf (: Include environment information in error reports) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Build Tools) Tj /F0 12 Tf (: Determine working directory for relative path operations) Tj T* -10 0 Td 12 TL T* ET
endstream
endobj
282 0 obj
<<
  /Type /Page  
  /Contents 281 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
283 0 obj
<<
  /Length 953
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( is typically called once at program startup) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( is lightweight but avoid calling in tight loops if high precision i) Tj T* (sn't needed) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( may involve system calls, so cache the result if used frequ) Tj T* (ently) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Environment functions are generally fast but platform-dependent) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The env package provides essential runtime environment access for building robus) Tj T* (t MoonBit applications that interact with their execution environment.) Tj T* 12 TL T* ET
endstream
endobj
284 0 obj
<<
  /Type /Page  
  /Contents 283 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 285
0000000000 65535 f 
0000000055 00000 n
0000001140 00000 n
0000022677 00000 n
0000000521 00000 n
0000003775 00000 n
0000000521 00000 n
0000004194 00000 n
0000000521 00000 n
0000004329 00000 n
0000000522 00000 n
0000004956 00000 n
0000000523 00000 n
0000003571 00000 n
0000000523 00000 n
0000004888 00000 n
0000000523 00000 n
0000003162 00000 n
0000000523 00000 n
0000004384 00000 n
0000000523 00000 n
0000004799 00000 n
0000000523 00000 n
0000006718 00000 n
0000000523 00000 n
0000004450 00000 n
0000000523 00000 n
0000005716 00000 n
0000000523 00000 n
0000004631 00000 n
0000000523 00000 n
0000003253 00000 n
0000000523 00000 n
0000006774 00000 n
0000000523 00000 n
0000004621 00000 n
0000000523 00000 n
0000005480 00000 n
0000000523 00000 n
0000005602 00000 n
0000000523 00000 n
0000006050 00000 n
0000000523 00000 n
0000005256 00000 n
0000000523 00000 n
0000006188 00000 n
0000000523 00000 n
0000005925 00000 n
0000000523 00000 n
0000003512 00000 n
0000000523 00000 n
0000004962 00000 n
0000000523 00000 n
0000004493 00000 n
0000000523 00000 n
0000004982 00000 n
0000000523 00000 n
0000003001 00000 n
0000000523 00000 n
0000004516 00000 n
0000000523 00000 n
0000005431 00000 n
0000000523 00000 n
0000005829 00000 n
0000000523 00000 n
0000003483 00000 n
0000000523 00000 n
0000004512 00000 n
0000000523 00000 n
0000004540 00000 n
0000000523 00000 n
0000005085 00000 n
0000000523 00000 n
0000005699 00000 n
0000000523 00000 n
0000005639 00000 n
0000000523 00000 n
0000004996 00000 n
0000000523 00000 n
0000006613 00000 n
0000000523 00000 n
0000006148 00000 n
0000000523 00000 n
0000003919 00000 n
0000000523 00000 n
0000004624 00000 n
0000000523 00000 n
0000004426 00000 n
0000000523 00000 n
0000004151 00000 n
0000000523 00000 n
0000004825 00000 n
0000000523 00000 n
0000005216 00000 n
0000000523 00000 n
0000004714 00000 n
0000000523 00000 n
0000002998 00000 n
0000000523 00000 n
0000007007 00000 n
0000000524 00000 n
0000003275 00000 n
0000000525 00000 n
0000006127 00000 n
0000000525 00000 n
0000003005 00000 n
0000000525 00000 n
0000004614 00000 n
0000000525 00000 n
0000004710 00000 n
0000000525 00000 n
0000002598 00000 n
0000000525 00000 n
0000003238 00000 n
0000000525 00000 n
0000003651 00000 n
0000000525 00000 n
0000006485 00000 n
0000000525 00000 n
0000006004 00000 n
0000000525 00000 n
0000005570 00000 n
0000000525 00000 n
0000004086 00000 n
0000000525 00000 n
0000004901 00000 n
0000000525 00000 n
0000005887 00000 n
0000000525 00000 n
0000005761 00000 n
0000000525 00000 n
0000006125 00000 n
0000000525 00000 n
0000004368 00000 n
0000000525 00000 n
0000003735 00000 n
0000000525 00000 n
0000003913 00000 n
0000000525 00000 n
0000005134 00000 n
0000000525 00000 n
0000004854 00000 n
0000000525 00000 n
0000006077 00000 n
0000000525 00000 n
0000005734 00000 n
0000000525 00000 n
0000005148 00000 n
0000000525 00000 n
0000005589 00000 n
0000000525 00000 n
0000005734 00000 n
0000000525 00000 n
0000007147 00000 n
0000000525 00000 n
0000002383 00000 n
0000000525 00000 n
0000004739 00000 n
0000000525 00000 n
0000005701 00000 n
0000000525 00000 n
0000003126 00000 n
0000000525 00000 n
0000005591 00000 n
0000000525 00000 n
0000003960 00000 n
0000000525 00000 n
0000004891 00000 n
0000000525 00000 n
0000005308 00000 n
0000000525 00000 n
0000005264 00000 n
0000000525 00000 n
0000008012 00000 n
0000000525 00000 n
0000002822 00000 n
0000000525 00000 n
0000003801 00000 n
0000000525 00000 n
0000003866 00000 n
0000000525 00000 n
0000005083 00000 n
0000000525 00000 n
0000004918 00000 n
0000000525 00000 n
0000003325 00000 n
0000000525 00000 n
0000005074 00000 n
0000000525 00000 n
0000004839 00000 n
0000000525 00000 n
0000003964 00000 n
0000000525 00000 n
0000005721 00000 n
0000000525 00000 n
0000005268 00000 n
0000000525 00000 n
0000005787 00000 n
0000000525 00000 n
0000005935 00000 n
0000000525 00000 n
0000004917 00000 n
0000000525 00000 n
0000006227 00000 n
0000000525 00000 n
0000004342 00000 n
0000000525 00000 n
0000006571 00000 n
0000000525 00000 n
0000005637 00000 n
0000000525 00000 n
0000004794 00000 n
0000000525 00000 n
0000004092 00000 n
0000000525 00000 n
0000004316 00000 n
0000000525 00000 n
0000003362 00000 n
0000000525 00000 n
0000004555 00000 n
0000000525 00000 n
0000002314 00000 n
0000000525 00000 n
0000006564 00000 n
0000000525 00000 n
0000004511 00000 n
0000000525 00000 n
0000005807 00000 n
0000000525 00000 n
0000004841 00000 n
0000000525 00000 n
0000005197 00000 n
0000000525 00000 n
0000004351 00000 n
0000000525 00000 n
0000005466 00000 n
0000000525 00000 n
0000004209 00000 n
0000000525 00000 n
0000005553 00000 n
0000000525 00000 n
0000004295 00000 n
0000000525 00000 n
0000005373 00000 n
0000000525 00000 n
0000003328 00000 n
0000000525 00000 n
0000005872 00000 n
0000000525 00000 n
0000007207 00000 n
0000000525 00000 n
0000007220 00000 n
0000000525 00000 n
0000008103 00000 n
0000000525 00000 n
0000005284 00000 n
0000000525 00000 n
0000004862 00000 n
0000000525 00000 n
0000005810 00000 n
0000000525 00000 n
0000003946 00000 n
0000000525 00000 n
0000003407 00000 n
0000000525 00000 n
0000002858 00000 n
0000000525 00000 n
0000005345 00000 n
0000000525 00000 n
0000005268 00000 n
0000000525 00000 n
0000005096 00000 n
0000000525 00000 n
0000004100 00000 n
0000000525 00000 n
0000007447 00000 n
0000000525 00000 n
0000003518 00000 n
0000000525 00000 n
0000005617 00000 n
0000000525 00000 n
0000007313 00000 n
0000000525 00000 n
0000001008 00000 n
0000000525 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
790363
%%EOF
