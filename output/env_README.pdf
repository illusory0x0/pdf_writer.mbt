%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R 14 0 R 16 0 R]  
  /Count 7
>>
endobj
3 0 obj
<<
  /Length 1388
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (Env Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Command Line Arguments) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Current Time) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Working Directory) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Practical Usage Examples) Tj -40 0 Td 12 TL (1.4.1)' 0 TL 40 0 Td (Command Line Tool Pattern) Tj -40 0 Td 12 TL (1.4.2)' 0 TL 40 0 Td (Configuration Loading) Tj -40 0 Td 12 TL (1.4.3)' 0 TL 40 0 Td (Logging with Timestamps) Tj -40 0 Td 12 TL (1.4.4)' 0 TL 40 0 Td (File Path Operations) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Platform Differences) Tj -40 0 Td 12 TL (1.5.1)' 0 TL 40 0 Td (JavaScript Environment) Tj -40 0 Td 12 TL (1.5.2)' 0 TL 40 0 Td (WebAssembly Environment) Tj -40 0 Td 12 TL (1.5.3)' 0 TL 40 0 Td (Native Environment) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Error Handling) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (1.7.1)' 0 TL 40 0 Td (1. Handle Missing Environment Data Gracefully) Tj -40 0 Td 12 TL (1.7.2)' 0 TL 40 0 Td (2. Validate Command Line Arguments) Tj -40 0 Td 12 TL (1.7.3)' 0 TL 40 0 Td (3. Use Timestamps for Unique Identifiers) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Common Use Cases) Tj -40 0 Td 12 TL (1.9)' 0 TL 40 0 Td (Performance Considerations) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 5038
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Env Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utilities for interacting with the runtime environment, in) Tj T* (cluding access to command line arguments, current time, and working directory in) Tj T* (formation.) Tj T* 12 TL T* /F0 20 Tf (Command Line Arguments) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Access command line arguments passed to your program:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "command line arguments") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( arguments) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( args) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                   ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                                                    ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arguments) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >=) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                                                  ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( process_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      "No arguments provided") Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 1 0 0 rg (      "First argument: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( process_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arguments) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Current Time) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the current time in milliseconds since Unix epoch:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "current time") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( timestamp) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( now) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                             ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( year_2020_ms) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 1577836800000UL) Tj 0 0 0 rg (                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (timestamp) Tj 0 0 0 rg ( >) Tj 0 0 0 rg ( year_2020_ms) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( format_timestamp) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ts) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (    "Timestamp: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( ts) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( formatted) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( format_timestamp) Tj 0 0 0 rg (\() Tj 0 0 0 rg (timestamp) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (formatted) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 5915
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Working Directory) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Get the current working directory:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "working directory") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( cwd) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( cwd) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                               ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                                    ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Usage Examples) Tj 20 TL T* 12 TL T* /F0 16 Tf (Command Line Tool Pattern) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "command line tool pattern") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( parse_command) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Usage: program <command> [args...]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (      match) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 1 0 0 rg (        "help") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Showing help information") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 1 0 0 rg (        "version") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Version 1.0.0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (        "status") Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Ok) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("System is running") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (        cmd) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Unknown command: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( cmd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                             ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_args) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ("program") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "help") Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( parse_command) Tj 0 0 0 rg (\() Tj 0 0 0 rg (test_args) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Ok\(\\"Showing help information\\"\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( invalid_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( parse_command) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("program") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "invalid") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( invalid_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Configuration Loading) Tj 16 TL T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 5913
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "configuration loading") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( load_config_path) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (cwd) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( cwd) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "/config.json") Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 1 0 0 rg ( "./config.json") Tj 0 0 0 rg (            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( config_path) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( load_config_path) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config_path) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Logging with Timestamps) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "logging with timestamps") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 0 0 0 rg (level) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( message) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( timestamp) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( now) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 1 0 0 rg (    "[") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( timestamp) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "] ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( level) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( ": ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( message) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( log_entry) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( log_message) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("INFO") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "Application started") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (log_entry) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 20) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (log_entry) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (File Path Operations) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "file path operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( resolve_relative_path) Tj 0 0 0 rg (\() Tj 0 0 0 rg (relative) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (base) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( base) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "/") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( relative) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( relative) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( resolved) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( resolve_relative_path) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("data/input.txt") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (resolved) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Platform Differences) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The env package behaves differently across platforms:) Tj T* 12 TL T* /F0 16 Tf (JavaScript Environment) Tj 16 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( returns arguments from the JavaScript environment) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( uses ) Tj /F0 12 Tf (Date.@env.now\(\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( may return ) Tj /F0 12 Tf (None) Tj /F0 12 Tf ( in browser environments) Tj T* -10 0 Td 12 TL T* /F0 16 Tf (WebAssembly Environment) Tj 16 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 5144
>>
stream
 1 0 0 1 50 770 cm BT /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( behavior depends on the WASM host) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( provides millisecond precision timing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( availability depends on host capabilities) Tj T* -10 0 Td 12 TL T* /F0 16 Tf (Native Environment) Tj 16 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( returns actual command line arguments) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( provides system time) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( uses system calls to get working directory) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Error Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Handle cases where environment information is unavailable:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( safe_get_cwd) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( path) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (8   ) Tj 1 0 0 rg (        ".") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( safe_cwd) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( safe_get_cwd) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (safe_cwd) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( validate_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    min_count) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Unit) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <) Tj 0 0 0 rg ( min_count) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Insufficient arguments: expected at least ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( min_count) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( validation) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( validate_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("prog") Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( validation) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                             ) Tj T* 12 TL (29  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (1. Handle Missing Environment Data Gracefully) Tj 16 TL T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
13 0 obj
<<
  /Length 5875
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "graceful handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( get_work_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    match) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( current_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (      Some) Tj 0 0 0 rg (\() Tj 0 0 0 rg (dir) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( dir) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (      None) Tj 0 0 0 rg ( =>) Tj 1 0 0 rg ( "~") Tj 0 0 0 rg (                                     ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( work_dir) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( get_work_dir) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (work_dir) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (2. Validate Command Line Arguments) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "argument validation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( validate_and_parse_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    args) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Result) Tj 0 0 0 rg ([) Tj 0 0 0 rg (\() Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      Err) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("No program name available") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 1 rg ( if) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( [) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( program) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( args) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( arguments) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (..<) Tj 0 0 0 rg (args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (        arguments) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ([) Tj 0 0 0 rg (i) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (      Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (program) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( arguments) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( test_result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( validate_and_parse_args) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ("myprogram") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "arg1") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "arg2") Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( test_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (prog) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( args) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (prog) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("myprogram") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (args) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (3. Use Timestamps for Unique Identifiers) Tj 16 TL T* 12 TL T* ET
endstream
endobj
14 0 obj
<<
  /Type /Page  
  /Contents 13 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
15 0 obj
<<
  /Length 3805
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unique identifiers") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( generate_unique_id) Tj 0 0 0 rg (\() Tj 0 0 0 rg (prefix) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    prefix) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "_") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( @env) Tj 0 0 0 rg ( now) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( id1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( generate_unique_id) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("task") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( id2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( generate_unique_id) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("task") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (id1) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (id2) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Common Use Cases) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Command Line Tools) Tj /F0 12 Tf (: Parse arguments and provide help/usage information) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Configuration Management) Tj /F0 12 Tf (: Load config files relative to current directory) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Logging Systems) Tj /F0 12 Tf (: Add timestamps to log entries) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (File Processing) Tj /F0 12 Tf (: Resolve relative file paths) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Debugging) Tj /F0 12 Tf (: Include environment information in error reports) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Build Tools) Tj /F0 12 Tf (: Determine working directory for relative path operations) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Performance Considerations) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (args\(\)) Tj /F0 12 Tf ( is typically called once at program startup) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.now\(\)) Tj /F0 12 Tf ( is lightweight but avoid calling in tight loops if high precision i) Tj T* (sn't needed) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (@env.current_dir\(\)) Tj /F0 12 Tf ( may involve system calls, so cache the result if used frequ) Tj T* (ently) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Environment functions are generally fast but platform-dependent) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The env package provides essential runtime environment access for building robus) Tj T* (t MoonBit applications that interact with their execution environment.) Tj T* 12 TL T* ET
endstream
endobj
16 0 obj
<<
  /Type /Page  
  /Contents 15 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 17
0000000000 65535 f 
0000000055 00000 n
0000000107 00000 n
0000001442 00000 n
0000000521 00000 n
0000005092 00000 n
0000000521 00000 n
0000005969 00000 n
0000000521 00000 n
0000005967 00000 n
0000000522 00000 n
0000005199 00000 n
0000000523 00000 n
0000005930 00000 n
0000000523 00000 n
0000003860 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
37690
%%EOF
