%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R]  
  /Count 3
>>
endobj
3 0 obj
<<
  /Length 298
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (int) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic Operations) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Byte Conversion) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Method Syntax) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 4068
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (int) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (moonbitlang/core/int) Tj /F0 12 Tf ( package provides essential operations on 32-bit integer) Tj T* (s.) Tj T* 12 TL T* /F0 20 Tf (Basic Operations) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This section shows the basic operations available for integers:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic int operations") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg (.abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (-) Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg (.abs) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg (.min_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-2147483648") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@int) Tj 0 0 0 rg (.max_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("2147483647") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Byte Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides methods to convert integers to their byte representation in) Tj T* ( both big-endian and little-endian formats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "byte conversions") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( num) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 258) Tj 0 0 0 rg (                 ) Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                        ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg (.to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    be_bytes) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 1 0 0 rg (      #|b"\\x00\\x00\\x01\\x02") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                                            ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le_bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( num) Tj 0 0 0 rg (.to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    le_bytes) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|b"\\x02\\x01\\x00\\x00") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Method Syntax) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (All operations are also available using method syntax for better readability:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 2301
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "method syntax") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( n) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( -) Tj 1 0 1 rg (42) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                        ) Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg (.abs) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( be) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( n) Tj 0 0 0 rg (.to_be_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( le) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( n) Tj 0 0 0 rg (.to_le_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    be) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 1 0 0 rg (      #|b"\\xff\\xff\\xff\\xd6") Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    le) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (      #|b"\\xd6\\xff\\xff\\xff") Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package provides the foundations for 32-bit integer operations in MoonBit, e) Tj T* (ssential for any numeric computation.) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 9
0000000000 65535 f 
0000000055 00000 n
0000000079 00000 n
0000000351 00000 n
0000000521 00000 n
0000004122 00000 n
0000000521 00000 n
0000002355 00000 n
0000000521 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
8779
%%EOF
