%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R]  
  /Count 3
>>
endobj
3 0 obj
<<
  /Length 371
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (MoonBit QuickCheck Package) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic Usage) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Multiple Samples) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Built-in Types) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Custom Types) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 4026
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (MoonBit QuickCheck Package) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit QuickCheck package provides property-based testing capabilities by gener) Tj T* (ating random test inputs.) Tj T* 12 TL T* /F0 20 Tf (Basic Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Generate random values of any type that implements the ) Tj /F0 12 Tf (Arbitrary) Tj /F0 12 Tf ( trait:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic generation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Bool) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (b) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                 ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( sized) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (=) Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sized) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( <=) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Multiple Samples) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Generate multiple test cases using the ) Tj /F0 12 Tf (samples) Tj /F0 12 Tf ( function:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "multiple samples") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( ints) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.samples) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ints) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[0, 0, 0, -1, -1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( strings) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.samples) Tj 0 0 0 rg (\() Tj 1 0 1 rg (12) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    strings) Tj 0 0 0 rg ([) Tj 1 0 1 rg (5) Tj 0 0 0 rg (:) Tj 1 0 1 rg (10) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 1 0 0 rg (      #|["E\\b\\u{0f} ", "", "K\\u{1f}[", "!@", "xvLxb"]) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Built-in Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (QuickCheck provides ) Tj /F0 12 Tf (Arbitrary) Tj /F0 12 Tf ( implementations for all basic MoonBit types:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 5724
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "builtin types") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Bool) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Char) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Byte) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(true, '#', b'\\\\x12'\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int64) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( UInt) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( UInt64) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Float) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Double) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( BigInt) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("\(0, 0, 0, 0, 0.1430625319480896, 0.33098446695254635, 0\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( v) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( \() Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Bytes) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Iter) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    v) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 1 0 0 rg (      #|\("", b"", []\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Custom Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Implement ) Tj /F0 12 Tf (Arbitrary) Tj /F0 12 Tf ( trait for custom types:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (struct) Tj 0 0 0 rg ( Point) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (  x) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  y) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (}) Tj 0 0 1 rg ( derive) Tj 0 0 0 rg (\() Tj 0 0 0 rg (Show) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (impl) Tj 0 0 0 rg ( Arbitrary) Tj 0 0 1 rg ( for) Tj 0 0 0 rg ( Point) Tj 0 0 1 rg ( with) Tj 0 0 0 rg ( arbitrary) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( r1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( r0) Tj 0 0 0 rg (.split) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( y) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.Arbitrary) Tj 0 0 0 rg (::) Tj 0 0 0 rg (arbitrary) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  {) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (:) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.Arbitrary) Tj 0 0 0 rg (::) Tj 0 0 0 rg (arbitrary) Tj 0 0 0 rg (\() Tj 0 0 0 rg (size) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( r0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( y) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    ) Tj T* 12 TL (15  ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "custom type generation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( point) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Point) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.gen) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (point) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("{x: 0, y: 0}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( points) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Point) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @quickcheck) Tj 0 0 0 rg (.samples) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    points) Tj 0 0 0 rg ([) Tj 1 0 1 rg (6) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[{x: 0, y: 1}, {x: -1, y: -5}, {x: -6, y: -6}, {x: -1, y: 7}]") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The package is useful for writing property tests that verify code behavior acros) Tj T* (s a wide range of randomly generated inputs.) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 9
0000000000 65535 f 
0000000055 00000 n
0000000079 00000 n
0000000424 00000 n
0000000521 00000 n
0000004080 00000 n
0000000521 00000 n
0000005778 00000 n
0000000521 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
12233
%%EOF
