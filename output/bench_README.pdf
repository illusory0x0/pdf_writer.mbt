%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R 14 0 R 16 0 R 18 0 R 20 0 R]  
  /Count 9
>>
endobj
3 0 obj
<<
  /Length 1160
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (Bench Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic Benchmarking) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Benchmark Collection) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Benchmarking Different Algorithms) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Data Structure Benchmarks) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (String Operations Benchmarking) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Memory Usage Prevention) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Iteration Count Control) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Benchmarking Best Practices) Tj -40 0 Td 12 TL (1.8.1)' 0 TL 40 0 Td (1. Isolate What You're Measuring) Tj -40 0 Td 12 TL (1.8.2)' 0 TL 40 0 Td (2. Warm Up Before Measuring) Tj -40 0 Td 12 TL (1.8.3)' 0 TL 40 0 Td (3. Use Meaningful Names) Tj -40 0 Td 12 TL (1.9)' 0 TL 40 0 Td (Performance Analysis) Tj -40 0 Td 12 TL (1.10)' 0 TL 40 0 Td (Integration with Testing) Tj -40 0 Td 12 TL (1.11)' 0 TL 40 0 Td (Common Benchmarking Patterns) Tj -40 0 Td 12 TL (1.12)' 0 TL 40 0 Td (Tips for Accurate Benchmarks) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 2542
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Bench Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides benchmarking utilities for measuring the performance of Mo) Tj T* (onBit code. It includes functions for timing code execution, collecting statisti) Tj T* (cs, and generating performance reports.) Tj T* 12 TL T* /F0 20 Tf (Basic Benchmarking) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use the ) Tj /F0 12 Tf (single_bench) Tj /F0 12 Tf ( function to benchmark individual operations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic benchmarking") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( simple_calc) Tj 0 0 0 rg (\() Tj 0 0 0 rg (n) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (    n) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( summary) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( single_bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("simple_calc") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (simple_calc) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (summary) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( stringify) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Benchmark Collection) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use the ) Tj /F0 12 Tf (T) Tj /F0 12 Tf ( type to collect multiple benchmarks:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 3182
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "benchmark collection") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_creation") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_iteration") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (      sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Benchmarking Different Algorithms) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Compare the performance of different implementations:) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 3595
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "algorithm comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("linear_search") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( target) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( found) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( false) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 1 rg (      if) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( ==) Tj 0 0 0 rg ( target) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (        found) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( true) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (        break) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (found) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                                                         ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("builtin_contains") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (3) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Data Structure Benchmarks) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Benchmark different data structure operations:) Tj T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 6429
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "data structure benchmarks") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_append") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("fixedarray_access") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 0 0 0 rg (arr) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ([) Tj 0 0 0 rg (i) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Operations Benchmarking) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Measure string manipulation performance:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string benchmarks") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("string_concat") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "") Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "x") Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (                                               ) Tj T* 12 TL (15  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("stringbuilder") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( builder) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( StringBuilder) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (      builder) Tj 0 0 0 rg ( write_string) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("x") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (builder) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (24  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
13 0 obj
<<
  /Length 5948
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Memory Usage Prevention) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (keep) Tj /F0 12 Tf ( to prevent compiler optimizations from eliminating benchmarked code:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "preventing optimization") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("with_keep") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                                                                ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Iteration Count Control) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Control the number of benchmark iterations:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "iteration control") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                     ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("stable_benchmark") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( fold) Tj 0 0 0 rg (\() Tj 0 0 0 rg (init) Tj 0 0 0 rg (=) Tj 1 0 1 rg (0) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (acc) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( acc) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (      ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    count) Tj 0 0 0 rg (=) Tj 1 0 1 rg (20) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (    name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("quick_benchmark") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (    fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (      let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 1 rg (      for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (10) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (        result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( i) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (      }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (      ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (    count) Tj 0 0 0 rg (=) Tj 1 0 1 rg (2) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (31  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* ET
endstream
endobj
14 0 obj
<<
  /Type /Page  
  /Contents 13 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
15 0 obj
<<
  /Length 5514
>>
stream
 1 0 0 1 50 770 cm BT 12 TL T* /F0 20 Tf (Benchmarking Best Practices) Tj 20 TL T* 12 TL T* /F0 16 Tf (1. Isolate What You're Measuring) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "isolation example") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                 ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                           ) Tj T* 12 TL (8   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_sum") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (      sum) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( sum) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( x) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sum) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (14  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (2. Warm Up Before Measuring) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "warmup example") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( expensive_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (    let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (      result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( *) Tj 0 0 0 rg ( i) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    result) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                        ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( _) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (    ignore) Tj 0 0 0 rg (\() Tj 0 0 0 rg (expensive_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (                                         ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("warmed_up") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( expensive_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( report) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (report) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 30) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (3. Use Meaningful Names) Tj 16 TL T* 12 TL T* ET
endstream
endobj
16 0 obj
<<
  /Type /Page  
  /Contents 15 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
17 0 obj
<<
  /Length 4030
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "meaningful names") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                               ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_insert_10_items") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( i) Tj 0 0 1 rg ( in) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (..<) Tj 1 0 1 rg (10) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      arr) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg ( *) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (arr) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("array_search_sorted_10") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (makei) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (i) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( arr) Tj 0 0 0 rg ( contains) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (17  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                              ) Tj T* 12 TL (21  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Performance Analysis) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The benchmark results include statistical information:) Tj T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Timing measurements) Tj /F0 12 Tf (: Microsecond precision timing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Statistical analysis) Tj /F0 12 Tf (: Median, percentiles, and outlier detection) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Batch sizing) Tj /F0 12 Tf (: Automatic adjustment for stable measurements) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (JSON output) Tj /F0 12 Tf (: Machine-readable results for analysis) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Integration with Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Benchmarks can be integrated into your testing workflow:) Tj T* 12 TL T* ET
endstream
endobj
18 0 obj
<<
  /Type /Page  
  /Contents 17 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
19 0 obj
<<
  /Length 4641
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 0 rg (#skip\("slow tests"\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "performance regression test") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @bench) Tj 0 0 0 rg ( new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                              ) Tj T* 12 TL (7   ) Tj 0 0 0 rg (  bencher) Tj 0 0 0 rg ( bench) Tj 0 0 0 rg (\() Tj 0 0 0 rg (name) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("critical_algorithm") Tj 0 0 0 rg (,) Tj 0 0 1 rg ( fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (5) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 8) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 9) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 7) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 4) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 6) Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( sorted) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg (::) Tj 0 0 0 rg (new) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    for) Tj 0 0 0 rg ( x) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( data) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (      sorted) Tj 0 0 0 rg ( push) Tj 0 0 0 rg (\() Tj 0 0 0 rg (x) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    sorted) Tj 0 0 0 rg ( sort) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    bencher) Tj 0 0 0 rg ( keep) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sorted) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( results) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( bencher) Tj 0 0 0 rg ( dump_summaries) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (                                                                              ) Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (results) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 50) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                                ) Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Common Benchmarking Patterns) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Before/After comparisons) Tj /F0 12 Tf (: Benchmark code before and after optimizations) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Algorithm comparison) Tj /F0 12 Tf (: Compare different implementations of the same functionalit) Tj T* (y) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Scaling analysis) Tj /F0 12 Tf (: Benchmark with different input sizes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Memory vs. speed tradeoffs) Tj /F0 12 Tf (: Compare memory-efficient vs. speed-optimized approac) Tj T* (hes) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Platform differences) Tj /F0 12 Tf (: Compare performance across different targets \(JS, WASM, n) Tj T* (ative\)) Tj T* -10 0 Td 12 TL T* /F0 20 Tf (Tips for Accurate Benchmarks) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Run benchmarks multiple times and look for consistency) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Be aware of system load and other processes affecting timing) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use appropriate iteration counts \(more for stable results, fewer for quick feed) Tj T* (back\)) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Measure what matters to your use case) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Consider both average case and worst case performance) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Profile memory usage separately if memory performance is important) Tj T* -10 0 Td 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The bench package provides essential tools for performance analysis and optimiza) Tj T* (tion in MoonBit applications.) Tj T* 12 TL T* ET
endstream
endobj
20 0 obj
<<
  /Type /Page  
  /Contents 19 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 21
0000000000 65535 f 
0000000055 00000 n
0000000121 00000 n
0000001214 00000 n
0000000521 00000 n
0000002596 00000 n
0000000521 00000 n
0000003236 00000 n
0000000521 00000 n
0000003649 00000 n
0000000522 00000 n
0000006484 00000 n
0000000523 00000 n
0000006003 00000 n
0000000523 00000 n
0000005569 00000 n
0000000523 00000 n
0000004085 00000 n
0000000523 00000 n
0000004696 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
42903
%%EOF
