%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R]  
  /Count 5
>>
endobj
3 0 obj
<<
  /Length 657
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (json) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic JSON Operations) Tj -40 0 Td 12 TL (1.1.1)' 0 TL 40 0 Td (Parsing and Validating JSON) Tj -40 0 Td 12 TL (1.1.2)' 0 TL 40 0 Td (Object Navigation) Tj -40 0 Td 12 TL (1.1.3)' 0 TL 40 0 Td (Array Navigation) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Type-Safe JSON Conversion) Tj -40 0 Td 12 TL (1.2.1)' 0 TL 40 0 Td (From JSON to Native Types) Tj -40 0 Td 12 TL (1.2.2)' 0 TL 40 0 Td (Error Handling with JSON Path) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (JSON-based Snapshot Testing) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 3218
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (json) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The ) Tj /F0 12 Tf (json) Tj /F0 12 Tf ( package provides comprehensive JSON handling capabilities, including pa) Tj T* (rsing, stringifying, and type-safe conversion between JSON and other MoonBit dat) Tj T* (a types.) Tj T* 12 TL T* /F0 20 Tf (Basic JSON Operations) Tj 20 TL T* 12 TL T* /F0 16 Tf (Parsing and Validating JSON) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "parse and validate jsons") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                                    ) Tj T* 12 TL (4   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg (.valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("{\\"key\\": 42}") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg (.valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg (.valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("null") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  assert_true) Tj 0 0 0 rg (\() Tj 0 0 0 rg (@json) Tj 0 0 0 rg (.valid) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("false") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                      ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("{\\"key\\": 42}") Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    \() Tj 0 0 0 rg (_) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.ParseError) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( panic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                                                       ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                                  ) Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    json) Tj 0 0 0 rg (.stringify) Tj 0 0 0 rg (\() Tj 0 0 0 rg (indent) Tj 0 0 0 rg (=) Tj 1 0 1 rg (2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ({) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (      let) Tj 0 0 0 rg ( output) Tj 0 0 0 rg ( =) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 1 0 0 rg (        #|{) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 1 0 0 rg (        #|  "key": 42) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 1 0 0 rg (        #|}) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (      output) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Object Navigation) Tj 16 TL T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 5289
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json object navigation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.parse) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 1 0 0 rg (    "{\\"string\\":\\"hello\\",\\"number\\":42,\\"array\\":[1,2,3]}") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( string_opt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( json) Tj 0 0 0 rg (.value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("string") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.as_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (    string_opt) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 1 0 0 rg (      #|Some\("hello"\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (17  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( number_opt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( json) Tj 0 0 0 rg (.value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("number") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.as_number) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (number_opt) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(42\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (21  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array_opt) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( json) Tj 0 0 0 rg (.value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("array") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.as_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array_opt) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\([Number\(1\), Number\(2\), Number\(3\)]\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json) Tj 0 0 0 rg (.value) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("missing") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Array Navigation) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json array navigation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("[1,2,3,4,5]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                    ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( first) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( array) Tj 0 0 0 rg (.item) Tj 0 0 0 rg (\() Tj 1 0 1 rg (0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (first) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(Number\(1\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( missing) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( array) Tj 0 0 0 rg (.item) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (missing) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("None") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( values) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( array) Tj 0 0 0 rg (.as_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.unwrap) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (    values) Tj 0 0 0 rg (.iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[Number\(1\), Number\(2\), Number\(3\), Number\(4\), Number\(5\)]") Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Type-Safe JSON Conversion) Tj 20 TL T* 12 TL T* /F0 16 Tf (From JSON to Native Types) Tj 16 TL T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 5212
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json decode") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_number) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 1 0 1 rg (42) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( number) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_number) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (number) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                  ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_array) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg ([) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( array) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_array) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (array) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("[1, 2, 3]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_map) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( \() Tj 0 0 0 rg ({) Tj 1 0 0 rg ( "a") Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "b") Tj 0 0 0 rg (:) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg ( }) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( map) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Map) Tj 0 0 0 rg ([) Tj 0 0 0 rg (String) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_map) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    map) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    content) Tj 0 0 0 rg (=) Tj 0 0 0 rg (\() Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      #|{"a": 1, "b": 2}) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    \)) Tj 0 0 0 rg (,) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  \)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 16 Tf (Error Handling with JSON Path) Tj 16 TL T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json path") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  try) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( _arr) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Array) Tj 0 0 0 rg ([) Tj 0 0 0 rg (Int) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( @json) Tj 0 0 0 rg (.from_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 1 rg (42) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "not a number") Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 49) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    panic) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  }) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    @json) Tj 0 0 0 rg (.JsonDecodeError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (path) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("$[1]") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (      inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Int::from_json: expected number") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (JSON-based Snapshot Testing) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (@json.inspect\(\)) Tj /F0 12 Tf ( can be used as an alternative to ) Tj /F0 12 Tf (inspect\(\)) Tj /F0 12 Tf ( when a value's ) Tj /F0 12 Tf (To) Tj T* (Json) Tj /F0 12 Tf ( implementation is considered a better debugging representation than its ) Tj /F0 12 Tf (Sho) Tj T* (w) Tj /F0 12 Tf ( implementation.) Tj /F0 12 Tf ( ) Tj /F0 12 Tf (This is particularly true for deeply-nested data structures.) Tj T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 2018
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "json inspection") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( null) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( null) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                       ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_value) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 1 0 0 rg ( "key") Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "value") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "numbers") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  @json) Tj 0 0 0 rg (.inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_value) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ({) Tj 1 0 0 rg ( "key") Tj 0 0 0 rg (:) Tj 1 0 0 rg ( "value") Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "numbers") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( [) Tj 1 0 1 rg (1) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 3) Tj 0 0 0 rg (]) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( json_special) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( {) Tj 1 0 0 rg ( "null") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( null) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "bool") Tj 0 0 0 rg (:) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( }) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  @json) Tj 0 0 0 rg (.inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (json_special) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 0 0 0 rg ({) Tj 1 0 0 rg ( "null") Tj 0 0 0 rg (:) Tj 0 0 0 rg ( null) Tj 0 0 0 rg (,) Tj 1 0 0 rg ( "bool") Tj 0 0 0 rg (:) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 13
0000000000 65535 f 
0000000055 00000 n
0000000093 00000 n
0000000710 00000 n
0000000521 00000 n
0000003272 00000 n
0000000521 00000 n
0000005343 00000 n
0000000521 00000 n
0000005266 00000 n
0000000522 00000 n
0000002073 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
19755
%%EOF
