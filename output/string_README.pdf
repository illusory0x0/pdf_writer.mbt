%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R]  
  /Count 5
>>
endobj
3 0 obj
<<
  /Length 627
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (String Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (String Creation and Conversion) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (String Iteration) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (String Conversion) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Unicode Handling) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (String Comparison) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (String Views) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Practical Examples) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Performance Notes) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 2702
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (String Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides comprehensive string manipulation utilities for MoonBit, i) Tj T* (ncluding string creation, conversion, searching, and Unicode handling.) Tj T* 12 TL T* /F0 20 Tf (String Creation and Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Create strings from various sources:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string creation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( [) Tj 1 0 0 rg ('H') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'e') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'l') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'l') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'o') Tj 0 0 0 rg (]) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str1) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (str1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                            ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( str2) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (from_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg ([) Tj 1 0 0 rg ('W') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'o') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'r') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'l') Tj 0 0 0 rg (,) Tj 1 0 0 rg ( 'd') Tj 0 0 0 rg (]) Tj 0 0 0 rg (.iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (str2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("World") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( empty) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (::) Tj 0 0 0 rg (default) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (empty) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Iteration) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Iterate over Unicode characters in strings:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 4654
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string iteration") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello??) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg (.iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['H', 'e', 'l', 'l', 'o', '??']) Tj 0 0 0 rg (") Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( reversed) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg (.rev_iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (reversed) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['??', 'o', 'l', 'l', 'e', 'H']) Tj 0 0 0 rg (") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (                                                             ) Tj T* 12 TL (14  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( =) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( first_char) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( 'a') Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (  text) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  .iter2) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  .each) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (idx) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( char) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( idx) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (      first_char) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( char) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( count) Tj 0 0 0 rg ( +) Tj 1 0 1 rg ( 1) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (first_char) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("H") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("6") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                        ) Tj T* 12 TL (26  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Convert strings to other formats:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string conversion") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg (.to_array) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['H', 'e', 'l', 'l', 'o']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (                                          ) Tj T* 12 TL (10  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( bytes) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg (.to_bytes) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (bytes) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("10") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Unicode Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Work with Unicode characters and surrogate pairs:) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 5744
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "unicode handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello??World) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( char_count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg (.iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.count) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( code_unit_count) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (char_count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("11") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                      ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (code_unit_count) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("12") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( offset) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg (.offset_of_nth_char) Tj 0 0 0 rg (\() Tj 1 0 1 rg (5) Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                     ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (offset) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Some\(5\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( has_11_chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( emoji_text) Tj 0 0 0 rg (.char_length_eq) Tj 0 0 0 rg (\() Tj 1 0 1 rg (11) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (has_11_chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Comparison) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Strings are ordered using shortlex order by Unicode code points:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string comparison") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "apple") Tj 0 0 0 rg (.compare) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("banana") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("-1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                  ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "hello") Tj 0 0 0 rg (.compare) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("hello") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("0") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (         ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result3) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "zebra") Tj 0 0 0 rg (.compare) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("apple") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result3) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("1") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (                 ) Tj T* 12 TL (9   ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (String Views) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (String views provide efficient substring operations without copying:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "string views") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "Hello, World!") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( view) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg ([) Tj 1 0 1 rg (7) Tj 0 0 0 rg (:) Tj 1 0 1 rg (12) Tj 0 0 0 rg (]) Tj 0 0 0 rg (                                              ) Tj T* 12 TL (5   ) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (                                                ) Tj T* 12 TL (7   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( chars) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg (.iter) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (chars) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("['W', 'o', 'r', 'l', 'd']") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( substring) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( view) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (substring) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("World") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Practical Examples) Tj 20 TL T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 5137
>>
stream
 1 0 0 1 50 770 cm BT 12 TL /F0 12 Tf /F0 12 Tf (Common string manipulation tasks:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "practical examples") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "The quick brown fox") Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 0 rg (                                                             ) Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( words) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg (.split) Tj 0 0 0 rg (\() Tj 1 0 0 rg (" ") Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.collect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (words) Tj 0 0 0 rg (.length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("4") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (words) Tj 0 0 0 rg ([) Tj 1 0 1 rg (0) Tj 0 0 0 rg (]) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("The") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (words) Tj 0 0 0 rg ([) Tj 1 0 1 rg (3) Tj 0 0 0 rg (]) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("fox") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                                                              ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( word_strings) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( words) Tj 0 0 0 rg (.map) Tj 0 0 0 rg (\() Tj 0 0 1 rg (fn) Tj 0 0 0 rg (\() Tj 0 0 0 rg (v) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg ( v) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( }) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 1 rg ( mut) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 1 0 0 rg ( "") Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 1 rg (  for) Tj 0 0 0 rg ( i) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( word) Tj 0 0 1 rg ( in) Tj 0 0 0 rg ( word_strings) Tj 0 0 0 rg (.iter2) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( i) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg (      result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 1 0 0 rg ( "-") Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    result) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( word) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("The-quick-brown-fox") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (23  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( upper) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg (.to_upper) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (upper) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("THE QUICK BROWN FOX") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( lower) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( text) Tj 0 0 0 rg ([) Tj 0 0 0 rg (:) Tj 0 0 0 rg (]) Tj 0 0 0 rg (.to_lower) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg (.to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (lower) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("the quick brown fox") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Performance Notes) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (StringBuilder) Tj /F0 12 Tf ( or ) Tj /F0 12 Tf (Buffer) Tj /F0 12 Tf ( for building strings incrementally rather than repea) Tj T* (ted concatenation) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (String views are lightweight and don't copy the underlying data) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Unicode iteration handles surrogate pairs correctly but is slower than UTF-16 co) Tj T* (de unit iteration) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Character length operations \() Tj /F0 12 Tf (char_length_eq) Tj /F0 12 Tf (, ) Tj /F0 12 Tf (char_length_ge) Tj /F0 12 Tf (\) have O\(n\) compl) Tj T* (exity where n is the character count) Tj T* -10 0 Td 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 13
0000000000 65535 f 
0000000055 00000 n
0000000093 00000 n
0000000680 00000 n
0000000521 00000 n
0000002756 00000 n
0000000521 00000 n
0000004708 00000 n
0000000521 00000 n
0000005798 00000 n
0000000522 00000 n
0000005192 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
22225
%%EOF
