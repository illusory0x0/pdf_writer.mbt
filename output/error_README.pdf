%PDF-1.4
%ÄÅÇÉ
1 0 obj
<<
  /Type /Catalog  
  /Pages 2 0 R
>>
endobj
2 0 obj
<<
  /Type /Pages  
  /Kids [4 0 R 6 0 R 8 0 R 10 0 R 12 0 R 14 0 R 16 0 R]  
  /Count 7
>>
endobj
3 0 obj
<<
  /Length 661
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf 24 TL (Table of Contents)' /F0 12 Tf 12 TL T* (1)' 0 TL 40 0 Td (Error Package Documentation) Tj -40 0 Td 12 TL (1.1)' 0 TL 40 0 Td (Basic Error Usage) Tj -40 0 Td 12 TL (1.2)' 0 TL 40 0 Td (Custom Error Types) Tj -40 0 Td 12 TL (1.3)' 0 TL 40 0 Td (Error Display and JSON Conversion) Tj -40 0 Td 12 TL (1.4)' 0 TL 40 0 Td (Error Propagation and Handling) Tj -40 0 Td 12 TL (1.5)' 0 TL 40 0 Td (Resource Management with Finally) Tj -40 0 Td 12 TL (1.6)' 0 TL 40 0 Td (Error Composition) Tj -40 0 Td 12 TL (1.7)' 0 TL 40 0 Td (Best Practices) Tj -40 0 Td 12 TL (1.8)' 0 TL 40 0 Td (Performance Notes) Tj -40 0 Td 12 TL 36 TL T* ET
endstream
endobj
4 0 obj
<<
  /Type /Page  
  /Contents 3 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
5 0 obj
<<
  /Length 2927
>>
stream
 1 0 0 1 50 770 cm BT /F0 24 Tf (Error Package Documentation) Tj 24 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (This package provides utilities for working with MoonBit's error handling system) Tj T* (, including implementations of ) Tj /F0 12 Tf (Show) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (ToJson) Tj /F0 12 Tf ( traits for the built-in ) Tj /F0 12 Tf (Error) Tj /F0 12 Tf ( typ) Tj T* (e.) Tj T* 12 TL T* /F0 20 Tf (Basic Error Usage) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (MoonBit uses a structured error system with ) Tj /F0 12 Tf (raise) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (try) Tj /F0 12 Tf ( constructs:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "basic error handling") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 0 0 0 rg (a) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Int) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( b) Tj 0 0 0 rg ( ==) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (5   ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Division by zero") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (      a) Tj 0 0 0 rg ( /) Tj 0 0 0 rg ( b) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (12  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try!) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 2) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("5") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                           ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( divide) Tj 0 0 0 rg (\() Tj 1 0 1 rg (10) Tj 0 0 0 rg (,) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result2) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Err\(Failure\(\\"Division by zero\\"\)\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Custom Error Types) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Define custom error types using ) Tj /F0 12 Tf (suberror) Tj /F0 12 Tf (:) Tj T* 12 TL T* ET
endstream
endobj
6 0 obj
<<
  /Type /Page  
  /Contents 5 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
7 0 obj
<<
  /Length 4683
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ValidationError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( NetworkError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "custom errors") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( validate_email) Tj 0 0 0 rg (\() Tj 0 0 0 rg (email) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ValidationError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( email) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 5) Tj 0 0 0 rg ( {) Tj 0 0 0 rg (                                            ) Tj T* 12 TL (11  ) Tj 0 0 0 rg (      email) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( ValidationError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid email format") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( fetch_data) Tj 0 0 0 rg (\() Tj 0 0 0 rg (url) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( NetworkError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( url) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 10) Tj 0 0 0 rg ( {) Tj 0 0 0 rg (                     ) Tj T* 12 TL (19  ) Tj 1 0 0 rg (      "data") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( NetworkError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid URL") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (                          ) Tj T* 12 TL (26  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( email_result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( validate_email) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("short") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( email_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (                         ) Tj T* 12 TL (33  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( data_result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( fetch_data) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("short") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( data_result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (38  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Display and JSON Conversion) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (The error package provides ) Tj /F0 12 Tf (Show) Tj /F0 12 Tf ( and ) Tj /F0 12 Tf (ToJson) Tj /F0 12 Tf ( implementations:) Tj T* 12 TL T* ET
endstream
endobj
8 0 obj
<<
  /Type /Page  
  /Contents 7 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
9 0 obj
<<
  /Length 5645
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( MyError) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( derive) Tj 0 0 0 rg (\() Tj 0 0 0 rg (ToJson) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error display and json") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( Error) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( MyError) Tj 0 0 0 rg (\() Tj 1 0 1 rg (42) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (                                     ) Tj T* 12 TL (9   ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error_string) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( error) Tj 0 0 0 rg ( to_string) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (error_string) Tj 0 0 0 rg ( length) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( >) Tj 1 0 1 rg ( 0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (13  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( error_json) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( error) Tj 0 0 0 rg ( to_json) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (error_json) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("Array\([String\(\\"MyError\\"\), Number\(42\)]\)") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Propagation and Handling) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Handle errors at different levels of your application:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( FileError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error propagation") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( parse_number) Tj 0 0 0 rg (\() Tj 0 0 0 rg (s) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( s) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "42") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 1 rg (      42) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( ParseError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid number: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( s) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( read_and_parse) Tj 0 0 0 rg (\() Tj 0 0 0 rg (content) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( Int) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (    parse_number) Tj 0 0 0 rg (\() Tj 0 0 0 rg (content) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg (      ParseError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( FileError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Parse failed: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (                 ) Tj T* 12 TL (24  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result1) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try!) Tj 0 0 0 rg ( read_and_parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (result1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("42") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (                      ) Tj T* 12 TL (28  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( read_and_parse) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("invalid") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( result2) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* ET
endstream
endobj
10 0 obj
<<
  /Type /Page  
  /Contents 9 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
11 0 obj
<<
  /Length 3070
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Resource Management with Finally) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Use ) Tj /F0 12 Tf (protect) Tj /F0 12 Tf ( functions for resource cleanup:) Tj T* 12 TL T* /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ResourceError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "resource management") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( risky_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ResourceError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 1 rg (    raise) Tj 0 0 0 rg ( ResourceError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Something went wrong") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (8   ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 0 rg (                                       ) Tj T* 12 TL (11  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( use_resource) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (                                   ) Tj T* 12 TL (13  ) Tj 0 0 0 rg (    risky_operation) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (      ResourceError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (                               ) Tj T* 12 TL (16  ) Tj 0 0 1 rg (        raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Operation failed after cleanup") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try?) Tj 0 0 0 rg ( use_resource) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (  match) Tj 0 0 0 rg ( result) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    Ok) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (false) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (    Err) Tj 0 0 0 rg (\() Tj 0 0 0 rg (_) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 0 rg ( inspect) Tj 0 0 0 rg (\() Tj 0 0 1 rg (true) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("true") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Error Composition) Tj 20 TL T* 12 TL T* 12 TL /F0 12 Tf /F0 12 Tf (Combine multiple error-producing operations:) Tj T* 12 TL T* ET
endstream
endobj
12 0 obj
<<
  /Type /Page  
  /Contents 11 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
13 0 obj
<<
  /Length 5535
>>
stream
 1 0 0 1 50 770 cm BT /F4 12 Tf 12 TL (1   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (2   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( ConfigError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (3   ) Tj 0 0 0 rg () Tj T* 12 TL (4   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (5   ) Tj 0 0 1 rg (suberror) Tj 0 0 0 rg ( DatabaseError) Tj 0 0 0 rg ( String) Tj 0 0 0 rg () Tj T* 12 TL (6   ) Tj 0 0 0 rg () Tj T* 12 TL (7   ) Tj 0 0 0 rg (    ) Tj T* 12 TL (8   ) Tj 0 0 1 rg (test) Tj 1 0 0 rg ( "error composition") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (9   ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( load_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( ConfigError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (10  ) Tj 0 0 1 rg (    if) Tj 0 0 1 rg ( true) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (11  ) Tj 1 0 0 rg (      "config_data") Tj 0 0 0 rg () Tj T* 12 TL (12  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (13  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( ConfigError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Config not found") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (14  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (15  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (16  ) Tj 0 0 0 rg () Tj T* 12 TL (17  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( connect_database) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config) Tj 0 0 0 rg ( :) Tj 0 0 0 rg ( String) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( DatabaseError) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (18  ) Tj 0 0 1 rg (    if) Tj 0 0 0 rg ( config) Tj 0 0 0 rg ( ==) Tj 1 0 0 rg ( "config_data") Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (19  ) Tj 1 0 0 rg (      "connected") Tj 0 0 0 rg () Tj T* 12 TL (20  ) Tj 0 0 0 rg (    }) Tj 0 0 1 rg ( else) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (21  ) Tj 0 0 1 rg (      raise) Tj 0 0 0 rg ( DatabaseError) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Invalid config") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (22  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (23  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (24  ) Tj 0 0 0 rg () Tj T* 12 TL (25  ) Tj 0 0 1 rg (  fn) Tj 0 0 0 rg ( initialize_app) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ->) Tj 0 0 0 rg ( String) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (26  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( config) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( load_config) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (27  ) Tj 0 0 0 rg (      ConfigError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Config error: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (28  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (29  ) Tj 0 0 1 rg (    let) Tj 0 0 0 rg ( db) Tj 0 0 0 rg ( =) Tj 0 0 0 rg ( connect_database) Tj 0 0 0 rg (\() Tj 0 0 0 rg (config) Tj 0 0 0 rg (\)) Tj 0 0 1 rg ( catch) Tj 0 0 0 rg ( {) Tj 0 0 0 rg () Tj T* 12 TL (30  ) Tj 0 0 0 rg (      DatabaseError) Tj 0 0 0 rg (\() Tj 0 0 0 rg (msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( =>) Tj 0 0 1 rg ( raise) Tj 0 0 0 rg ( Failure) Tj 0 0 0 rg (\() Tj 1 0 0 rg ("Database error: ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( msg) Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (31  ) Tj 0 0 0 rg (    }) Tj 0 0 0 rg () Tj T* 12 TL (32  ) Tj 1 0 0 rg (    "App initialized with ") Tj 0 0 0 rg ( +) Tj 0 0 0 rg ( db) Tj 0 0 0 rg () Tj T* 12 TL (33  ) Tj 0 0 0 rg (  }) Tj 0 0 0 rg () Tj T* 12 TL (34  ) Tj 0 0 0 rg () Tj T* 12 TL (35  ) Tj 0 0 1 rg (  let) Tj 0 0 0 rg ( app_result) Tj 0 0 0 rg ( =) Tj 0 0 1 rg ( try!) Tj 0 0 0 rg ( initialize_app) Tj 0 0 0 rg (\() Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (36  ) Tj 0 0 0 rg (  inspect) Tj 0 0 0 rg (\() Tj 0 0 0 rg (app_result) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( content) Tj 0 0 0 rg (=) Tj 1 0 0 rg ("App initialized with connected") Tj 0 0 0 rg (\)) Tj 0 0 0 rg () Tj T* 12 TL (37  ) Tj 0 0 0 rg (}) Tj 0 0 0 rg () Tj T* T* 12 TL T* /F0 20 Tf (Best Practices) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use specific error types) Tj /F0 12 Tf (: Create custom ) Tj /F0 12 Tf (suberror) Tj /F0 12 Tf ( types for different error categ) Tj T* (ories) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Provide meaningful messages) Tj /F0 12 Tf (: Include context and actionable information in error) Tj T* ( messages) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Handle errors at appropriate levels) Tj /F0 12 Tf (: Don't catch errors too early; let them prop) Tj T* (agate to where they can be properly handled) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use ) Tj /F0 12 Tf (try!) Tj /F0 12 Tf ( for operations that should not fail) Tj /F0 12 Tf (: This will panic if an error occurs) Tj T* (, making failures visible during development) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Use ) Tj /F0 12 Tf (try?) Tj /F0 12 Tf ( for recoverable errors) Tj /F0 12 Tf (: This returns a ) Tj /F0 12 Tf (Result) Tj /F0 12 Tf ( type that can be pattern ) Tj T* (matched) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F1 12 Tf (Implement proper cleanup) Tj /F0 12 Tf (: Use the ) Tj /F0 12 Tf (protect) Tj /F0 12 Tf ( pattern or similar constructs for reso) Tj T* (urce management) Tj T* -10 0 Td 12 TL T* ET
endstream
endobj
14 0 obj
<<
  /Type /Page  
  /Contents 13 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
15 0 obj
<<
  /Length 595
>>
stream
 1 0 0 1 50 770 cm BT /F0 20 Tf (Performance Notes) Tj 20 TL T* 12 TL T* /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Error handling in MoonBit is zero-cost when no errors occur) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Error propagation is efficient and doesn't require heap allocation for the error) Tj T* ( path) Tj T* -10 0 Td /F1 12 Tf 0 TL 10 0 Td (- ) Tj 12 TL /F0 12 Tf /F0 12 Tf (Custom error types with ) Tj /F0 12 Tf (derive\(ToJson\)) Tj /F0 12 Tf ( automatically generate efficient JSON s) Tj T* (erialization) Tj T* -10 0 Td 12 TL T* ET
endstream
endobj
16 0 obj
<<
  /Type /Page  
  /Contents 15 0 R  
  /Parent 2 0 R  
  /MediaBox [0 0 595.2765 841.89105]  
  /Resources <<
  /Font <<
  /F0 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Roman
>>  
  /F1 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Bold
>>  
  /F2 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-Italic
>>  
  /F3 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Times-BoldItalic
>>  
  /F4 <<
  /Type /Font  
  /Subtype /Type1  
  /BaseFont /Courier
>>
>>
>>
>>
endobj
xref
0 17
0000000000 65535 f 
0000000055 00000 n
0000000107 00000 n
0000000714 00000 n
0000000521 00000 n
0000002981 00000 n
0000000521 00000 n
0000004737 00000 n
0000000521 00000 n
0000005699 00000 n
0000000522 00000 n
0000003125 00000 n
0000000523 00000 n
0000005590 00000 n
0000000523 00000 n
0000000649 00000 n
0000000523 00000 n
trailer
<<
  /Size 5  
  /Root 1 0 R
>>
startxref
27726
%%EOF
