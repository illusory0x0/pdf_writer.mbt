// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/pdf/cmark_pdf"

import(
  "illusory0x0/pdf"
  "rami3l/cmark/cmark"
)

// Values

// Errors

// Types and methods
pub(all) enum Block {
  Heading(level~ : Int, text~ : String)
  Paragraph(Array[Inline])
  BlankLine
  CodeBlock(language~ : String, code~ : Array[Bytes])
  Blocks(Array[Block])
  List(Array[Block])
}
fn Block::from_cmark(@cmark.Block) -> Self
fn Block::from_list_item(@cmark.ListItem) -> Self
impl Show for Block
impl ToJson for Block

type Canvas
fn Canvas::begin_text(Self) -> Unit
fn Canvas::close_path(Self) -> Unit
fn Canvas::end_path(Self) -> Unit
fn Canvas::end_text(Self) -> Unit
fn Canvas::fill(Self) -> Unit
fn Canvas::fill_and_stroke(Self) -> Unit
fn Canvas::line_to(Self, Double, Double) -> Unit
fn Canvas::move_text(Self, Double, Double) -> Unit
fn Canvas::move_text_set_leading(Self, Double, Double) -> Unit
fn Canvas::move_to(Self, Double, Double) -> Unit
fn Canvas::new() -> Self
fn Canvas::next_line(Self) -> Unit
fn Canvas::rectangle(Self, Double, Double, Double, Double) -> Unit
fn Canvas::restore_state(Self) -> Unit
fn Canvas::save_state(Self) -> Unit
fn Canvas::set_char_spacing(Self, Double) -> Unit
fn Canvas::set_font(Self, Bytes, Double) -> Unit
fn Canvas::set_gray_fill(Self, Double) -> Unit
fn Canvas::set_gray_stroke(Self, Double) -> Unit
fn Canvas::set_horizontal_scaling(Self, Double) -> Unit
fn Canvas::set_leading(Self, Double) -> Unit
fn Canvas::set_line_width(Self, Double) -> Unit
fn Canvas::set_rgb_fill_color(Self, Double, Double, Double) -> Unit
fn Canvas::set_rgb_stroke_color(Self, Double, Double, Double) -> Unit
fn Canvas::set_text_rendering_mode(Self, Int) -> Unit
fn Canvas::set_text_rise(Self, Double) -> Unit
fn Canvas::set_word_spacing(Self, Double) -> Unit
fn Canvas::show_text(Self, Bytes) -> Unit
fn Canvas::show_text_next_line(Self, Bytes) -> Unit
fn Canvas::stroke(Self) -> Unit
fn Canvas::to_array(Self) -> Array[@pdf.GraphicOperator]
fn Canvas::to_content(Self) -> Content

pub(all) struct Content(Array[@pdf.GraphicOperator])
#deprecated
fn Content::inner(Self) -> Array[@pdf.GraphicOperator]

pub(all) struct Doc(Array[Block])
fn Doc::from_cmark(@cmark.Doc) -> Self
#deprecated
fn Doc::inner(Self) -> Array[Block]
impl Show for Doc
impl ToJson for Doc

pub(all) struct FlatHeading {
  num : Array[Int]
  text : String
}
impl Show for FlatHeading
impl ToJson for FlatHeading

pub(all) enum Inline {
  Plain(String)
  StrongEmphasis(String)
  Emphasis(String)
  StrongEmphasis_Emphasis(String)
  CodeSpan(String)
}
fn Inline::from_cmark(@cmark.Inline) -> Array[Self]
impl Show for Inline
impl ToJson for Inline

pub(all) enum StandardFont {
  TimesRoman
  TimesBold
  TimesItalic
  TimesBoldItalic
  Helvetica
  HelveticaBold
  HelveticaOblique
  HelveticaBoldOblique
  Courier
  CourierBold
  CourierOblique
  CourierBoldOblique
  Symbol
  ZapfDingbats
}

// Type aliases

// Traits

