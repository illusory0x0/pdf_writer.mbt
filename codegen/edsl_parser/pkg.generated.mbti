// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/codegen/edsl_parser"

import(
  "moonbitlang/core/json"
)

// Values
#callsite(autofill(loc))
fn current_source_location(loc~ : SourceLoc) -> SourceLocation

fn read_code_snippet(SourceLocation) -> String raise

#callsite(autofill(loc))
fn[Action] rule(Action, loc~ : SourceLoc) -> SourceLocation

// Errors

// Types and methods
pub struct Func {
  parms : Array[Parm]
  rslt_typ : String
  body : String
}
fn Func::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn Func::name(Self) -> String
fn Func::parse(StringView) -> Self
fn Func::to_json(Self) -> Json // from trait `ToJson`
fn Func::to_production_rule(Self) -> String
impl ToJson for Func
impl @json.FromJson for Func

pub struct NonTerminal(Array[Func])
fn NonTerminal::emit(Self) -> String
fn NonTerminal::from(Array[SourceLocation]) -> Self raise
fn NonTerminal::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
#deprecated
fn NonTerminal::inner(Self) -> Array[Func]
fn NonTerminal::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for NonTerminal
impl @json.FromJson for NonTerminal

pub struct Parm {
  name : String
  typ : String
}
fn Parm::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn Parm::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Parm
impl @json.FromJson for Parm

pub struct SourceLocation {
  path : String
  start_row : Int
  start_col : Int
  end_row : Int
  end_col : Int
}
fn SourceLocation::from_string(String) -> Self
fn SourceLocation::split_file(String, Array[Self]) -> Array[StringView]

// Type aliases

// Traits

