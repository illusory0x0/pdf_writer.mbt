// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/pdf"

import(
  "illusory0x0/fmt"
  "moonbitlang/core/json"
)

// Values
fn ascii_string_of_bytes(Bytes) -> String

fn parse(Array[(Token, Position, Position)], initial_pos? : Position) -> Unit raise ParseError

fn tokenize(BytesView) -> Array[(Token, Position, Position)]

fn tokenize_pdf_hexadecimal_string(BytesView) -> Bytes

fn tokenize_pdf_literal_string(BytesView) -> Bytes

fn tokenize_pdf_name(BytesView) -> Bytes

// Errors
pub suberror ParseError {
  UnexpectedToken(Token, (Position, Position), Array[TokenKind])
  UnexpectedEndOfInput(Position, Array[TokenKind])
}

// Types and methods
type DICT_BEGIN

type DICT_END

type EOF

type FALSE

pub(all) struct File {
  major : Int
  minor : Int
  objects : Array[Object]
  trailer : Object
}
impl @fmt.Format for File

type Func
impl ToJson for Func
impl @json.FromJson for Func

type GREATER_THAN_SIGN

pub(all) enum GraphicOperator {
  Op_w(Double)
  Op_J(Int)
  Op_j(Int)
  Op_M(Double)
  Op_d(Array[Double], Double)
  Op_ri(Bytes)
  Op_i(Double)
  Op_gs(Bytes)
  Op_q
  Op_Q
  Op_cm(TransformMatrix)
  Op_m(Double, Double)
  Op_l(Double, Double)
  Op_c(Double, Double, Double, Double, Double, Double)
  Op_v(Double, Double, Double, Double)
  Op_y(Double, Double, Double, Double)
  Op_h
  Op_re(Double, Double, Double, Double)
  Op_S
  Op_s
  Op_f
  Op_F
  Op_f_star
  Op_B
  Op_B_star
  Op_b
  Op_b_star
  Op_n
  Op_W
  Op_W_star
  Op_BT
  Op_ET
  Op_Tc(Double)
  Op_Tw(Double)
  Op_Tz(Double)
  Op_TL(Double)
  Op_Tf(Bytes, Double)
  Op_Tr(Int)
  Op_Ts(Double)
  Op_Td(Double, Double)
  Op_TD(Double, Double)
  Op_Tm(TransformMatrix)
  Op_T_star
  Op_Tj(Bytes)
  Op_TJ(Object)
  Op_single_quote(Bytes)
  Op_double_quote(Double, Double, Bytes)
  Op_d0(Double, Double)
  Op_d1(Double, Double, Double, Double, Double, Double)
  Op_CS(Bytes)
  Op_cs(Bytes)
  Op_SC(Array[Double])
  Op_sc(Array[Double])
  Op_SCN(Array[Double])
  Op_scn(Array[Double])
  Op_SCNName(Bytes, Array[Double])
  Op_scnName(Bytes, Array[Double])
  Op_G(Double)
  Op_g(Double)
  Op_RG(Double, Double, Double)
  Op_rg(Double, Double, Double)
  Op_K(Double, Double, Double, Double)
  Op_k(Double, Double, Double, Double)
  Op_sh(Bytes)
  InlineImage(Object, Bytes)
  Op_Do(Bytes)
  Op_MP(Bytes)
  Op_DP(Bytes, Object)
  Op_BMC(Bytes)
  Op_BDC(Bytes, Object)
  Op_EMC
  Op_BX
  OP_EX
  Op_Unknown(Bytes)
  Op_Comment(Bytes)
}
impl @fmt.Format for GraphicOperator

type INDIRECT
impl Eq for INDIRECT
impl Show for INDIRECT

type LEFT_CURLY_BRACE

type LEFT_PARENTHESIS

type LEFT_SQUARE_BRACKET

type LESS_THAN_SIGN

type NULL

type NonTerminal
impl ToJson for NonTerminal
impl @json.FromJson for NonTerminal

pub(all) enum Object {
  Null
  Boolean(Bool)
  Integer(Int)
  Real(Double)
  String(Bytes)
  Name(Bytes)
  Array(Array[Object])
  Dictionary(Array[(Bytes, Object)])
  Stream(Object, Stream)
  Indirect(Int)
}
impl @fmt.Format for Object

type Parm
impl ToJson for Parm
impl @json.FromJson for Parm

pub struct Position {
  row : Int
  col : Int
}
impl Show for Position
impl ToJson for Position
impl @json.FromJson for Position

type RIGHT_CURLY_BRACE

type RIGHT_PARENTHESIS

type RIGHT_SQUARE_BRACKET

type SOLIDUS

type SourceLocation

pub(all) struct Stream(Bytes)
#deprecated
fn Stream::inner(Self) -> Bytes

type TRUE

pub(all) enum Token {
  LEFT_PARENTHESIS
  RIGHT_PARENTHESIS
  LEFT_CURLY_BRACE
  RIGHT_CURLY_BRACE
  LEFT_SQUARE_BRACKET
  RIGHT_SQUARE_BRACKET
  LESS_THAN_SIGN
  GREATER_THAN_SIGN
  SOLIDUS
  DICT_BEGIN
  DICT_END
  NULL
  TRUE
  FALSE
  INTEGER(Int)
  REAL(Double)
  STRING(Bytes)
  NAME(Bytes)
  INDIRECT(INDIRECT)
  EOF
}
fn Token::kind(Self) -> TokenKind
impl Show for Token

pub(all) enum TokenKind {
  TK_LEFT_PARENTHESIS
  TK_RIGHT_PARENTHESIS
  TK_LEFT_CURLY_BRACE
  TK_RIGHT_CURLY_BRACE
  TK_LEFT_SQUARE_BRACKET
  TK_RIGHT_SQUARE_BRACKET
  TK_LESS_THAN_SIGN
  TK_GREATER_THAN_SIGN
  TK_SOLIDUS
  TK_DICT_BEGIN
  TK_DICT_END
  TK_NULL
  TK_TRUE
  TK_FALSE
  TK_INTEGER
  TK_REAL
  TK_STRING
  TK_NAME
  TK_INDIRECT
  TK_EOF
}
impl Eq for TokenKind
impl Show for TokenKind

pub(all) struct TransformMatrix {
  a : Double
  b : Double
  c : Double
  d : Double
  e : Double
  f : Double
}

// Type aliases

// Traits

